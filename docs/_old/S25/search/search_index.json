{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"17-313 Foundations of Software Engineering \u00b6 This Week \u00b6 Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None! Class Calendar \u00b6 Weekly Schedule \u00b6 Date Lecture Reading Recitation Project Deadline Mon Jan 13 Recitation 1 - Understand NodeBB description Handout Tue Jan 14 Introduction Project 1A - Build Checkpoint Due Fri, Jan 17th @ 11:59pm description Handout Wed Jan 15 Thu Jan 16 Boeing Case Study Boeing Case Study Reading Fri Jan 17 Mon Jan 20 Project 1B - Starter Task Due Thu, Jan 23rd @ 11:59pm description Handout Tue Jan 21 Software Archaeology Wed Jan 22 Thu Jan 23 Measurements and Metrics Fri Jan 24 Project 2A - Team Process & Planning Thursday, January 30th, 11:59pm description Handout Mon Jan 27 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 28 Software Engineering Process Wed Jan 29 Thu Jan 30 Teams and Communication Fri Jan 31 Project 2B - Collaborative Development Tuesday, Feb 11th, 11:59pm description Handout Mon Feb 3 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 4 Introduction to Software Architecture Wed Feb 5 Thu Feb 6 Architecture: Microservices Fri Feb 7 Mon Feb 10 Recitation 4 - Project Presentations slideshow Slides description Handout equalizer Quiz Tue Feb 11 Architecture: Design Docs Wed Feb 12 Project 2C - Collaborative Development Thursday, Feb 27th, 11:59pm description Handout Thu Feb 13 Software Quality Fri Feb 14 Mon Feb 17 Recitation 5 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 18 Risk, CI and Code Review Wed Feb 19 Thu Feb 20 Dynamic Analysis Tools Fri Feb 21 Mon Feb 24 Recitation 6 - Deployment slideshow Slides description Handout equalizer Quiz Tue Feb 25 Deployment Workshop Wed Feb 26 Thu Feb 27 Midterm 1 Fri Feb 28 P3A - Checkpoint Due Thu, March 13th, 11:59pm description Handout Mon Mar 3 Tue Mar 4 Spring Break - No Class Wed Mar 5 Thu Mar 6 Spring Break - No Class Fri Mar 7 Mon Mar 10 Recitation 7 - On Prem Deployment description Handout equalizer Quiz Tue Mar 11 Static Analysis Tools Wed Mar 12 Thu Mar 13 AI/ML/LLM and SE Fri Mar 14 P3B - Final Deliverables Due Thu, March 20th, 11:59pm description Handout Mon Mar 17 Recitation 8 - Large Language Models slideshow Slides description Handout equalizer Quiz Tue Mar 18 Engineering ML Systems Wed Mar 19 Thu Mar 20 Usability Engineering Fri Mar 21 P4A - Checkpoint Due Thursday, March 27th, 11:59pm description Handout Mon Mar 24 Recitation 9 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Mar 25 Ethics Wed Mar 26 Thu Mar 27 Difficult Conversations Fri Mar 28 P4B - Checkpoint Due Sunday, April 6st, 11:59pm description Handout Mon Mar 31 Recitation 10 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Apr 1 AI Coding Activity Wed Apr 2 P4C - Final Deliverables Due Wednesday, April 9th, 11:59pm description Handout Thu Apr 3 Spring Carnival - No Class Fri Apr 4 Mon Apr 7 Recitation 11 - Midterm 2 Review slideshow Slides description Handout equalizer Quiz Tue Apr 8 Reliably Releasing Software Wed Apr 9 Thu Apr 10 Reliably Releasing Software (continued) Fri Apr 11 Mon Apr 14 Recitation 12 - Open Source Project Selection P5A - Project & Tasks Selection Check-In Due Wed, April 16th @ 11:59pm description Handout Tue Apr 15 Open Source Wed Apr 16 P5B and P5C - Open Source Excursion Due Sun, May 4th @ 11:59pm description Handout Thu Apr 17 Midterm 2 Fri Apr 18 Mon Apr 21 Recitation 13 - Open Source Project Presentation slideshow Slides description Handout equalizer Quiz Tue Apr 22 This lecture can save you 12 million dollars Wed Apr 23 Thu Apr 24 Final Thoughts Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 1 Fri May 2 Staff \u00b6 Instructors \u00b6 Michael Hilton mail public Austin Henley mail public Nadia Nahar mail public Teaching Assistants \u00b6 Juan Ageitos mail Sophia Witt mail Yerim Song mail Kareem Segizekov mail Kush Jain mail Yu Fang mail Haomin Ng mail","title":"Home"},{"location":"#17-313-foundations-of-software-engineering","text":"","title":"17-313 Foundations of Software Engineering"},{"location":"#this-week","text":"Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None!","title":"This Week"},{"location":"#class-calendar","text":"","title":"Class Calendar"},{"location":"#weekly-schedule","text":"Date Lecture Reading Recitation Project Deadline Mon Jan 13 Recitation 1 - Understand NodeBB description Handout Tue Jan 14 Introduction Project 1A - Build Checkpoint Due Fri, Jan 17th @ 11:59pm description Handout Wed Jan 15 Thu Jan 16 Boeing Case Study Boeing Case Study Reading Fri Jan 17 Mon Jan 20 Project 1B - Starter Task Due Thu, Jan 23rd @ 11:59pm description Handout Tue Jan 21 Software Archaeology Wed Jan 22 Thu Jan 23 Measurements and Metrics Fri Jan 24 Project 2A - Team Process & Planning Thursday, January 30th, 11:59pm description Handout Mon Jan 27 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 28 Software Engineering Process Wed Jan 29 Thu Jan 30 Teams and Communication Fri Jan 31 Project 2B - Collaborative Development Tuesday, Feb 11th, 11:59pm description Handout Mon Feb 3 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 4 Introduction to Software Architecture Wed Feb 5 Thu Feb 6 Architecture: Microservices Fri Feb 7 Mon Feb 10 Recitation 4 - Project Presentations slideshow Slides description Handout equalizer Quiz Tue Feb 11 Architecture: Design Docs Wed Feb 12 Project 2C - Collaborative Development Thursday, Feb 27th, 11:59pm description Handout Thu Feb 13 Software Quality Fri Feb 14 Mon Feb 17 Recitation 5 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 18 Risk, CI and Code Review Wed Feb 19 Thu Feb 20 Dynamic Analysis Tools Fri Feb 21 Mon Feb 24 Recitation 6 - Deployment slideshow Slides description Handout equalizer Quiz Tue Feb 25 Deployment Workshop Wed Feb 26 Thu Feb 27 Midterm 1 Fri Feb 28 P3A - Checkpoint Due Thu, March 13th, 11:59pm description Handout Mon Mar 3 Tue Mar 4 Spring Break - No Class Wed Mar 5 Thu Mar 6 Spring Break - No Class Fri Mar 7 Mon Mar 10 Recitation 7 - On Prem Deployment description Handout equalizer Quiz Tue Mar 11 Static Analysis Tools Wed Mar 12 Thu Mar 13 AI/ML/LLM and SE Fri Mar 14 P3B - Final Deliverables Due Thu, March 20th, 11:59pm description Handout Mon Mar 17 Recitation 8 - Large Language Models slideshow Slides description Handout equalizer Quiz Tue Mar 18 Engineering ML Systems Wed Mar 19 Thu Mar 20 Usability Engineering Fri Mar 21 P4A - Checkpoint Due Thursday, March 27th, 11:59pm description Handout Mon Mar 24 Recitation 9 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Mar 25 Ethics Wed Mar 26 Thu Mar 27 Difficult Conversations Fri Mar 28 P4B - Checkpoint Due Sunday, April 6st, 11:59pm description Handout Mon Mar 31 Recitation 10 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Apr 1 AI Coding Activity Wed Apr 2 P4C - Final Deliverables Due Wednesday, April 9th, 11:59pm description Handout Thu Apr 3 Spring Carnival - No Class Fri Apr 4 Mon Apr 7 Recitation 11 - Midterm 2 Review slideshow Slides description Handout equalizer Quiz Tue Apr 8 Reliably Releasing Software Wed Apr 9 Thu Apr 10 Reliably Releasing Software (continued) Fri Apr 11 Mon Apr 14 Recitation 12 - Open Source Project Selection P5A - Project & Tasks Selection Check-In Due Wed, April 16th @ 11:59pm description Handout Tue Apr 15 Open Source Wed Apr 16 P5B and P5C - Open Source Excursion Due Sun, May 4th @ 11:59pm description Handout Thu Apr 17 Midterm 2 Fri Apr 18 Mon Apr 21 Recitation 13 - Open Source Project Presentation slideshow Slides description Handout equalizer Quiz Tue Apr 22 This lecture can save you 12 million dollars Wed Apr 23 Thu Apr 24 Final Thoughts Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 1 Fri May 2","title":"Weekly Schedule"},{"location":"#staff","text":"","title":"Staff"},{"location":"#instructors","text":"","title":"Instructors"},{"location":"#teaching-assistants","text":"","title":"Teaching Assistants"},{"location":"hall-of-fame/","text":"A list of student groups with links to their merged PRs in open source projects. 2024 Fall \u00b6 Group Name Team Members Project Merged PRs Sweethearts Jullia Andrei Montejo, Jasmine Shi, Mia Li, Cheyu Tu, Alice Kang Daily.dev #3897 Five Guys Alexis Wang, Emily Zhu, Pauline Zhang, Ethan Tan, Justin Oeni Puter #980 Craig Street Chipotle Tracy Yang, Caroline Michalow, Yang Pan, Mathias VanBriesen, Alex Lewis Svelte #14615 Kale Ariel Chiu, Yu Fang, Elaine Gombos, Kayla Lei FreeCodeCamp #57298 d-buggers Omar Ghabayen, Ben Condemi, Melody Hu, Jack Sun Recipe Scraper #1408 , #1411 #1415 #1416 boba Evelynn Chen, Alice Le, Anna Shi, Vicky Chen, Cass Ma Harmony #71 DRY cLEaners Daniel Sung, Reem Muhammed Hashir, Lawrence Lee, Ellia Yang, Yiyao Wang Fishfolk Jumpy #1046 aawaa Haomin Ng, Owen Gometz, Rong Yuan, Nita Thaveesittikullarp, Evelyn Zheng Fishfolk Jumpy #2249 2024 Spring \u00b6 Group Name Team Members Project Merged PRs CCC Kevin Ren, Kareem Segizekov, Daniel Chen, Juan Ageitos, Justin Park OpenLibrary #9093 , #9170 Wildcats Tiger Huo, Amanda Zhu, Wen Hu, Cassandra Zhou PyTorch #123581 Capibaras Xinyi Chen, Rebecca (Baijia) Li, Larissa Tyagi, Nicolas Marulanda developerFolio #698 Roger Shreya Choksi, Bryce Zhang, Chenjia Fan, Theo Kroening, Feiyang Xu CounterForMessenger #7 , #56 Cute Capybaras Oliver Zhang, Tishyaa Chaudhry, Parth Rustagi, Alina Fang Presto #22519 Allegra Prina Doshi, Bennett Li, Jason Kwok, Albert Lin SvelteJS #170007 2023 Fall \u00b6 Group Name Team Members Project Merged PRs Softwear Ariel Kwak, Hao Kang, Bojun Li, Sen Feng, Cindy Liu Jupyter Notebook #7178 Bug Busters Ritu Pathak, Mayar Al-Kurdi, Matthew Leboffe, Yuhe Ma Ockam #7059 Slam Meghna Chityala, Adam Bournes, Sally Pak, Lara Marinov Apache OpenNLP #559 OP Yuchen Liang, Xavier Xia, Alice Hong, Serena Yao, Peter Lu LangChain #14272 Pitt Begels Ryan Huang, Joyce Huang, Connor Maas, Tyrece Jeffrey, Khuslen Misheel Tandoor Recipes #2793 2023 Spring \u00b6 Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"Hall of Fame"},{"location":"hall-of-fame/#2024-fall","text":"Group Name Team Members Project Merged PRs Sweethearts Jullia Andrei Montejo, Jasmine Shi, Mia Li, Cheyu Tu, Alice Kang Daily.dev #3897 Five Guys Alexis Wang, Emily Zhu, Pauline Zhang, Ethan Tan, Justin Oeni Puter #980 Craig Street Chipotle Tracy Yang, Caroline Michalow, Yang Pan, Mathias VanBriesen, Alex Lewis Svelte #14615 Kale Ariel Chiu, Yu Fang, Elaine Gombos, Kayla Lei FreeCodeCamp #57298 d-buggers Omar Ghabayen, Ben Condemi, Melody Hu, Jack Sun Recipe Scraper #1408 , #1411 #1415 #1416 boba Evelynn Chen, Alice Le, Anna Shi, Vicky Chen, Cass Ma Harmony #71 DRY cLEaners Daniel Sung, Reem Muhammed Hashir, Lawrence Lee, Ellia Yang, Yiyao Wang Fishfolk Jumpy #1046 aawaa Haomin Ng, Owen Gometz, Rong Yuan, Nita Thaveesittikullarp, Evelyn Zheng Fishfolk Jumpy #2249","title":"2024 Fall"},{"location":"hall-of-fame/#2024-spring","text":"Group Name Team Members Project Merged PRs CCC Kevin Ren, Kareem Segizekov, Daniel Chen, Juan Ageitos, Justin Park OpenLibrary #9093 , #9170 Wildcats Tiger Huo, Amanda Zhu, Wen Hu, Cassandra Zhou PyTorch #123581 Capibaras Xinyi Chen, Rebecca (Baijia) Li, Larissa Tyagi, Nicolas Marulanda developerFolio #698 Roger Shreya Choksi, Bryce Zhang, Chenjia Fan, Theo Kroening, Feiyang Xu CounterForMessenger #7 , #56 Cute Capybaras Oliver Zhang, Tishyaa Chaudhry, Parth Rustagi, Alina Fang Presto #22519 Allegra Prina Doshi, Bennett Li, Jason Kwok, Albert Lin SvelteJS #170007","title":"2024 Spring"},{"location":"hall-of-fame/#2023-fall","text":"Group Name Team Members Project Merged PRs Softwear Ariel Kwak, Hao Kang, Bojun Li, Sen Feng, Cindy Liu Jupyter Notebook #7178 Bug Busters Ritu Pathak, Mayar Al-Kurdi, Matthew Leboffe, Yuhe Ma Ockam #7059 Slam Meghna Chityala, Adam Bournes, Sally Pak, Lara Marinov Apache OpenNLP #559 OP Yuchen Liang, Xavier Xia, Alice Hong, Serena Yao, Peter Lu LangChain #14272 Pitt Begels Ryan Huang, Joyce Huang, Connor Maas, Tyrece Jeffrey, Khuslen Misheel Tandoor Recipes #2793","title":"2023 Fall"},{"location":"hall-of-fame/#2023-spring","text":"Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"2023 Spring"},{"location":"overview/","text":"Questions \u00b6 When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? Why was the Crowdstrike incident so devastating? Who is to blame? How could it have been prevented? How do you get a patch accepted into an open-source project? You can write code. Can you build software? Overview \u00b6 Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project. Previous Course Iterations \u00b6 Fall 2020 | Fall 2021 | Fall 2022 | Spring 2023 | Fall 2023 | Spring 2024 | Fall 2024","title":"Course Overview"},{"location":"overview/#questions","text":"When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? Why was the Crowdstrike incident so devastating? Who is to blame? How could it have been prevented? How do you get a patch accepted into an open-source project? You can write code. Can you build software?","title":"Questions"},{"location":"overview/#overview","text":"Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project.","title":"Overview"},{"location":"overview/#previous-course-iterations","text":"Fall 2020 | Fall 2021 | Fall 2022 | Spring 2023 | Fall 2023 | Spring 2024 | Fall 2024","title":"Previous Course Iterations"},{"location":"syllabus/","text":"Course Syllabus and Policies \u00b6 The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link. Waitlist \u00b6 We anticipate being able to add all students on the waitlist into the course. Prerequisites \u00b6 This class has a pre-requisite of 15-122 or 15-121. If you have not taken those classes, but you think you have similar experiences, please reach out to the instructors. Communication \u00b6 The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time. Teamwork \u00b6 Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues. Textbook \u00b6 Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time . Devices in Lecture and Recitation \u00b6 Research shows that using devices on non-class related activities harms both the device user's learning, and other students' learning as well. Therefore, in general, we do not allow the use of devices during lecture. If you genuinely use your laptop for class-related activities (note-taking, etc), tell us, and we will make an exception. However, we ask that if you do so, you are careful to keep your devices in note-taking mode (and don\u2019t stray to Facebook, homework, etc). In addition, you will be required to sit in the back row of the lecture to minimize the impact your screen has on others. Note that recitation activities will often involve devices, so please do bring your laptop! Assessment \u00b6 Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown (tentative) Project # Days Given Points % of HW grade % of total grade 1 9 100 10% 6% 2 35 275 27.5% 16.5% 3 10 100 10% 6% 4 14 125 12.5% 7.5% 5 27 400 40% 24% TOTAL 1000 100% 60% Regrades \u00b6 Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment. Late Work and Absence Policy \u00b6 Participation \u00b6 Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), you will automatically get full points for up to four missed participation activities to account for any absences. You do not need to email instructors individually for one-off absences of this sort. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis. Projects \u00b6 Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf. Time Management \u00b6 This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you. Writing \u00b6 Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested. Policy on use of Generative AI for Writing \u00b6 You may use generative AI technologies such as ChatGPT or CoPilot for assisting in code development or writing responses to homework questions, unless the question specifically prohibits it . However, any use of AI comes with two caveats: (1) you must clearly indicate the use of such technology (and name the tool) in every homework question or source code file where an AI tool was used as a form of attribution, just as you would if you had taken help from a friend; (2) you are liable for factually inaccurate answers or unspecific rambling produced by AI tools; it is your responsibility to edit AI-produced content before submitting it for class purposes. Professionalism \u00b6 Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, national origin, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.) Academic Honesty and Collaboration \u00b6 The usual policies apply, especially the University Policy on Academic Integrity . Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is an adaption of the policy used in 17-214: \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help.\" If any of your work contains a statement that was was copied verbatim from an external source, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. If you are using a tool to help format or structure text significantly based on content and facts that you provided, you must acknowledge the use of such tools (see policy on generative AI tools above). Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. \"It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations. Accommodations \u00b6 If you wish to request an accommodation due to a documented disability, please contact Disability Resources at 412-268-6121 or access@andrew.cmu.edu . Policy on Healthcare-Related Absence \u00b6 We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and feel free to attend any of the instructors' office hours to catch up on the material. Please see the late-work policy above for how healthcare-related absences are accounted for in participation points. A Note on Self Care \u00b6 Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"Syllabus"},{"location":"syllabus/#course-syllabus-and-policies","text":"The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link.","title":"Course Syllabus and Policies"},{"location":"syllabus/#waitlist","text":"We anticipate being able to add all students on the waitlist into the course.","title":"Waitlist"},{"location":"syllabus/#prerequisites","text":"This class has a pre-requisite of 15-122 or 15-121. If you have not taken those classes, but you think you have similar experiences, please reach out to the instructors.","title":"Prerequisites"},{"location":"syllabus/#communication","text":"The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time.","title":"Communication"},{"location":"syllabus/#teamwork","text":"Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues.","title":"Teamwork"},{"location":"syllabus/#textbook","text":"Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time .","title":"Textbook"},{"location":"syllabus/#devices-in-lecture-and-recitation","text":"Research shows that using devices on non-class related activities harms both the device user's learning, and other students' learning as well. Therefore, in general, we do not allow the use of devices during lecture. If you genuinely use your laptop for class-related activities (note-taking, etc), tell us, and we will make an exception. However, we ask that if you do so, you are careful to keep your devices in note-taking mode (and don\u2019t stray to Facebook, homework, etc). In addition, you will be required to sit in the back row of the lecture to minimize the impact your screen has on others. Note that recitation activities will often involve devices, so please do bring your laptop!","title":"Devices in Lecture and Recitation"},{"location":"syllabus/#assessment","text":"Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown (tentative) Project # Days Given Points % of HW grade % of total grade 1 9 100 10% 6% 2 35 275 27.5% 16.5% 3 10 100 10% 6% 4 14 125 12.5% 7.5% 5 27 400 40% 24% TOTAL 1000 100% 60%","title":"Assessment"},{"location":"syllabus/#regrades","text":"Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment.","title":"Regrades"},{"location":"syllabus/#late-work-and-absence-policy","text":"","title":"Late Work and Absence Policy"},{"location":"syllabus/#participation","text":"Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), you will automatically get full points for up to four missed participation activities to account for any absences. You do not need to email instructors individually for one-off absences of this sort. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis.","title":"Participation"},{"location":"syllabus/#projects","text":"Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf.","title":"Projects"},{"location":"syllabus/#time-management","text":"This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you.","title":"Time Management"},{"location":"syllabus/#writing","text":"Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested.","title":"Writing"},{"location":"syllabus/#policy-on-use-of-generative-ai-for-writing","text":"You may use generative AI technologies such as ChatGPT or CoPilot for assisting in code development or writing responses to homework questions, unless the question specifically prohibits it . However, any use of AI comes with two caveats: (1) you must clearly indicate the use of such technology (and name the tool) in every homework question or source code file where an AI tool was used as a form of attribution, just as you would if you had taken help from a friend; (2) you are liable for factually inaccurate answers or unspecific rambling produced by AI tools; it is your responsibility to edit AI-produced content before submitting it for class purposes.","title":"Policy on use of Generative AI for Writing"},{"location":"syllabus/#professionalism","text":"Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, national origin, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.)","title":"Professionalism"},{"location":"syllabus/#academic-honesty-and-collaboration","text":"The usual policies apply, especially the University Policy on Academic Integrity . Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is an adaption of the policy used in 17-214: \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help.\" If any of your work contains a statement that was was copied verbatim from an external source, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. If you are using a tool to help format or structure text significantly based on content and facts that you provided, you must acknowledge the use of such tools (see policy on generative AI tools above). Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. \"It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations.","title":"Academic Honesty and Collaboration"},{"location":"syllabus/#accommodations","text":"If you wish to request an accommodation due to a documented disability, please contact Disability Resources at 412-268-6121 or access@andrew.cmu.edu .","title":"Accommodations"},{"location":"syllabus/#policy-on-healthcare-related-absence","text":"We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and feel free to attend any of the instructors' office hours to catch up on the material. Please see the late-work policy above for how healthcare-related absences are accounted for in participation points.","title":"Policy on Healthcare-Related Absence"},{"location":"syllabus/#a-note-on-self-care","text":"Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"A Note on Self Care"},{"location":"_old/F24/","text":"17-313 Foundations of Software Engineering \u00b6 This Week \u00b6 Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None! Class Calendar \u00b6 Weekly Schedule \u00b6 Date Lecture Reading Recitation Project Deadline Mon Jan 13 Recitation 1 - Understand NodeBB description Handout Tue Jan 14 Introduction Project 1A - Build Checkpoint Due Fri, Jan 17th @ 11:59pm description Handout Wed Jan 15 Thu Jan 16 Boeing Case Study Boeing Case Study Reading Fri Jan 17 Mon Jan 20 Project 1B - Starter Task Due Thu, Jan 23rd @ 11:59pm description Handout Tue Jan 21 Software Archaeology Wed Jan 22 Thu Jan 23 Measurements and Metrics Fri Jan 24 Project 2A - Team Process & Planning Thursday, January 30th, 11:59pm description Handout Mon Jan 27 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 28 Software Engineering Process Wed Jan 29 Thu Jan 30 Teams and Communication Fri Jan 31 Project 2B - Collaborative Development Tuesday, Feb 11th, 11:59pm description Handout Mon Feb 3 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 4 Introduction to Software Architecture Wed Feb 5 Thu Feb 6 Architecture: Microservices Fri Feb 7 Mon Feb 10 Recitation 4 - Project Presentations slideshow Slides description Handout equalizer Quiz Tue Feb 11 Architecture: Design Docs Wed Feb 12 Project 2C - Collaborative Development Thursday, Feb 27th, 11:59pm description Handout Thu Feb 13 Software Quality Fri Feb 14 Mon Feb 17 Recitation 5 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 18 Risk, CI and Code Review Wed Feb 19 Thu Feb 20 Dynamic Analysis Tools Fri Feb 21 Mon Feb 24 Recitation 6 - Deployment slideshow Slides description Handout equalizer Quiz Tue Feb 25 Deployment Workshop Wed Feb 26 Thu Feb 27 Midterm 1 Fri Feb 28 P3A - Checkpoint Due Thu, March 13th, 11:59pm description Handout Mon Mar 3 Tue Mar 4 Spring Break - No Class Wed Mar 5 Thu Mar 6 Spring Break - No Class Fri Mar 7 Mon Mar 10 Recitation 7 - On Prem Deployment description Handout equalizer Quiz Tue Mar 11 Static Analysis Tools Wed Mar 12 Thu Mar 13 AI/ML/LLM and SE Fri Mar 14 P3B - Final Deliverables Due Thu, March 20th, 11:59pm description Handout Mon Mar 17 Recitation 8 - Large Language Models slideshow Slides description Handout equalizer Quiz Tue Mar 18 Engineering ML Systems Wed Mar 19 Thu Mar 20 Usability Engineering Fri Mar 21 P4A - Checkpoint Due Thursday, March 27th, 11:59pm description Handout Mon Mar 24 Recitation 9 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Mar 25 Ethics Wed Mar 26 Thu Mar 27 Difficult Conversations Fri Mar 28 P4B - Checkpoint Due Sunday, April 6st, 11:59pm description Handout Mon Mar 31 Recitation 10 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Apr 1 AI Coding Activity Wed Apr 2 P4C - Final Deliverables Due Wednesday, April 9th, 11:59pm description Handout Thu Apr 3 Spring Carnival - No Class Fri Apr 4 Mon Apr 7 Recitation 11 - Midterm 2 Review slideshow Slides description Handout equalizer Quiz Tue Apr 8 Reliably Releasing Software Wed Apr 9 Thu Apr 10 Reliably Releasing Software (continued) Fri Apr 11 Mon Apr 14 Recitation 12 - Open Source Project Selection P5A - Project & Tasks Selection Check-In Due Wed, April 16th @ 11:59pm description Handout Tue Apr 15 Open Source Wed Apr 16 P5B and P5C - Open Source Excursion Due Sun, May 4th @ 11:59pm description Handout Thu Apr 17 Midterm 2 Fri Apr 18 Mon Apr 21 Recitation 13 - Open Source Project Presentation slideshow Slides description Handout equalizer Quiz Tue Apr 22 This lecture can save you 12 million dollars Wed Apr 23 Thu Apr 24 Final Thoughts Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 1 Fri May 2 Staff \u00b6 Instructors \u00b6 Michael Hilton mail public Austin Henley mail public Nadia Nahar mail public Teaching Assistants \u00b6 Juan Ageitos mail Sophia Witt mail Yerim Song mail Kareem Segizekov mail Kush Jain mail Yu Fang mail Haomin Ng mail","title":"CMU 17-313: Foundations of Software Engineering"},{"location":"_old/F24/#17-313-foundations-of-software-engineering","text":"","title":"17-313 Foundations of Software Engineering"},{"location":"_old/F24/#this-week","text":"Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None!","title":"This Week"},{"location":"_old/F24/#class-calendar","text":"","title":"Class Calendar"},{"location":"_old/F24/#weekly-schedule","text":"Date Lecture Reading Recitation Project Deadline Mon Jan 13 Recitation 1 - Understand NodeBB description Handout Tue Jan 14 Introduction Project 1A - Build Checkpoint Due Fri, Jan 17th @ 11:59pm description Handout Wed Jan 15 Thu Jan 16 Boeing Case Study Boeing Case Study Reading Fri Jan 17 Mon Jan 20 Project 1B - Starter Task Due Thu, Jan 23rd @ 11:59pm description Handout Tue Jan 21 Software Archaeology Wed Jan 22 Thu Jan 23 Measurements and Metrics Fri Jan 24 Project 2A - Team Process & Planning Thursday, January 30th, 11:59pm description Handout Mon Jan 27 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 28 Software Engineering Process Wed Jan 29 Thu Jan 30 Teams and Communication Fri Jan 31 Project 2B - Collaborative Development Tuesday, Feb 11th, 11:59pm description Handout Mon Feb 3 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 4 Introduction to Software Architecture Wed Feb 5 Thu Feb 6 Architecture: Microservices Fri Feb 7 Mon Feb 10 Recitation 4 - Project Presentations slideshow Slides description Handout equalizer Quiz Tue Feb 11 Architecture: Design Docs Wed Feb 12 Project 2C - Collaborative Development Thursday, Feb 27th, 11:59pm description Handout Thu Feb 13 Software Quality Fri Feb 14 Mon Feb 17 Recitation 5 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 18 Risk, CI and Code Review Wed Feb 19 Thu Feb 20 Dynamic Analysis Tools Fri Feb 21 Mon Feb 24 Recitation 6 - Deployment slideshow Slides description Handout equalizer Quiz Tue Feb 25 Deployment Workshop Wed Feb 26 Thu Feb 27 Midterm 1 Fri Feb 28 P3A - Checkpoint Due Thu, March 13th, 11:59pm description Handout Mon Mar 3 Tue Mar 4 Spring Break - No Class Wed Mar 5 Thu Mar 6 Spring Break - No Class Fri Mar 7 Mon Mar 10 Recitation 7 - On Prem Deployment description Handout equalizer Quiz Tue Mar 11 Static Analysis Tools Wed Mar 12 Thu Mar 13 AI/ML/LLM and SE Fri Mar 14 P3B - Final Deliverables Due Thu, March 20th, 11:59pm description Handout Mon Mar 17 Recitation 8 - Large Language Models slideshow Slides description Handout equalizer Quiz Tue Mar 18 Engineering ML Systems Wed Mar 19 Thu Mar 20 Usability Engineering Fri Mar 21 P4A - Checkpoint Due Thursday, March 27th, 11:59pm description Handout Mon Mar 24 Recitation 9 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Mar 25 Ethics Wed Mar 26 Thu Mar 27 Difficult Conversations Fri Mar 28 P4B - Checkpoint Due Sunday, April 6st, 11:59pm description Handout Mon Mar 31 Recitation 10 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Apr 1 AI Coding Activity Wed Apr 2 P4C - Final Deliverables Due Wednesday, April 9th, 11:59pm description Handout Thu Apr 3 Spring Carnival - No Class Fri Apr 4 Mon Apr 7 Recitation 11 - Midterm 2 Review slideshow Slides description Handout equalizer Quiz Tue Apr 8 Reliably Releasing Software Wed Apr 9 Thu Apr 10 Reliably Releasing Software (continued) Fri Apr 11 Mon Apr 14 Recitation 12 - Open Source Project Selection P5A - Project & Tasks Selection Check-In Due Wed, April 16th @ 11:59pm description Handout Tue Apr 15 Open Source Wed Apr 16 P5B and P5C - Open Source Excursion Due Sun, May 4th @ 11:59pm description Handout Thu Apr 17 Midterm 2 Fri Apr 18 Mon Apr 21 Recitation 13 - Open Source Project Presentation slideshow Slides description Handout equalizer Quiz Tue Apr 22 This lecture can save you 12 million dollars Wed Apr 23 Thu Apr 24 Final Thoughts Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 1 Fri May 2","title":"Weekly Schedule"},{"location":"_old/F24/#staff","text":"","title":"Staff"},{"location":"_old/F24/#instructors","text":"","title":"Instructors"},{"location":"_old/F24/#teaching-assistants","text":"","title":"Teaching Assistants"},{"location":"_old/F24/hall-of-fame/","text":"A list of student groups with links to their merged PRs in open source projects. 2024 Spring \u00b6 Group Name Team Members Project Merged PRs CCC Kevin Ren, Kareem Segizekov, Daniel Chen, Juan Ageitos, Justin Park OpenLibrary #9093 , #9170 Wildcats Tiger Huo, Amanda Zhu, Wen Hu, Cassandra Zhou PyTorch #123581 Capibaras Xinyi Chen, Rebecca (Baijia) Li, Larissa Tyagi, Nicolas Marulanda developerFolio #698 Roger Shreya Choksi, Bryce Zhang, Chenjia Fan, Theo Kroening, Feiyang Xu CounterForMessenger #7 , #56 Cute Capybaras Oliver Zhang, Tishyaa Chaudhry, Parth Rustagi, Alina Fang Presto #22519 Allegra Prina Doshi, Bennett Li, Jason Kwok, Albert Lin SvelteJS #170007 2023 Fall \u00b6 Group Name Team Members Project Merged PRs Softwear Ariel Kwak, Hao Kang, Bojun Li, Sen Feng, Cindy Liu Jupyter Notebook #7178 Bug Busters Ritu Pathak, Mayar Al-Kurdi, Matthew Leboffe, Yuhe Ma Ockam #7059 Slam Meghna Chityala, Adam Bournes, Sally Pak, Lara Marinov Apache OpenNLP #559 OP Yuchen Liang, Xavier Xia, Alice Hong, Serena Yao, Peter Lu LangChain #14272 Pitt Begels Ryan Huang, Joyce Huang, Connor Maas, Tyrece Jeffrey, Khuslen Misheel Tandoor Recipes #2793 2023 Spring \u00b6 Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"Hall of Fame"},{"location":"_old/F24/hall-of-fame/#2024-spring","text":"Group Name Team Members Project Merged PRs CCC Kevin Ren, Kareem Segizekov, Daniel Chen, Juan Ageitos, Justin Park OpenLibrary #9093 , #9170 Wildcats Tiger Huo, Amanda Zhu, Wen Hu, Cassandra Zhou PyTorch #123581 Capibaras Xinyi Chen, Rebecca (Baijia) Li, Larissa Tyagi, Nicolas Marulanda developerFolio #698 Roger Shreya Choksi, Bryce Zhang, Chenjia Fan, Theo Kroening, Feiyang Xu CounterForMessenger #7 , #56 Cute Capybaras Oliver Zhang, Tishyaa Chaudhry, Parth Rustagi, Alina Fang Presto #22519 Allegra Prina Doshi, Bennett Li, Jason Kwok, Albert Lin SvelteJS #170007","title":"2024 Spring"},{"location":"_old/F24/hall-of-fame/#2023-fall","text":"Group Name Team Members Project Merged PRs Softwear Ariel Kwak, Hao Kang, Bojun Li, Sen Feng, Cindy Liu Jupyter Notebook #7178 Bug Busters Ritu Pathak, Mayar Al-Kurdi, Matthew Leboffe, Yuhe Ma Ockam #7059 Slam Meghna Chityala, Adam Bournes, Sally Pak, Lara Marinov Apache OpenNLP #559 OP Yuchen Liang, Xavier Xia, Alice Hong, Serena Yao, Peter Lu LangChain #14272 Pitt Begels Ryan Huang, Joyce Huang, Connor Maas, Tyrece Jeffrey, Khuslen Misheel Tandoor Recipes #2793","title":"2023 Fall"},{"location":"_old/F24/hall-of-fame/#2023-spring","text":"Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"2023 Spring"},{"location":"_old/F24/overview/","text":"Questions \u00b6 When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? Why was the Crowdstrike incident so devastating? Who is to blame? How could it have been prevented? How do you get a patch accepted into an open-source project? You can write code. Can you build software? Overview \u00b6 Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project. Previous Course Iterations \u00b6 Fall 2020 | Fall 2021 | Fall 2022 | Spring 2023 | Fall 2023 | Spring 2024","title":"Course Overview"},{"location":"_old/F24/overview/#questions","text":"When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? Why was the Crowdstrike incident so devastating? Who is to blame? How could it have been prevented? How do you get a patch accepted into an open-source project? You can write code. Can you build software?","title":"Questions"},{"location":"_old/F24/overview/#overview","text":"Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project.","title":"Overview"},{"location":"_old/F24/overview/#previous-course-iterations","text":"Fall 2020 | Fall 2021 | Fall 2022 | Spring 2023 | Fall 2023 | Spring 2024","title":"Previous Course Iterations"},{"location":"_old/F24/syllabus/","text":"Course Syllabus and Policies \u00b6 The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link. Waitlist \u00b6 We anticipate being able to add all students on the waitlist into the course. Prerequisites \u00b6 This class has a pre-requisite of 15-122 or 15-121. If you have not taken those classes, but you think you have similar experiences, please reach out to the instructors. Communication \u00b6 The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time. Teamwork \u00b6 Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues. Textbook \u00b6 Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time . Devices in Lecture and Recitation \u00b6 Research shows that using devices on non-class related activities harms both the device user's learning, and other students' learning as well. Therefore, in general, we do not allow the use of devices during lecture. If you genuinely use your laptop for class-related activities (note-taking, etc), tell us, and we will make an exception. However, we ask that if you do so, you are careful to keep your devices in note-taking mode (and don\u2019t stray to Facebook, homework, etc). In addition, you will be required to sit in the back row of the lecture to minimize the impact your screen has on others. Note that recitation activities will often involve devices, so please do bring your laptop! Assessment \u00b6 Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown (tentative) Project # Days Given Points % of HW grade % of total grade 1 9 100 10% 6% 2 35 275 27.5% 16.5% 3 10 100 10% 6% 4 14 125 12.5% 7.5% 5 27 400 40% 24% TOTAL 1000 100% 60% Regrades \u00b6 Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment. Late Work and Absence Policy \u00b6 Participation \u00b6 Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), you will automatically get full points for up to four missed participation activities to account for any absences. You do not need to email instructors individually for one-off absences of this sort. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis. Projects \u00b6 Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf. Time Management \u00b6 This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you. Writing \u00b6 Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested. Policy on use of Generative AI for Writing \u00b6 You may use generative AI technologies such as ChatGPT or CoPilot for assisting in code development or writing responses to homework questions, unless the question specifically prohibits it . However, any use of AI comes with two caveats: (1) you must clearly indicate the use of such technology (and name the tool) in every homework question or source code file where an AI tool was used as a form of attribution, just as you would if you had taken help from a friend; (2) you are liable for factually inaccurate answers or unspecific rambling produced by AI tools; it is your responsibility to edit AI-produced content before submitting it for class purposes. Professionalism \u00b6 Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, national origin, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.) Academic Honesty and Collaboration \u00b6 The usual policies apply, especially the University Policy on Academic Integrity . Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is an adaption of the policy used in 17-214: \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help.\" If any of your work contains a statement that was was copied verbatim from an external source, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. If you are using a tool to help format or structure text significantly based on content and facts that you provided, you must acknowledge the use of such tools (see policy on generative AI tools above). Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. \"It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations. Accommodations \u00b6 If you wish to request an accommodation due to a documented disability, please contact Disability Resources at 412-268-6121 or access@andrew.cmu.edu . Policy on Healthcare-Related Absence \u00b6 We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and feel free to attend any of the instructors' office hours to catch up on the material. Please see the late-work policy above for how healthcare-related absences are accounted for in participation points. A Note on Self Care \u00b6 Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"Syllabus"},{"location":"_old/F24/syllabus/#course-syllabus-and-policies","text":"The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link.","title":"Course Syllabus and Policies"},{"location":"_old/F24/syllabus/#waitlist","text":"We anticipate being able to add all students on the waitlist into the course.","title":"Waitlist"},{"location":"_old/F24/syllabus/#prerequisites","text":"This class has a pre-requisite of 15-122 or 15-121. If you have not taken those classes, but you think you have similar experiences, please reach out to the instructors.","title":"Prerequisites"},{"location":"_old/F24/syllabus/#communication","text":"The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time.","title":"Communication"},{"location":"_old/F24/syllabus/#teamwork","text":"Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues.","title":"Teamwork"},{"location":"_old/F24/syllabus/#textbook","text":"Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time .","title":"Textbook"},{"location":"_old/F24/syllabus/#devices-in-lecture-and-recitation","text":"Research shows that using devices on non-class related activities harms both the device user's learning, and other students' learning as well. Therefore, in general, we do not allow the use of devices during lecture. If you genuinely use your laptop for class-related activities (note-taking, etc), tell us, and we will make an exception. However, we ask that if you do so, you are careful to keep your devices in note-taking mode (and don\u2019t stray to Facebook, homework, etc). In addition, you will be required to sit in the back row of the lecture to minimize the impact your screen has on others. Note that recitation activities will often involve devices, so please do bring your laptop!","title":"Devices in Lecture and Recitation"},{"location":"_old/F24/syllabus/#assessment","text":"Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown (tentative) Project # Days Given Points % of HW grade % of total grade 1 9 100 10% 6% 2 35 275 27.5% 16.5% 3 10 100 10% 6% 4 14 125 12.5% 7.5% 5 27 400 40% 24% TOTAL 1000 100% 60%","title":"Assessment"},{"location":"_old/F24/syllabus/#regrades","text":"Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment.","title":"Regrades"},{"location":"_old/F24/syllabus/#late-work-and-absence-policy","text":"","title":"Late Work and Absence Policy"},{"location":"_old/F24/syllabus/#participation","text":"Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), you will automatically get full points for up to four missed participation activities to account for any absences. You do not need to email instructors individually for one-off absences of this sort. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis.","title":"Participation"},{"location":"_old/F24/syllabus/#projects","text":"Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf.","title":"Projects"},{"location":"_old/F24/syllabus/#time-management","text":"This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you.","title":"Time Management"},{"location":"_old/F24/syllabus/#writing","text":"Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested.","title":"Writing"},{"location":"_old/F24/syllabus/#policy-on-use-of-generative-ai-for-writing","text":"You may use generative AI technologies such as ChatGPT or CoPilot for assisting in code development or writing responses to homework questions, unless the question specifically prohibits it . However, any use of AI comes with two caveats: (1) you must clearly indicate the use of such technology (and name the tool) in every homework question or source code file where an AI tool was used as a form of attribution, just as you would if you had taken help from a friend; (2) you are liable for factually inaccurate answers or unspecific rambling produced by AI tools; it is your responsibility to edit AI-produced content before submitting it for class purposes.","title":"Policy on use of Generative AI for Writing"},{"location":"_old/F24/syllabus/#professionalism","text":"Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, national origin, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.)","title":"Professionalism"},{"location":"_old/F24/syllabus/#academic-honesty-and-collaboration","text":"The usual policies apply, especially the University Policy on Academic Integrity . Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is an adaption of the policy used in 17-214: \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help.\" If any of your work contains a statement that was was copied verbatim from an external source, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. If you are using a tool to help format or structure text significantly based on content and facts that you provided, you must acknowledge the use of such tools (see policy on generative AI tools above). Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. \"It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations.","title":"Academic Honesty and Collaboration"},{"location":"_old/F24/syllabus/#accommodations","text":"If you wish to request an accommodation due to a documented disability, please contact Disability Resources at 412-268-6121 or access@andrew.cmu.edu .","title":"Accommodations"},{"location":"_old/F24/syllabus/#policy-on-healthcare-related-absence","text":"We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and feel free to attend any of the instructors' office hours to catch up on the material. Please see the late-work policy above for how healthcare-related absences are accounted for in participation points.","title":"Policy on Healthcare-Related Absence"},{"location":"_old/F24/syllabus/#a-note-on-self-care","text":"Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"A Note on Self Care"},{"location":"_old/F24/projects/","text":"Coming soon!","title":"Homework"},{"location":"_old/F24/projects/P1/","text":"Project 1: Hello, NodeBB! \u00b6 Learning Goals \u00b6 Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase Project Context \u00b6 Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project. Deliverables and Deadlines \u00b6 This is an individual assignment . There are four (4) deliverables and two (2) deadlines for this homework. A) Build Checkpoint - 5 points - due Friday, August 30th, 11:59pm B) Starter Task - 95 points - due Thursday, September 5th, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Project 1: Hello, NodeBB!"},{"location":"_old/F24/projects/P1/#project-1-hello-nodebb","text":"","title":"Project 1: Hello, NodeBB!"},{"location":"_old/F24/projects/P1/#learning-goals","text":"Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase","title":"Learning Goals"},{"location":"_old/F24/projects/P1/#project-context","text":"Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project.","title":"Project Context"},{"location":"_old/F24/projects/P1/#deliverables-and-deadlines","text":"This is an individual assignment . There are four (4) deliverables and two (2) deadlines for this homework. A) Build Checkpoint - 5 points - due Friday, August 30th, 11:59pm B) Starter Task - 95 points - due Thursday, September 5th, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Deliverables and Deadlines"},{"location":"_old/F24/projects/P1/1_checkpoint/","text":"Project 1A: Build Checkpoint \u00b6 Deliverables \u00b6 Build Checkpoint \u2013 5 points \u2013 due Friday, August 30th, 11:59pm Getting Started \u00b6 Repository Setup \u00b6 Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer. Lint and Test \u00b6 When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! You can run the linter and test suite using the following two commands: npm run lint npm run test The first time you run the above commands, you may have to run npm install to fetch dependencies and also edit your config.json file to add test dependencies. See the FAQ page for more. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code. Build Checkpoint (5 pts) \u00b6 Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope . Grading \u00b6 To receive full credit for this checkpoint, we expect: A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser","title":"Project 1A: Build Checkpoint"},{"location":"_old/F24/projects/P1/1_checkpoint/#project-1a-build-checkpoint","text":"","title":"Project 1A: Build Checkpoint"},{"location":"_old/F24/projects/P1/1_checkpoint/#deliverables","text":"Build Checkpoint \u2013 5 points \u2013 due Friday, August 30th, 11:59pm","title":"Deliverables"},{"location":"_old/F24/projects/P1/1_checkpoint/#getting-started","text":"","title":"Getting Started"},{"location":"_old/F24/projects/P1/1_checkpoint/#repository-setup","text":"Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer.","title":"Repository Setup"},{"location":"_old/F24/projects/P1/1_checkpoint/#lint-and-test","text":"When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! You can run the linter and test suite using the following two commands: npm run lint npm run test The first time you run the above commands, you may have to run npm install to fetch dependencies and also edit your config.json file to add test dependencies. See the FAQ page for more. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code.","title":"Lint and Test"},{"location":"_old/F24/projects/P1/1_checkpoint/#build-checkpoint-5-pts","text":"Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope .","title":"Build Checkpoint (5 pts)"},{"location":"_old/F24/projects/P1/1_checkpoint/#grading","text":"To receive full credit for this checkpoint, we expect: A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser","title":"Grading"},{"location":"_old/F24/projects/P1/2_refactoring/","text":"Project 1B: Starter Task \u00b6 Deliverables \u00b6 Starter Task - 95 points - due Thursday, September 5th, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts) Onboarding \u00b6 Now that you have explored the repository, the development team would like to give you an onboarding assignment. The team has noticed an accumulation of warnings in SonarCloud , a continuous code quality inspection tool. Your task is to remove SonarCloud warnings by refactoring code and validating that your change takes effect within the NodeBB codebase. Prerequisites \u00b6 Onboarding Materials \u00b6 Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors. Git & GitHub \u00b6 In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete Recitation 2 - Git, GitHub, as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed. GitHub Issue (20 pts) \u00b6 First, choose a single file that has SonarCloud warning(s) and open a github issue in the class repository to declare which file and SonarCloud warning(s) that you will be working on. For the task, the file must Be a Javascript file. Be in the src/ folder. Be a file that no one else in the class has picked and created an issue for. We expect you to look through existing open issues, if any, to avoid such duplication; thus, there is an incentive for you to start early! If you really can't find a unique file because you are late to the game, then you may pick a file that has an open issue, but then identify a separate SonarCloud warning in the same file. You can reference the other issue in your description to distinguish yourself (e.g., \"this is different from #123 because...\"). The SonarCloud warning must be categorized under the Adaptability section and contain the \"Refactor\" key word. The goal of this task is to refactor code in the NodeBB codebase based on the specifications of the SonarCloud warning. Title the task appropriately, such as Refactoring code in <file name> , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Additionally, within the issue description, be sure to include an explanation of the SonarCloud warnings that you are working on. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more. Task (10 pts) \u00b6 For this task, you will focus on refactoring the code and removing all the corresponding SonarCloud warning(s) from your chosen file. As part of the task, you would also need to validate your changes for one SonarCloud warning utilizing code coverage and running a NodeBB instance. Back in your own fork, create a feature branch and implement the changes needed to address the SonarCloud warnings. You should start with the following steps: Review the SonarCloud warnings for the file. Identify the necessary code changes to address each warning. Implement the changes and ensure that they do not introduce new warnings or issues. Run the linter and test suite to ensure your changes pass all checks. You can check that your refactored code removes the warning by following the SonarCloud links automatically generated in the PR after the checks are run. You could also go to SonarCloud's Pull Request list and search for your PR there. For the validation part of the task, you only need to validate the refactored code you have worked on for one SonarCloud warning in the file you chose. You should examine the code coverage report (either the local HTML report or the online one generated by CoverAlls when you make a pull request) to ensure that the refactored code are included in the test coverage. If not, continue with the following steps: Locate the tests that are currently covering that file. Write tests that will add coverage to the refactored code you've written. All new tests added by you must pass. The tests that you write should be similar to the existing tests (e.g., do not introduce a new testing framework). We also want you to manually test your changes in a running NodeBB instance. The purpose is to trigger the refactored code's execution from the user interface (UI) with the following steps: Within your implementation, add a print statement (e.g. console.log(YOUR_NAME)) immediately before, after, or in the middle of your refactored code. Restart the NodeBB instance and watch its logs via ./nodebb log . Perform any necessary UI operations that execute the refactored code (e.g. clicking buttons for an action) Take a screenshot of these logs to include within your report with an explanation of the steps taken to trigger the code. GitHub Pull Request (25 pts) \u00b6 As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. You should ensure that all checks including SonarCloud Quality Gate as well as Lint & Test are green. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705 Written Assignment (40 pts) \u00b6 After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope. Grading \u00b6 To receive full credit for this project, we expect: A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB","title":"Project 1B: Starter Task"},{"location":"_old/F24/projects/P1/2_refactoring/#project-1b-starter-task","text":"","title":"Project 1B: Starter Task"},{"location":"_old/F24/projects/P1/2_refactoring/#deliverables","text":"Starter Task - 95 points - due Thursday, September 5th, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Deliverables"},{"location":"_old/F24/projects/P1/2_refactoring/#onboarding","text":"Now that you have explored the repository, the development team would like to give you an onboarding assignment. The team has noticed an accumulation of warnings in SonarCloud , a continuous code quality inspection tool. Your task is to remove SonarCloud warnings by refactoring code and validating that your change takes effect within the NodeBB codebase.","title":"Onboarding"},{"location":"_old/F24/projects/P1/2_refactoring/#prerequisites","text":"","title":"Prerequisites"},{"location":"_old/F24/projects/P1/2_refactoring/#onboarding-materials","text":"Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors.","title":"Onboarding Materials"},{"location":"_old/F24/projects/P1/2_refactoring/#git-github","text":"In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete Recitation 2 - Git, GitHub, as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed.","title":"Git &amp; GitHub"},{"location":"_old/F24/projects/P1/2_refactoring/#github-issue-20-pts","text":"First, choose a single file that has SonarCloud warning(s) and open a github issue in the class repository to declare which file and SonarCloud warning(s) that you will be working on. For the task, the file must Be a Javascript file. Be in the src/ folder. Be a file that no one else in the class has picked and created an issue for. We expect you to look through existing open issues, if any, to avoid such duplication; thus, there is an incentive for you to start early! If you really can't find a unique file because you are late to the game, then you may pick a file that has an open issue, but then identify a separate SonarCloud warning in the same file. You can reference the other issue in your description to distinguish yourself (e.g., \"this is different from #123 because...\"). The SonarCloud warning must be categorized under the Adaptability section and contain the \"Refactor\" key word. The goal of this task is to refactor code in the NodeBB codebase based on the specifications of the SonarCloud warning. Title the task appropriately, such as Refactoring code in <file name> , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Additionally, within the issue description, be sure to include an explanation of the SonarCloud warnings that you are working on. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more.","title":"GitHub Issue (20 pts)"},{"location":"_old/F24/projects/P1/2_refactoring/#task-10-pts","text":"For this task, you will focus on refactoring the code and removing all the corresponding SonarCloud warning(s) from your chosen file. As part of the task, you would also need to validate your changes for one SonarCloud warning utilizing code coverage and running a NodeBB instance. Back in your own fork, create a feature branch and implement the changes needed to address the SonarCloud warnings. You should start with the following steps: Review the SonarCloud warnings for the file. Identify the necessary code changes to address each warning. Implement the changes and ensure that they do not introduce new warnings or issues. Run the linter and test suite to ensure your changes pass all checks. You can check that your refactored code removes the warning by following the SonarCloud links automatically generated in the PR after the checks are run. You could also go to SonarCloud's Pull Request list and search for your PR there. For the validation part of the task, you only need to validate the refactored code you have worked on for one SonarCloud warning in the file you chose. You should examine the code coverage report (either the local HTML report or the online one generated by CoverAlls when you make a pull request) to ensure that the refactored code are included in the test coverage. If not, continue with the following steps: Locate the tests that are currently covering that file. Write tests that will add coverage to the refactored code you've written. All new tests added by you must pass. The tests that you write should be similar to the existing tests (e.g., do not introduce a new testing framework). We also want you to manually test your changes in a running NodeBB instance. The purpose is to trigger the refactored code's execution from the user interface (UI) with the following steps: Within your implementation, add a print statement (e.g. console.log(YOUR_NAME)) immediately before, after, or in the middle of your refactored code. Restart the NodeBB instance and watch its logs via ./nodebb log . Perform any necessary UI operations that execute the refactored code (e.g. clicking buttons for an action) Take a screenshot of these logs to include within your report with an explanation of the steps taken to trigger the code.","title":"Task (10 pts)"},{"location":"_old/F24/projects/P1/2_refactoring/#github-pull-request-25-pts","text":"As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. You should ensure that all checks including SonarCloud Quality Gate as well as Lint & Test are green. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705","title":"GitHub Pull Request (25 pts)"},{"location":"_old/F24/projects/P1/2_refactoring/#written-assignment-40-pts","text":"After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope.","title":"Written Assignment (40 pts)"},{"location":"_old/F24/projects/P1/2_refactoring/#grading","text":"To receive full credit for this project, we expect: A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB","title":"Grading"},{"location":"_old/F24/projects/P1/documentation/","text":"Resources & Documentation \u00b6 Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours. Git & GitHub Documentation \u00b6 Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project. NodeBB Documentation \u00b6 The official NodeBB documentation is available at https://docs.nodebb.org. The CMU-313 snapshot is a fork of v3.8.4. When developing with NodeBB, the following documentation about internal REST API endpoints might be helpful: Read API Write API If you want to run HTTP requests to interact with the REST API of a running NodeBB instance (e.g., on localhost ), then you can use the curl tool to issue HTTP requests via the command-line. Tutorial on using curl for testing a REST API","title":"Resources & Documentation"},{"location":"_old/F24/projects/P1/documentation/#resources-documentation","text":"Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours.","title":"Resources &amp; Documentation"},{"location":"_old/F24/projects/P1/documentation/#git-github-documentation","text":"Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project.","title":"Git &amp; GitHub Documentation"},{"location":"_old/F24/projects/P1/documentation/#nodebb-documentation","text":"The official NodeBB documentation is available at https://docs.nodebb.org. The CMU-313 snapshot is a fork of v3.8.4. When developing with NodeBB, the following documentation about internal REST API endpoints might be helpful: Read API Write API If you want to run HTTP requests to interact with the REST API of a running NodeBB instance (e.g., on localhost ), then you can use the curl tool to issue HTTP requests via the command-line. Tutorial on using curl for testing a REST API","title":"NodeBB Documentation"},{"location":"_old/F24/projects/P1/faq/","text":"Frequently Asked Questions \u00b6 This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released! Installation and Running the Instance \u00b6 I'm running into errors about missing files when running ./nodebb start ! \u00b6 Try re-building some of the assets by running ./nodebb build first, then try running the start command again. I can't start a NodeBB instance and I get an error message saying that port 4567 is already in use. \u00b6 Maybe you have another NodeBB instance already running. Try stopping it via ./nodebb stop . Otherwise, try using a differnt port. Analysis Tools \u00b6 I can't run the test or lint commands because I have missing dependencies. \u00b6 Run npm install after ./nodebb setup to make sure you have all the dependencies needed for running tests. Running the test suite stops immediately and throws a bunch of errors! \u00b6 This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file under the \"test_database\" field. For redis: if you are using database 0 for running the local instance, you can use database 1 for testing so that the test data remains separate. Reset \u00b6 How do I reset my NodeBB configurations? \u00b6 Delete the config.json file and re-run the ./nodebb setup command. How do I reset my NodeBB database? \u00b6 Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"Frequently Asked Questions"},{"location":"_old/F24/projects/P1/faq/#frequently-asked-questions","text":"This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released!","title":"Frequently Asked Questions"},{"location":"_old/F24/projects/P1/faq/#installation-and-running-the-instance","text":"","title":"Installation and Running the Instance"},{"location":"_old/F24/projects/P1/faq/#im-running-into-errors-about-missing-files-when-running-nodebb-start","text":"Try re-building some of the assets by running ./nodebb build first, then try running the start command again.","title":"I'm running into errors about missing files when running ./nodebb start!"},{"location":"_old/F24/projects/P1/faq/#i-cant-start-a-nodebb-instance-and-i-get-an-error-message-saying-that-port-4567-is-already-in-use","text":"Maybe you have another NodeBB instance already running. Try stopping it via ./nodebb stop . Otherwise, try using a differnt port.","title":"I can't start a NodeBB instance and I get an error message saying that port 4567 is already in use."},{"location":"_old/F24/projects/P1/faq/#analysis-tools","text":"","title":"Analysis Tools"},{"location":"_old/F24/projects/P1/faq/#i-cant-run-the-test-or-lint-commands-because-i-have-missing-dependencies","text":"Run npm install after ./nodebb setup to make sure you have all the dependencies needed for running tests.","title":"I can't run the test or lint commands because I have missing dependencies."},{"location":"_old/F24/projects/P1/faq/#running-the-test-suite-stops-immediately-and-throws-a-bunch-of-errors","text":"This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file under the \"test_database\" field. For redis: if you are using database 0 for running the local instance, you can use database 1 for testing so that the test data remains separate.","title":"Running the test suite stops immediately and throws a bunch of errors!"},{"location":"_old/F24/projects/P1/faq/#reset","text":"","title":"Reset"},{"location":"_old/F24/projects/P1/faq/#how-do-i-reset-my-nodebb-configurations","text":"Delete the config.json file and re-run the ./nodebb setup command.","title":"How do I reset my NodeBB configurations?"},{"location":"_old/F24/projects/P1/faq/#how-do-i-reset-my-nodebb-database","text":"Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"How do I reset my NodeBB database?"},{"location":"_old/F24/projects/P1/github/","text":"GitHub Exercise \u00b6 Overview \u00b6 The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning. Prerequisites \u00b6 You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics Forking a Repository \u00b6 Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine. Running a GitHub Action Workflow \u00b6 On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product. Setting up a Project Board \u00b6 Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository. Creating Issues \u00b6 Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects! Branching, Committing, and Pushing \u00b6 On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name> Writing Pull Requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes. Check GitHub Actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"GitHub Exercise"},{"location":"_old/F24/projects/P1/github/#github-exercise","text":"","title":"GitHub Exercise"},{"location":"_old/F24/projects/P1/github/#overview","text":"The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning.","title":"Overview"},{"location":"_old/F24/projects/P1/github/#prerequisites","text":"You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics","title":"Prerequisites"},{"location":"_old/F24/projects/P1/github/#forking-a-repository","text":"Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine.","title":"Forking a Repository"},{"location":"_old/F24/projects/P1/github/#running-a-github-action-workflow","text":"On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product.","title":"Running a GitHub Action Workflow"},{"location":"_old/F24/projects/P1/github/#setting-up-a-project-board","text":"Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository.","title":"Setting up a Project Board"},{"location":"_old/F24/projects/P1/github/#creating-issues","text":"Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects!","title":"Creating Issues"},{"location":"_old/F24/projects/P1/github/#branching-committing-and-pushing","text":"On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name>","title":"Branching, Committing, and Pushing"},{"location":"_old/F24/projects/P1/github/#writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes.","title":"Writing Pull Requests"},{"location":"_old/F24/projects/P1/github/#check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"Check GitHub Actions"},{"location":"_old/F24/projects/P1/installation/mac/","text":"Installing NodeBB on MacOS \u00b6 Required Software \u00b6 First, install the following programs: http://nodejs.org/ http://brew.sh/ Installing Redis \u00b6 Install redis with homebrew: % brew install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB on MacOS"},{"location":"_old/F24/projects/P1/installation/mac/#installing-nodebb-on-macos","text":"","title":"Installing NodeBB on MacOS"},{"location":"_old/F24/projects/P1/installation/mac/#required-software","text":"First, install the following programs: http://nodejs.org/ http://brew.sh/","title":"Required Software"},{"location":"_old/F24/projects/P1/installation/mac/#installing-redis","text":"Install redis with homebrew: % brew install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"_old/F24/projects/P1/installation/mac/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"_old/F24/projects/P1/installation/ubuntu/","text":"Installing on Ubuntu \u00b6 Required Software \u00b6 Installing Node.js \u00b6 Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs npm Verify installation of Node.js and npm by checking their installed versions. % node -v # ideally v18.x or v20.x % npm -v # ideally 9.x or above Installing Redis \u00b6 The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing on Ubuntu"},{"location":"_old/F24/projects/P1/installation/ubuntu/#installing-on-ubuntu","text":"","title":"Installing on Ubuntu"},{"location":"_old/F24/projects/P1/installation/ubuntu/#required-software","text":"","title":"Required Software"},{"location":"_old/F24/projects/P1/installation/ubuntu/#installing-nodejs","text":"Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs npm Verify installation of Node.js and npm by checking their installed versions. % node -v # ideally v18.x or v20.x % npm -v # ideally 9.x or above","title":"Installing Node.js"},{"location":"_old/F24/projects/P1/installation/ubuntu/#installing-redis","text":"The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"_old/F24/projects/P1/installation/ubuntu/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"_old/F24/projects/P1/installation/windows/","text":"Installing NodeBB on Windows \u00b6 17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation . Installing WSL2 on Windows \u00b6 Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation. Installing NodeBB \u00b6 If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Installing NodeBB on Windows"},{"location":"_old/F24/projects/P1/installation/windows/#installing-nodebb-on-windows","text":"17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation .","title":"Installing NodeBB on Windows"},{"location":"_old/F24/projects/P1/installation/windows/#installing-wsl2-on-windows","text":"Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation.","title":"Installing WSL2 on Windows"},{"location":"_old/F24/projects/P1/installation/windows/#installing-nodebb","text":"If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Installing NodeBB"},{"location":"_old/F24/projects/P2/","text":"Project 2: Collaborative Development \u00b6 Learning Goals \u00b6 Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams Project Context \u00b6 CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation. Deliverables and Deadlines \u00b6 This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Fall Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 70 points \u2013 due Thursday, September 12th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) B) First Sprint \u2013 95 points \u2013 due Tuesday, September 24th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday Feburary 12th C) Second Sprint \u2013 110 points \u2013 due Thursday, October 10th, 11:59pm Process & Implementation Final Snapshot (50 pts) Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Project 2: Collaborative Development"},{"location":"_old/F24/projects/P2/#project-2-collaborative-development","text":"","title":"Project 2: Collaborative Development"},{"location":"_old/F24/projects/P2/#learning-goals","text":"Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams","title":"Learning Goals"},{"location":"_old/F24/projects/P2/#project-context","text":"CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation.","title":"Project Context"},{"location":"_old/F24/projects/P2/#deliverables-and-deadlines","text":"This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Fall Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 70 points \u2013 due Thursday, September 12th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) B) First Sprint \u2013 95 points \u2013 due Tuesday, September 24th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday Feburary 12th C) Second Sprint \u2013 110 points \u2013 due Thursday, October 10th, 11:59pm Process & Implementation Final Snapshot (50 pts) Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Deliverables and Deadlines"},{"location":"_old/F24/projects/P2/1_teamprocess/","text":"Project 2A: Collaborative Development \u00b6 Deliverables \u00b6 Team Process & Planning \u2013 70 points \u2013 due Thursday, September 12th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) Team Setup \u00b6 Slack Channel \u00b6 On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester. GitHub Repository \u00b6 You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/ithVU1OO Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the note below). Setting up a Project Kanban Board and Creating Issues Project boards are a great way to track development. While there are lots of great external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. To create a Project Kanban follow the steps below: Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have a teammate create an issue for adding team member names to the README Assign yourself to the issue, and add the issues to the project Kanban board you just created under the \"Todo\" column using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your team or make it public so they have access to it. You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope. Teamwork Self-Assessment \u00b6 As the course moves into team-based projects, we will be releasing weekly self-assessments, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, September 13th and due the following Friday, September 20th (both at 11:59pm). Main Deliverables \u00b6 Teamwork Contract (35 pts) \u00b6 When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel. Project Planning (35 pts) \u00b6 Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below. Functional Requirements - User Stories \u00b6 During this meeting, discuss potential functional requirements of this project. Consider what possible use cases may be for this system and what features it should have to fulfill those needs. Then, document these functional requirements in the form of user stories that follow the guidelines discussed in lecture. All of your user stories should be in the format of \"As a [role], I want [function], so that [value]\". You should come up with at least two user stories per student in your group. Formulating User Stories Consider what are the different types of users that will be interacting with your system (your stakeholders) and what features they would want to have that the current NodeBB does not provide. You may want to reference features in existing Q&A systems (e.g. Piazza, Diderot) that may be desirable, or conduct interviews with your peers who could be a potential users of this system. As a team, you should then come up with a prioritization ranking for each user story. The prioritization should be based on two factors Impact : how essential is this user story to the overall functionality of the application to your stakeholders, how beneficial it would be to your stakeholders, and Effort : how much time/effort is required to implement this user story Once you have your list of user stories, create a new GitHub Project board (click into Projects on your team repository). Then create two new columns to the left called \"User Stories\" and \"Backlog\" . At this point in time, you should have \"User Stories\", \"Backlog\", \"To-Do\", \"In Progress\" and \"Done\" , in that order from left to right. Feel free to add more columns if your teams decide that you need them during your development process Add your user stories into the \"User Stories\" column using the \u201c+ Add item\u201d button at the bottom, create draft issues for each of your user stories.In the body of each of these draft issues, provide a brief but concrete justification of its prioritization ranking that your team decided on. You should order all the user stories in this column from highest to lowest priority. Technical Requirements - Issues \u00b6 Now that you have your prioritized list, consider the technical requirements of the various user stories and collectively decide on which one(s) you will be focusing on over the next two sprints. In this project (as like most projects), your team is aiming to maximize the amount of value you are delivering to your stakeholders given your constraints. Your selected user stories should have relatively high priority based on your team's ranking, and you should actively take factors into consideration that may impact your development. Selecting Appropriate User Stories Given the amount of variations in each team's user stories, it's hard to give concrete guideline on the number of user stories that a team needs to tackle. Teams could tackle 1 user story that requires major effort, or a few user stories that each requires lesser effort. In general, we are expecting that user stories be selected given: 2 sprints of 2 weeks each number of team members on your team assumption of 8 hours/week available per individual The course staff is happy to discuss this with your team during OH and we highly recommend you do so if your team is unsure. We will also be providing you with feedback during your first sprint's checkpoint presentation . The feature(s) you plan to implement should not be purely cosmetic or arbitrary. We expect this to be a non-issue as most high priority features to make NodeBB usable in a course environment would require changes that span across the development stack. Note An example of what would not be accepted is a cosmetic feature that only modifies a frontend UI component (i.e. changing the color of the navbar), or just the renaming of a field in the database. You may want to look ahead into parts 2B and 2C to check our specific requirements for your implementation. Convert the feature(s) you decide to implement into technical requirements (i.e. what needs to be developed for this feature to work). Then, break these requirements down into manageable, assignable issues and document them on your Project board by adding them to \u201cBacklog\u201d column. At minimum, these issues should make use of GitHub features like milestones/labels/descriptions to denote: Estimated effort for each task Dependencies among tasks (if any) Initial assignments for team members Milestones to indicate which sprint the issue should be completed in (Sprint 1, Sprint 2, Stretch) Acceptance criteria that describes how you know this task is done - think about how you will test this feature You should actively assign and move these issues across your Kanban board as your team makes progress. A Note on Grading We will not assess how accurately you predicted your development process, nor will we be giving points based on the complexity or quality of your changes. The focus of our evaluations will be on how you decompose the problem, how you respond to unexpected circumstances, and how you analyze and reflect on your experience later on. We will check your development progress at the end of each sprint. Please be proactive in your planning to ensure that you make notable progress in both of your sprints. We highly recommend reading ahead on what our expectations are for the end of each sprint as you plan your milestone goals. Include a link to your GitHub board in your Gradescope submission. If you are unsure about your planned changes, you can ask for feedback from a member of the course staff! Extra Credit (7 pts) \u00b6 Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester! Grading \u00b6 To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"Project 2A: Collaborative Development"},{"location":"_old/F24/projects/P2/1_teamprocess/#project-2a-collaborative-development","text":"","title":"Project 2A: Collaborative Development"},{"location":"_old/F24/projects/P2/1_teamprocess/#deliverables","text":"Team Process & Planning \u2013 70 points \u2013 due Thursday, September 12th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts)","title":"Deliverables"},{"location":"_old/F24/projects/P2/1_teamprocess/#team-setup","text":"","title":"Team Setup"},{"location":"_old/F24/projects/P2/1_teamprocess/#slack-channel","text":"On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester.","title":"Slack Channel"},{"location":"_old/F24/projects/P2/1_teamprocess/#github-repository","text":"You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/ithVU1OO Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the note below). Setting up a Project Kanban Board and Creating Issues Project boards are a great way to track development. While there are lots of great external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. To create a Project Kanban follow the steps below: Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have a teammate create an issue for adding team member names to the README Assign yourself to the issue, and add the issues to the project Kanban board you just created under the \"Todo\" column using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your team or make it public so they have access to it. You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope.","title":"GitHub Repository"},{"location":"_old/F24/projects/P2/1_teamprocess/#teamwork-self-assessment","text":"As the course moves into team-based projects, we will be releasing weekly self-assessments, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, September 13th and due the following Friday, September 20th (both at 11:59pm).","title":"Teamwork Self-Assessment"},{"location":"_old/F24/projects/P2/1_teamprocess/#main-deliverables","text":"","title":"Main Deliverables"},{"location":"_old/F24/projects/P2/1_teamprocess/#teamwork-contract-35-pts","text":"When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel.","title":"Teamwork Contract (35 pts)"},{"location":"_old/F24/projects/P2/1_teamprocess/#project-planning-35-pts","text":"Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below.","title":"Project Planning (35 pts)"},{"location":"_old/F24/projects/P2/1_teamprocess/#extra-credit-7-pts","text":"Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester!","title":"Extra Credit (7 pts)"},{"location":"_old/F24/projects/P2/1_teamprocess/#grading","text":"To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"Grading"},{"location":"_old/F24/projects/P2/2_firstsprint/","text":"Project 2B: Collaborative Development \u00b6 Deliverables \u00b6 First Sprint \u2013 95 points \u2013 due Tuesday, September 24th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday September 23rd Process & Implementation Interim (50 pts) \u00b6 Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Checkpoint Presentation (45 pts) \u00b6 During the Week 5 recitation slot ( Monday September 23rd ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline. Grading \u00b6 To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback Resources & Documentation \u00b6 NodeBB Development \u00b6 We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"Project 2B: Collaborative Development"},{"location":"_old/F24/projects/P2/2_firstsprint/#project-2b-collaborative-development","text":"","title":"Project 2B: Collaborative Development"},{"location":"_old/F24/projects/P2/2_firstsprint/#deliverables","text":"First Sprint \u2013 95 points \u2013 due Tuesday, September 24th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday September 23rd","title":"Deliverables"},{"location":"_old/F24/projects/P2/2_firstsprint/#process-implementation-interim-50-pts","text":"Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process &amp; Implementation Interim (50 pts)"},{"location":"_old/F24/projects/P2/2_firstsprint/#checkpoint-presentation-45-pts","text":"During the Week 5 recitation slot ( Monday September 23rd ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline.","title":"Checkpoint Presentation (45 pts)"},{"location":"_old/F24/projects/P2/2_firstsprint/#grading","text":"To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback","title":"Grading"},{"location":"_old/F24/projects/P2/2_firstsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"_old/F24/projects/P2/2_firstsprint/#nodebb-development","text":"We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"NodeBB Development"},{"location":"_old/F24/projects/P2/3_secondsprint/","text":"Project 2C: Collaborative Development \u00b6 Deliverables \u00b6 Second Sprint \u2013 110 points \u2013 due Thursday, October 10th, 11:59pm Process & Implementation Final Snapshot (50 pts) Process & Team Reflection (30 pts) Individual Reflection (30 pts) Process & Implementation Final (50 pts) \u00b6 Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Process & Team Reflection (30 pts) \u00b6 Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims. Individual Reflection (30 pts) \u00b6 Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection. Grading \u00b6 To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence Resources & Documentation \u00b6 NodeBB Development \u00b6 By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"Project 2C: Collaborative Development"},{"location":"_old/F24/projects/P2/3_secondsprint/#project-2c-collaborative-development","text":"","title":"Project 2C: Collaborative Development"},{"location":"_old/F24/projects/P2/3_secondsprint/#deliverables","text":"Second Sprint \u2013 110 points \u2013 due Thursday, October 10th, 11:59pm Process & Implementation Final Snapshot (50 pts) Process & Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Deliverables"},{"location":"_old/F24/projects/P2/3_secondsprint/#process-implementation-final-50-pts","text":"Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process &amp; Implementation Final (50 pts)"},{"location":"_old/F24/projects/P2/3_secondsprint/#process-team-reflection-30-pts","text":"Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims.","title":"Process &amp; Team Reflection (30 pts)"},{"location":"_old/F24/projects/P2/3_secondsprint/#individual-reflection-30-pts","text":"Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection.","title":"Individual Reflection (30 pts)"},{"location":"_old/F24/projects/P2/3_secondsprint/#grading","text":"To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence","title":"Grading"},{"location":"_old/F24/projects/P2/3_secondsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"_old/F24/projects/P2/3_secondsprint/#nodebb-development","text":"By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"NodeBB Development"},{"location":"_old/F24/projects/P3/","text":"Project 3: Continuous Integration + Deployment \u00b6 Learning Goals \u00b6 Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice Project Context \u00b6 Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process. Deliverables and Deadlines \u00b6 There are two (2) deadlines for this project. This project is worth a total of 100 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, October 24th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 65 points \u2013 due Thursday, October 31st, 11:59pm Tool Analysis Design Doc (50 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, November 7th, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the Site Reliability Engineer(SRE) for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration. Checkpoint Deliverables \u00b6 Deployed Application (25 pts) \u00b6 Your team will be using Azure for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit. Tools Checkpoint (10 pts) \u00b6 Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools Final Deliverables \u00b6 Tool Analysis Design Doc (50 pts) \u00b6 Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections. Tool Evaluations (~N pages) \u00b6 For each of the N-1 tools explored by your team, you must provide: Name and high-level description of what the tool does and a link to its documentation/source Whether the tool is used for static or dynamic analysis A link to the pull request made from the testing branch for this tool A pro/con analysis of the tool and appropriate evidence in the form of screenshots to support your claims. You can use the questions provided in the research you did for the checkpoint to shape your analysis. Each of these sections should take up approximately 1 page (including screenshots) and no more than 2 pages. Justification (~Half a page) \u00b6 After going through each of the tools, you should explicitly state the tool(s) you are choosing to integrate for this project and provide a justification for why you are selecting this tool. You should refer to the pro/con analysis done in the prior sections and how they align with the goals of your team and the project overall. You must recommend at least one tool , even if it\u2019s with reservations. Integration (<1 page) \u00b6 This section should address the different factors to take into consideration when integrating a new tool. At minimum, you should address the following: Technical Questions How are you integrating the tool (high-level)? At what point in the development/deployment process shall it be integrated? What sorts of customization or configuration will you be using? If you added any specific configuration to allow the main branch of your repository to pass its status checks, add the justification for those decisions in this section. Social Integration Questions How do you foresee the team using the tool during their development process? Consider the incentives & deterrents to the developers when it comes to using the tool, and their personal motivation to use it. Your answers should be based on your experiences running the tools on your team repository and be grounded in data from your research on different factors such as tool usability, output, and customizability. Keep this section updated as you work on implementing the integration. Conclusion (<1 page) \u00b6 In this section, provide a brief summary of your findings along with items that were not addressed in the previous sections. Are there any open questions? Are there any issues you consider to be out of scope? What drawbacks of the proposed process/tooling are you accepting for some (good) reason? This section should be used to wrap everything up and ensure you have a good/complete design document! Submit the Design Document as a single PDF to Gradescope. Tool Integration (15 pts) \u00b6 Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have *not* completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs. Extra Credit \u00b6 Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project. Feature Review (6 pts) \u00b6 For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing. Grading \u00b6 To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described. Resources & Documentation \u00b6 Starter List of Tools \u00b6 NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find! Static Tools \u00b6 flow : Static type checker for JavaScript JScent : Program analyzer for detecting \u201ccode smells\u201d JSHint : Used to flag suspicious usage in JavaScript programs StandardJS / ts-standard : Static analysis tool for code quality within JavaScript/TypeScript projects Retire.js : Finds library/node module vulnerabilities within your project Dynamic Tools \u00b6 Iroh : Runtime code tracking and visualization Jalangi : Framework for dynamic analyses in JavaScript Fast-Fuzz : Fuzzing framework for TypeScript Stryker Mutator : Mutation testing tool for JavaScript","title":"Project 3: Continuous Integration + Deployment"},{"location":"_old/F24/projects/P3/#project-3-continuous-integration-deployment","text":"","title":"Project 3: Continuous Integration + Deployment"},{"location":"_old/F24/projects/P3/#learning-goals","text":"Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice","title":"Learning Goals"},{"location":"_old/F24/projects/P3/#project-context","text":"Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process.","title":"Project Context"},{"location":"_old/F24/projects/P3/#deliverables-and-deadlines","text":"There are two (2) deadlines for this project. This project is worth a total of 100 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, October 24th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 65 points \u2013 due Thursday, October 31st, 11:59pm Tool Analysis Design Doc (50 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, November 7th, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the Site Reliability Engineer(SRE) for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration.","title":"Deliverables and Deadlines"},{"location":"_old/F24/projects/P3/#checkpoint-deliverables","text":"","title":"Checkpoint Deliverables"},{"location":"_old/F24/projects/P3/#deployed-application-25-pts","text":"Your team will be using Azure for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit.","title":"Deployed Application (25 pts)"},{"location":"_old/F24/projects/P3/#tools-checkpoint-10-pts","text":"Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools","title":"Tools Checkpoint (10 pts)"},{"location":"_old/F24/projects/P3/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"_old/F24/projects/P3/#tool-analysis-design-doc-50-pts","text":"Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections.","title":"Tool Analysis Design Doc (50 pts)"},{"location":"_old/F24/projects/P3/#tool-integration-15-pts","text":"Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have *not* completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs.","title":"Tool Integration (15 pts)"},{"location":"_old/F24/projects/P3/#extra-credit","text":"Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project.","title":"Extra Credit"},{"location":"_old/F24/projects/P3/#feature-review-6-pts","text":"For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing.","title":"Feature Review (6 pts)"},{"location":"_old/F24/projects/P3/#grading","text":"To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described.","title":"Grading"},{"location":"_old/F24/projects/P3/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"_old/F24/projects/P3/#starter-list-of-tools","text":"NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find!","title":"Starter List of Tools"},{"location":"_old/F24/projects/P3/deployment/","text":"NodeBB Deployment on Azure \u00b6 This document will provide instructions to create a web-app deployment of NodeBB on Azure. Initial Setup \u00b6 Visit Azure and create an account using your school email address. There will be a wizard which will ask questions, you can select \u201cskip\u201d if you want. Once you are done, you should see the home screen: Select \"Subscriptions\", and you should see a subscription from your TA. For all resources created in this class, use this subscription. Create a Redis Instance on Azure \u00b6 Go back to the Azure homepage. Click \"Create new Resource\". Search for \"Azure Cache for Redis\" and select it. Make sure it is the one with the Blue logo provided by vendor \"Microsoft\", and not one of the third-party services. It should look like this: When creating the resource, use the lab subscription you created above. For \"Resource Group\", if nothing exists already, just create a new one called \"P3\". DNS Name: Use <team_name>-db or something similar. This will also be the \"resource name\" that you will see at the homepage/dashboard later so make sure to name it something that you can identify later as being the Redis instance for your team. Cache size: Select the lowest available (e.g. Standard C0 - 250 MB) Next\u2014Networking: Make sure \"Public Endpoint\" is selected so that you can connect to the instance from outside of Azure. Next\u2014Advanced: a. Enable the \"Non-TLS port\" option so that you can connect to the instance via port 6379. b. Under \"Authentication\", disable Microsoft Entra and enable \"Access Keys\". Next\u2014Tags: Ignore this page. Move forward. Next\u2014Review + Create. You should have the same options as listed below: Create the instance! Wait for several steps of creation and initialization (can take several minutes) before the instance appears available from the Azure Dashboard. Test the Redis instance: Go to the resource page for your Redis resource and note the host name. It should end with \".redis.cache.windows.net\". You should also see \"Port 6379 enabled\" and a link to \"Access keys\" (which you can also get to by navigating to the \"Authentication\" tab). From here, copy either the primary or secondary access key. Then, in your terminal on your laptop, type redis-cli -h <host-name-ending-in.redis.cache.windows.net> -p 6379 -a <access_key> . You should be able to login to the redis instance and get a command-line interface. You should see a prompt with the hostname and port number, and you can type commands like info to get instance info. Type CTRL+D to exit the redis-cli. Troubleshooting \u00b6 If your Redis resource seems to be up on the Azure dashboard but you are not able to connect to it via the CLI, check some of these things in the CLI: Is public networking enabled? Check \"Settings > Private endpoint.\" If you see private endpoints, then you need to delete them and add public access via the buttons on this screen. Is port 6379 (the non-SSL port) enabled? Check \"Settings > Advanced Settings > Access only via SSL,\" which should be set to \"No.\" Did you copy the right access key? See the screenshot above for reference. Create a Web App \u00b6 From the Azure dashboard, select \"Create Resource\" and choose \"Web App\". Choose the same Subscription and Resource Group as above. Basics: a. Choose a web app name, e.g. nodebb-<team_name> (the suffix will be .azurewebsites.net ). Make sure to disable \"Try a unique name\" so you don't get a long hash in the name. b. For Runtime stack, choose \"Node 20 LTS\". c. For Region, the default might be \u201cCanada Central\u201d, which is fine. d. For \"App Service Plan\" / \"Pricing Plan\" choose \"Basic B1\" Next\u2014Deployment: a. Enable basic authentication. Make sure to scroll down to the bottom of the page and enable this before doing the next step (at the top of the page). b. Scroll back up and enable \"Continuous Deployment\" via GitHub, and link to your GitHub account and choose the team repo you are working on. You will need to give Azure access to your GitHub account. You can optionally skip this step if you are confident about configuring CI separately later on manually. c. NOTE: The repository name is your team\u2019s repository Next\u2014Network: Defaults should be fine. Just make sure public access is ON. Next\u2014Monitor & Secure: You can disable App Insights to avoid this extra billing. Next\u2014Tags: Ignore, just move forward. Review+Create. Make sure you are on the Basic B1 plan (about $12.41 USD/month). Confirm all details and create. This will again take some time to create. Setup CI via GitHub Actions \u00b6 From the Azure dashboard, go to the resource page for your Web App created above. Navigate to the \"Settings > Configuration\" tab from the sidebar and in the start-up command type node app . Save this setting. Navigate to the \"Deployment > Deployment Center\" tab from the sidebar. Configure the deployment to build from source: GitHub and make sure it is connected to your repository (Org/Repo/Branch) as above. a. If your Deployment center is already connected to your repository, then you can go to the next step. If it is not connected, then For \"Workflow Option\", choose \"Use Available Workflow\". We will use the Azure Deploy workflow already in the CMU-313/NodeBB repo. This workflow deploys to Azure, but it depends on several secret variables like ADMIN_PASSWORD (for your NodeBB admin user), REDIS_HOST , REDIS_PASSWORD (for your database), and AZUREAPPSERVICE_PUBLISHPROFILE_XXX (for allowing GitHub to deploy to your Azure instance). Save these changes. Now let's set up these secret variables on GitHub.com. a. Go to your team's NodeBB repository and navigate to Settings > Secrets and Variables > Actions. You should already see a secret called AZUREAPPSERVICE_PUBLISHPROFILE_XXX which Azure put there when you linked your GitHub account and created the web app resource. b. Use the \"New repository secret\" button three times to create three secrets needed for your workflow: i. ADMIN_PASSWORD : Choose something easy to remember. ii. REDIS_HOST : Put the full domain of your Redis cache instance in the form <name>.redis.cache.windows.net . iii. REDIS_PASSWORD : Put the secret access key (either primary or secondary) for your Redis cache instance, which is the same one used to connect via CLI. It can be accessed from the \"Authentication\" tab in the Redis resource page on Azure. Delete the .yml file that was committed by Azure. It might be named something like: .github/workflows/f24_nodebb-<teamname\\>.yml Finally, edit the workflow file .github/workflows/azure-deploy-f24.yml in your own repository and modify four lines: a. Edit the name of the repository to match your repository name from GitHub. This guard is used here so that forks of the repo don't accidentally trigger deployments to the wrong target hostname. b. Edit the NodeBB setup URL to match the domain where your web app will be deployed. You can get this from the Overview page of the Web App resource on Azure; it should be of the form <name>.azurewebsites.net . Make sure that the workflow file retains the https:// prefix and the :443 suffix around the domain. c. Edit the app name to the <name> part, which is the name of your app on Azure. d. Edit the name of the publish profile secret key to match the name of the secret key in your settings, as shown above. Azure auto-generates the name of this variable with a unique suffix, so we have to keep updating this one. Commit and push to GitHub to trigger the Actions workflow and Azure deployment. Monitoring the Deployment \u00b6 On GitHub, you should see a dot next to the commit that shows you the status of the action. This may take a couple of minutes to complete. If the action fails, you can view the logs to see what went wrong (e.g. bad configuration or failed a lint/test). On the Azure dashboard, you can go to the Web App resource page, navigate to the Deployment Center tab from the sidebar, and view logs. You should see a log entry after every GitHub Action that succeeds its deployment. It can take 20-30 minutes for the deployment. If something goes wrong, you can navigate to the \"Log Stream\" page in the sidebar of your Web App resource. This should give you the stdout stream for the NodeBB setup and run, just like you would see on your own command-line if you ran ./nodebb setup and ./nodebb start locally. This can help you debug issues with wrong configuration, etc. if you missed any of the steps above.","title":"NodeBB Deployment on Azure"},{"location":"_old/F24/projects/P3/deployment/#nodebb-deployment-on-azure","text":"This document will provide instructions to create a web-app deployment of NodeBB on Azure.","title":"NodeBB Deployment on Azure"},{"location":"_old/F24/projects/P3/deployment/#initial-setup","text":"Visit Azure and create an account using your school email address. There will be a wizard which will ask questions, you can select \u201cskip\u201d if you want. Once you are done, you should see the home screen: Select \"Subscriptions\", and you should see a subscription from your TA. For all resources created in this class, use this subscription.","title":"Initial Setup"},{"location":"_old/F24/projects/P3/deployment/#create-a-redis-instance-on-azure","text":"Go back to the Azure homepage. Click \"Create new Resource\". Search for \"Azure Cache for Redis\" and select it. Make sure it is the one with the Blue logo provided by vendor \"Microsoft\", and not one of the third-party services. It should look like this: When creating the resource, use the lab subscription you created above. For \"Resource Group\", if nothing exists already, just create a new one called \"P3\". DNS Name: Use <team_name>-db or something similar. This will also be the \"resource name\" that you will see at the homepage/dashboard later so make sure to name it something that you can identify later as being the Redis instance for your team. Cache size: Select the lowest available (e.g. Standard C0 - 250 MB) Next\u2014Networking: Make sure \"Public Endpoint\" is selected so that you can connect to the instance from outside of Azure. Next\u2014Advanced: a. Enable the \"Non-TLS port\" option so that you can connect to the instance via port 6379. b. Under \"Authentication\", disable Microsoft Entra and enable \"Access Keys\". Next\u2014Tags: Ignore this page. Move forward. Next\u2014Review + Create. You should have the same options as listed below: Create the instance! Wait for several steps of creation and initialization (can take several minutes) before the instance appears available from the Azure Dashboard. Test the Redis instance: Go to the resource page for your Redis resource and note the host name. It should end with \".redis.cache.windows.net\". You should also see \"Port 6379 enabled\" and a link to \"Access keys\" (which you can also get to by navigating to the \"Authentication\" tab). From here, copy either the primary or secondary access key. Then, in your terminal on your laptop, type redis-cli -h <host-name-ending-in.redis.cache.windows.net> -p 6379 -a <access_key> . You should be able to login to the redis instance and get a command-line interface. You should see a prompt with the hostname and port number, and you can type commands like info to get instance info. Type CTRL+D to exit the redis-cli.","title":"Create a Redis Instance on Azure"},{"location":"_old/F24/projects/P3/deployment/#troubleshooting","text":"If your Redis resource seems to be up on the Azure dashboard but you are not able to connect to it via the CLI, check some of these things in the CLI: Is public networking enabled? Check \"Settings > Private endpoint.\" If you see private endpoints, then you need to delete them and add public access via the buttons on this screen. Is port 6379 (the non-SSL port) enabled? Check \"Settings > Advanced Settings > Access only via SSL,\" which should be set to \"No.\" Did you copy the right access key? See the screenshot above for reference.","title":"Troubleshooting"},{"location":"_old/F24/projects/P3/deployment/#create-a-web-app","text":"From the Azure dashboard, select \"Create Resource\" and choose \"Web App\". Choose the same Subscription and Resource Group as above. Basics: a. Choose a web app name, e.g. nodebb-<team_name> (the suffix will be .azurewebsites.net ). Make sure to disable \"Try a unique name\" so you don't get a long hash in the name. b. For Runtime stack, choose \"Node 20 LTS\". c. For Region, the default might be \u201cCanada Central\u201d, which is fine. d. For \"App Service Plan\" / \"Pricing Plan\" choose \"Basic B1\" Next\u2014Deployment: a. Enable basic authentication. Make sure to scroll down to the bottom of the page and enable this before doing the next step (at the top of the page). b. Scroll back up and enable \"Continuous Deployment\" via GitHub, and link to your GitHub account and choose the team repo you are working on. You will need to give Azure access to your GitHub account. You can optionally skip this step if you are confident about configuring CI separately later on manually. c. NOTE: The repository name is your team\u2019s repository Next\u2014Network: Defaults should be fine. Just make sure public access is ON. Next\u2014Monitor & Secure: You can disable App Insights to avoid this extra billing. Next\u2014Tags: Ignore, just move forward. Review+Create. Make sure you are on the Basic B1 plan (about $12.41 USD/month). Confirm all details and create. This will again take some time to create.","title":"Create a Web App"},{"location":"_old/F24/projects/P3/deployment/#setup-ci-via-github-actions","text":"From the Azure dashboard, go to the resource page for your Web App created above. Navigate to the \"Settings > Configuration\" tab from the sidebar and in the start-up command type node app . Save this setting. Navigate to the \"Deployment > Deployment Center\" tab from the sidebar. Configure the deployment to build from source: GitHub and make sure it is connected to your repository (Org/Repo/Branch) as above. a. If your Deployment center is already connected to your repository, then you can go to the next step. If it is not connected, then For \"Workflow Option\", choose \"Use Available Workflow\". We will use the Azure Deploy workflow already in the CMU-313/NodeBB repo. This workflow deploys to Azure, but it depends on several secret variables like ADMIN_PASSWORD (for your NodeBB admin user), REDIS_HOST , REDIS_PASSWORD (for your database), and AZUREAPPSERVICE_PUBLISHPROFILE_XXX (for allowing GitHub to deploy to your Azure instance). Save these changes. Now let's set up these secret variables on GitHub.com. a. Go to your team's NodeBB repository and navigate to Settings > Secrets and Variables > Actions. You should already see a secret called AZUREAPPSERVICE_PUBLISHPROFILE_XXX which Azure put there when you linked your GitHub account and created the web app resource. b. Use the \"New repository secret\" button three times to create three secrets needed for your workflow: i. ADMIN_PASSWORD : Choose something easy to remember. ii. REDIS_HOST : Put the full domain of your Redis cache instance in the form <name>.redis.cache.windows.net . iii. REDIS_PASSWORD : Put the secret access key (either primary or secondary) for your Redis cache instance, which is the same one used to connect via CLI. It can be accessed from the \"Authentication\" tab in the Redis resource page on Azure. Delete the .yml file that was committed by Azure. It might be named something like: .github/workflows/f24_nodebb-<teamname\\>.yml Finally, edit the workflow file .github/workflows/azure-deploy-f24.yml in your own repository and modify four lines: a. Edit the name of the repository to match your repository name from GitHub. This guard is used here so that forks of the repo don't accidentally trigger deployments to the wrong target hostname. b. Edit the NodeBB setup URL to match the domain where your web app will be deployed. You can get this from the Overview page of the Web App resource on Azure; it should be of the form <name>.azurewebsites.net . Make sure that the workflow file retains the https:// prefix and the :443 suffix around the domain. c. Edit the app name to the <name> part, which is the name of your app on Azure. d. Edit the name of the publish profile secret key to match the name of the secret key in your settings, as shown above. Azure auto-generates the name of this variable with a unique suffix, so we have to keep updating this one. Commit and push to GitHub to trigger the Actions workflow and Azure deployment.","title":"Setup CI via GitHub Actions"},{"location":"_old/F24/projects/P3/deployment/#monitoring-the-deployment","text":"On GitHub, you should see a dot next to the commit that shows you the status of the action. This may take a couple of minutes to complete. If the action fails, you can view the logs to see what went wrong (e.g. bad configuration or failed a lint/test). On the Azure dashboard, you can go to the Web App resource page, navigate to the Deployment Center tab from the sidebar, and view logs. You should see a log entry after every GitHub Action that succeeds its deployment. It can take 20-30 minutes for the deployment. If something goes wrong, you can navigate to the \"Log Stream\" page in the sidebar of your Web App resource. This should give you the stdout stream for the NodeBB setup and run, just like you would see on your own command-line if you ran ./nodebb setup and ./nodebb start locally. This can help you debug issues with wrong configuration, etc. if you missed any of the steps above.","title":"Monitoring the Deployment"},{"location":"_old/F24/projects/P4/","text":"Project 4: Architecting an LLM Integration \u00b6 Learning Goals \u00b6 Design a software architecture for a software system that incorporates a foundational large language model Decide the appropriate architecture for a given problem Address and describe the tradeoffs of different architectures Integrate pre-trained foundational large language models into an existing software system Evaluate the performance/quality of LLM powered features Design test suites that include unit, integration, and mock testing, to ensure robustness and reliability Engineer techniques to improve the performance of pre-trained models on application-specific tasks Decide whether an LLM powered solution is production ready Project Context \u00b6 The development of the new Q&A forum system for CMU is in full swing when your CEO suddenly bursts into the room shouting, \u201cLLMs! AI! Why are we building a Q&A forum without integrating LLMs?!\u201d Once your CEO has finally calmed down, your manager calls an all-hands meeting. At the meeting, everyone agrees that you don\u2019t have the resources to build a completely new Q&A forum and also automate the whole question-answering problem. But, to better compete with Piazza, your CEO and manager decide to put your team in charge of exploring using an LLM to implement a translation feature. This feature will automatically translate posts written in languages other than English into English. This initiative aims to foster inclusivity and ensure that language barriers do not hinder participation in the forum. In light of this new direction, your manager wants you to: Architect the feature - reason about, document and select an appropriate architecture for integrating this feature into the existing system. Build an experimental integration with the existing NodeBB codebase to evaluate feasibility. Evaluate the feature and decide whether the feature should be fully implemented. As everything is just settling down, your CEO bursts back into the room!! There's a new catch: the company is strapped for funding and must be very careful with its spending. As a result, your team is now required to conduct all experimentation and implementation of the LLM-powered translation feature using only the Azure credits currently at your disposal . If your team successfully stays within your available credits and doesn't need to request any more, you\u2019ll earn bonus points for your ingenuity and efficiency. Some of you may think that it\u2019s unfair for this change to come up unexpectedly, especially since we didn\u2019t inform you before P3, but keep in mind that this is just like real life! Working in a company means having to deal with unexpected circumstances, which more often than not contain some aspect concerning money. We're looking to see how well you can adapt to this new situation, and we want you to have this experience before you're dealing with the pressure of real company money. Rest assured, if your team needs more credits to finish the project, we will not be taking off points. Deliverables and Deadlines \u00b6 There are three (3) deadlines for the project. This project is worth a total of 125 points. Checkpoint #1 Deliverables \u2013 55 pts - due Friday, November 8, 11:59pm Architectural Design Document (40 pts) Basic LLM Experiment (15 pts) Checkpoint #2 Deliverables \u2013 10 pts - due Wednesday, November 13, 11:59pm LLM Experiment Integration Checkpoint (10 pts) Final Deliverables - 60 pts - due Friday, November 15, 11:59pm Final LLM Experiment Implementation (30 pts) Evaluation Report (30 pts) Checkpoint #1 Deliverables \u00b6 Architectural Design Document (40 points) \u00b6 To start, your manager has requested a concrete design document outlining how you plan to integrate the new LLM-powered translation feature into the existing codebase. One of your manager's requirements is that this feature should work on a deployed site. If the team decides to go ahead with the feature, this design document will be followed in order to fully integrate this feature into NodeBB. Two initial solutions to consider are: Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Your design document must discuss both of these approaches and include a third approach of your choosing . You must advocate for one of these three approaches as the best solution. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the translation feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Assessing LLM Suitability (<1 page) Use proprities of LLMs discussed in class to discuss why an LLM may be a good solution for translating posts on NodeBB. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture. Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider three different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Note Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Tip Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. Warning In the past, students have utilized generative AI tools to generate diagrams with mixed success. While some diagrams have been useful and accurate, others have fallen short due to inaccuracies or oversimplifications not aligned with specific project requirements. Be cautious and review them carefully for accuracy and relevance. If we suspect you've abused generative AI and your diagrams are inadequate , we won't consider regrade requests. You\u2019ve been warned. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF. Basic LLM Experiment (15 points) \u00b6 To explore the feasibility of LLMs for this task, your manager would like you to prototype the basic functionality of an LLM to translate text. Due to the company\u2019s existing deal with Microsoft, your team will use the gpt-4o-mini language model from OpenAI's Platform. To get setup, you will need to setup your Azure NodeBB instance and set up LLM use through Azure. You should already have done both of these for recitations 7 and 8, but you should refer to these two documents if you don't have something set up properly. Recitation 7 instructions on setting up NodeBB instance on Azure Recitation 8 instructions on setting up Azure for LLM use Once you're all set up, open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Only one team member needs to do this, and the team should collaborate using this notebook. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. Now, you should be ready to experiment with gpt-4o-mini! Follow the instructions in the notebook through the end of the Basic LLM Experiment. Given the unpredictable nature of LLM responses, it is crucial to test whether your application can handle a range of outcomes. Your Colab notebook should also include tests for your code. We have provided a starter code. In this task, you are required to employ mocking techniques to test your code resilience against unexpected results from API calls to the LLM. Mocking is a method used in testing to replace real system components with mock objects that simulate the behavior of those components. This approach allows developers to emulate various scenarios, including errors or atypical responses from external services, without having to make actual API calls. Here you will be using mocking to mimic different unexpected outcomes to check if your code can handle such anomalies gracefully. For full credit, your submission should have at least four mock tests that deal with different unexpected model behaviors. At least one of these tests should involve the model returning unexpected text. All tests should relate to the query_llm_robust function. You should download and submit a .ipynb copy of your Colab notebook (with outputs) to Gradescope. Checkpoint #2 Deliverables \u00b6 LLM Experiment Integration Checkpoint (10 points) \u00b6 For this checkpoint, you are expected to have successfully integrated the provided UI code into your project. Additionally, you must implement and deploy a server-side functionality that returns a hardcoded response. This step is crucial to ensure you are on track. We have provided some initial code on this repo . Furthermore, your server-side code must include unit and mock tests. To accomplish this, you must move the tests you wrote in the previous checkpoint to the repo and integrate them into the CI pipeline. Final Deliverables \u00b6 Final LLM Experiment Implementation (30 points) \u00b6 The final step is to implement this LLM feature into your team's NodeBB project. Your implementation should include the UI code you integrated in Checkpoint #2. You should also integrate the code you developed as a part of the LLM experiment, but you may modify it as needed to successfully integrate the functionality into your code. Because this is the last Project to use NodeBB, commit to your repo, and we will grade your final repository state Reach out to your TA if you have any questions. Evaluation Report (30 points) \u00b6 Now that you\u2019ve experimented with an LLM integration, write a report that summarizes your findings for the rest of the team. In particular, you will need to decide whether your findings justify completing and shipping this feature. Your report should include the following with clear headings: 1. Introduction (<0.5 pages) Provide a brief introduction to the LLM integration you\u2019re evaluating, and the context of its use, i.e. the translation feature. 2. LLM integration (<1 page) Describe the end-to-end implementation of your final solution to translating posts. Given an arbitrary post in any language, how do you integrate with an LLM to return an answer? Feel free to include any prompts and diagrams. 4. Evaluation Results (<0.5 page) Provide a summary of the results from applying the evaluation strategy on your final LLM experiment. Feel free to include any evidence/output from your notebook. 5. Operational Costs (<0.5 pages) Based on the pricing of your chosen LLM, how much will it cost to provide users with this feature? How long does it take to translate a post? State any assumptions made in making these estimates. Is the cost associated with providing this feature reasonable? 6. Final Recommendation (<0.5 pages) Provide a final decision on whether the translation feature should be implemented based on the evaluation results, operational costs and other relevant factors. On Gradescope submit the following: Link to your Colab notebook (with output) that contains your code, analysis. Make sure it is editable so that we can run the notebook if necessary. PDF of your evaluation report Grading \u00b6 To receive full credit for the first checkpoint, we expect: An uploaded PDF design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to your Colab notebook completing all of the setup and basic LLM experiment steps outlined by the previous section To receive full credit for the second checkpoint, we expect: A functional integration of the UI code into your NodeBB application. A preliminary implementation of the translation feature using the starter code, including CI with unit and mock tests. An integrated deployment of your NodeBB and the translation service on Azure. To receive full credit for the final deadline, we expect: A functional translation feature, as described in your design document, integrated into your NodeBB application and deployed on Azure. An uploaded PDF report discussing your evaluation findings addressing all the sections outlined above Resource & Documentation \u00b6 Design Documents \u00b6 The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation. LLMs \u00b6 Azure OpenAI docs Azure OpenAI Service pricing SBert Cosine Similarity Documentation SBert Semantic Search Documentation","title":"Project 4: Architecting an LLM Integration"},{"location":"_old/F24/projects/P4/#project-4-architecting-an-llm-integration","text":"","title":"Project 4: Architecting an LLM Integration"},{"location":"_old/F24/projects/P4/#learning-goals","text":"Design a software architecture for a software system that incorporates a foundational large language model Decide the appropriate architecture for a given problem Address and describe the tradeoffs of different architectures Integrate pre-trained foundational large language models into an existing software system Evaluate the performance/quality of LLM powered features Design test suites that include unit, integration, and mock testing, to ensure robustness and reliability Engineer techniques to improve the performance of pre-trained models on application-specific tasks Decide whether an LLM powered solution is production ready","title":"Learning Goals"},{"location":"_old/F24/projects/P4/#project-context","text":"The development of the new Q&A forum system for CMU is in full swing when your CEO suddenly bursts into the room shouting, \u201cLLMs! AI! Why are we building a Q&A forum without integrating LLMs?!\u201d Once your CEO has finally calmed down, your manager calls an all-hands meeting. At the meeting, everyone agrees that you don\u2019t have the resources to build a completely new Q&A forum and also automate the whole question-answering problem. But, to better compete with Piazza, your CEO and manager decide to put your team in charge of exploring using an LLM to implement a translation feature. This feature will automatically translate posts written in languages other than English into English. This initiative aims to foster inclusivity and ensure that language barriers do not hinder participation in the forum. In light of this new direction, your manager wants you to: Architect the feature - reason about, document and select an appropriate architecture for integrating this feature into the existing system. Build an experimental integration with the existing NodeBB codebase to evaluate feasibility. Evaluate the feature and decide whether the feature should be fully implemented. As everything is just settling down, your CEO bursts back into the room!! There's a new catch: the company is strapped for funding and must be very careful with its spending. As a result, your team is now required to conduct all experimentation and implementation of the LLM-powered translation feature using only the Azure credits currently at your disposal . If your team successfully stays within your available credits and doesn't need to request any more, you\u2019ll earn bonus points for your ingenuity and efficiency. Some of you may think that it\u2019s unfair for this change to come up unexpectedly, especially since we didn\u2019t inform you before P3, but keep in mind that this is just like real life! Working in a company means having to deal with unexpected circumstances, which more often than not contain some aspect concerning money. We're looking to see how well you can adapt to this new situation, and we want you to have this experience before you're dealing with the pressure of real company money. Rest assured, if your team needs more credits to finish the project, we will not be taking off points.","title":"Project Context"},{"location":"_old/F24/projects/P4/#deliverables-and-deadlines","text":"There are three (3) deadlines for the project. This project is worth a total of 125 points. Checkpoint #1 Deliverables \u2013 55 pts - due Friday, November 8, 11:59pm Architectural Design Document (40 pts) Basic LLM Experiment (15 pts) Checkpoint #2 Deliverables \u2013 10 pts - due Wednesday, November 13, 11:59pm LLM Experiment Integration Checkpoint (10 pts) Final Deliverables - 60 pts - due Friday, November 15, 11:59pm Final LLM Experiment Implementation (30 pts) Evaluation Report (30 pts)","title":"Deliverables and Deadlines"},{"location":"_old/F24/projects/P4/#checkpoint-1-deliverables","text":"","title":"Checkpoint #1 Deliverables"},{"location":"_old/F24/projects/P4/#architectural-design-document-40-points","text":"To start, your manager has requested a concrete design document outlining how you plan to integrate the new LLM-powered translation feature into the existing codebase. One of your manager's requirements is that this feature should work on a deployed site. If the team decides to go ahead with the feature, this design document will be followed in order to fully integrate this feature into NodeBB. Two initial solutions to consider are: Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Your design document must discuss both of these approaches and include a third approach of your choosing . You must advocate for one of these three approaches as the best solution. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the translation feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Assessing LLM Suitability (<1 page) Use proprities of LLMs discussed in class to discuss why an LLM may be a good solution for translating posts on NodeBB. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture. Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider three different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Note Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Tip Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. Warning In the past, students have utilized generative AI tools to generate diagrams with mixed success. While some diagrams have been useful and accurate, others have fallen short due to inaccuracies or oversimplifications not aligned with specific project requirements. Be cautious and review them carefully for accuracy and relevance. If we suspect you've abused generative AI and your diagrams are inadequate , we won't consider regrade requests. You\u2019ve been warned. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF.","title":"Architectural Design Document (40 points)"},{"location":"_old/F24/projects/P4/#basic-llm-experiment-15-points","text":"To explore the feasibility of LLMs for this task, your manager would like you to prototype the basic functionality of an LLM to translate text. Due to the company\u2019s existing deal with Microsoft, your team will use the gpt-4o-mini language model from OpenAI's Platform. To get setup, you will need to setup your Azure NodeBB instance and set up LLM use through Azure. You should already have done both of these for recitations 7 and 8, but you should refer to these two documents if you don't have something set up properly. Recitation 7 instructions on setting up NodeBB instance on Azure Recitation 8 instructions on setting up Azure for LLM use Once you're all set up, open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Only one team member needs to do this, and the team should collaborate using this notebook. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. Now, you should be ready to experiment with gpt-4o-mini! Follow the instructions in the notebook through the end of the Basic LLM Experiment. Given the unpredictable nature of LLM responses, it is crucial to test whether your application can handle a range of outcomes. Your Colab notebook should also include tests for your code. We have provided a starter code. In this task, you are required to employ mocking techniques to test your code resilience against unexpected results from API calls to the LLM. Mocking is a method used in testing to replace real system components with mock objects that simulate the behavior of those components. This approach allows developers to emulate various scenarios, including errors or atypical responses from external services, without having to make actual API calls. Here you will be using mocking to mimic different unexpected outcomes to check if your code can handle such anomalies gracefully. For full credit, your submission should have at least four mock tests that deal with different unexpected model behaviors. At least one of these tests should involve the model returning unexpected text. All tests should relate to the query_llm_robust function. You should download and submit a .ipynb copy of your Colab notebook (with outputs) to Gradescope.","title":"Basic LLM Experiment (15 points)"},{"location":"_old/F24/projects/P4/#checkpoint-2-deliverables","text":"","title":"Checkpoint #2 Deliverables"},{"location":"_old/F24/projects/P4/#llm-experiment-integration-checkpoint-10-points","text":"For this checkpoint, you are expected to have successfully integrated the provided UI code into your project. Additionally, you must implement and deploy a server-side functionality that returns a hardcoded response. This step is crucial to ensure you are on track. We have provided some initial code on this repo . Furthermore, your server-side code must include unit and mock tests. To accomplish this, you must move the tests you wrote in the previous checkpoint to the repo and integrate them into the CI pipeline.","title":"LLM Experiment Integration Checkpoint (10 points)"},{"location":"_old/F24/projects/P4/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"_old/F24/projects/P4/#final-llm-experiment-implementation-30-points","text":"The final step is to implement this LLM feature into your team's NodeBB project. Your implementation should include the UI code you integrated in Checkpoint #2. You should also integrate the code you developed as a part of the LLM experiment, but you may modify it as needed to successfully integrate the functionality into your code. Because this is the last Project to use NodeBB, commit to your repo, and we will grade your final repository state Reach out to your TA if you have any questions.","title":"Final LLM Experiment Implementation (30 points)"},{"location":"_old/F24/projects/P4/#evaluation-report-30-points","text":"Now that you\u2019ve experimented with an LLM integration, write a report that summarizes your findings for the rest of the team. In particular, you will need to decide whether your findings justify completing and shipping this feature. Your report should include the following with clear headings: 1. Introduction (<0.5 pages) Provide a brief introduction to the LLM integration you\u2019re evaluating, and the context of its use, i.e. the translation feature. 2. LLM integration (<1 page) Describe the end-to-end implementation of your final solution to translating posts. Given an arbitrary post in any language, how do you integrate with an LLM to return an answer? Feel free to include any prompts and diagrams. 4. Evaluation Results (<0.5 page) Provide a summary of the results from applying the evaluation strategy on your final LLM experiment. Feel free to include any evidence/output from your notebook. 5. Operational Costs (<0.5 pages) Based on the pricing of your chosen LLM, how much will it cost to provide users with this feature? How long does it take to translate a post? State any assumptions made in making these estimates. Is the cost associated with providing this feature reasonable? 6. Final Recommendation (<0.5 pages) Provide a final decision on whether the translation feature should be implemented based on the evaluation results, operational costs and other relevant factors. On Gradescope submit the following: Link to your Colab notebook (with output) that contains your code, analysis. Make sure it is editable so that we can run the notebook if necessary. PDF of your evaluation report","title":"Evaluation Report (30 points)"},{"location":"_old/F24/projects/P4/#grading","text":"To receive full credit for the first checkpoint, we expect: An uploaded PDF design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to your Colab notebook completing all of the setup and basic LLM experiment steps outlined by the previous section To receive full credit for the second checkpoint, we expect: A functional integration of the UI code into your NodeBB application. A preliminary implementation of the translation feature using the starter code, including CI with unit and mock tests. An integrated deployment of your NodeBB and the translation service on Azure. To receive full credit for the final deadline, we expect: A functional translation feature, as described in your design document, integrated into your NodeBB application and deployed on Azure. An uploaded PDF report discussing your evaluation findings addressing all the sections outlined above","title":"Grading"},{"location":"_old/F24/projects/P4/#resource-documentation","text":"","title":"Resource &amp; Documentation"},{"location":"_old/F24/projects/P4/#design-documents","text":"The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation.","title":"Design Documents"},{"location":"_old/F24/projects/P4/#llms","text":"Azure OpenAI docs Azure OpenAI Service pricing SBert Cosine Similarity Documentation SBert Semantic Search Documentation","title":"LLMs"},{"location":"_old/F24/projects/P5/","text":"Project 5: Open Source Excursion \u00b6 Learning Goals \u00b6 Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development Project Description \u00b6 Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. In past semesters, we've had teams merge code into popular open source projects like CPython, Pandas, and MyPy - see our Hall of Fame for details. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience. Deliverables and Deadlines \u00b6 This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 400 points (~24% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Tuesday, November 19th, 11:59pm Project selection - due Tuesday, November 19th Check-In Presentation (slides + recording) (80 pts) - due Sunday November 24th B) Project Final Report & Presentations \u2013 300 points \u2013 due Sunday, December 8th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, December 9th, 1:00-4:00pm C) Individual Reflections \u2013 20 points \u2013 due Monday, December 9th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 4 weeks. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Project 5: Open Source Excursion"},{"location":"_old/F24/projects/P5/#project-5-open-source-excursion","text":"","title":"Project 5: Open Source Excursion"},{"location":"_old/F24/projects/P5/#learning-goals","text":"Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development","title":"Learning Goals"},{"location":"_old/F24/projects/P5/#project-description","text":"Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. In past semesters, we've had teams merge code into popular open source projects like CPython, Pandas, and MyPy - see our Hall of Fame for details. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience.","title":"Project Description"},{"location":"_old/F24/projects/P5/#deliverables-and-deadlines","text":"This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 400 points (~24% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Tuesday, November 19th, 11:59pm Project selection - due Tuesday, November 19th Check-In Presentation (slides + recording) (80 pts) - due Sunday November 24th B) Project Final Report & Presentations \u2013 300 points \u2013 due Sunday, December 8th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, December 9th, 1:00-4:00pm C) Individual Reflections \u2013 20 points \u2013 due Monday, December 9th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 4 weeks. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Deliverables and Deadlines"},{"location":"_old/F24/projects/P5/1_projectcheck/","text":"Project 5A: Project and Task Selection \u00b6 Deliverables \u00b6 Project & Task Selection \u2013 80 points Project Selection - enter project name and URL in the spreadsheet by Tuesday, November 19th, 11:59pm Task Selection Checkpoint Presentation \u2013 slides and video recording due Sunday, November 24th, 11:59pm Open Source Project Selection \u00b6 You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may also check the other sheets in the Public Project Selection Spreadsheet which will include Projects and whether they were merged into main. You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet . We highly recommend you also think about potential tasks (see below) before finalizing on a project, as your success depends heavily on the chosen task. Task Selection \u00b6 For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff. Task Planning \u00b6 Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the checkpoint presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule. Checkpoint Presentation (80 pts) \u00b6 The recitation before Thanksgiving will be an open office hours. The subsequent recitation right after the due date of the recordings, we will be watching the recordings of your classmates checkin presentations in order to learn what others are doing and give advice. Presentations are 7 minutes long Participation from all team members during the presentation is required Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute checkpoint presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope and upload a video recording in this Google drive folder . You will be presenting this in the recitation on Monday, November 25th.","title":"Project 5A: Project and Task Selection"},{"location":"_old/F24/projects/P5/1_projectcheck/#project-5a-project-and-task-selection","text":"","title":"Project 5A: Project and Task Selection"},{"location":"_old/F24/projects/P5/1_projectcheck/#deliverables","text":"Project & Task Selection \u2013 80 points Project Selection - enter project name and URL in the spreadsheet by Tuesday, November 19th, 11:59pm Task Selection Checkpoint Presentation \u2013 slides and video recording due Sunday, November 24th, 11:59pm","title":"Deliverables"},{"location":"_old/F24/projects/P5/1_projectcheck/#open-source-project-selection","text":"You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may also check the other sheets in the Public Project Selection Spreadsheet which will include Projects and whether they were merged into main. You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet . We highly recommend you also think about potential tasks (see below) before finalizing on a project, as your success depends heavily on the chosen task.","title":"Open Source Project Selection"},{"location":"_old/F24/projects/P5/1_projectcheck/#task-selection","text":"For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff.","title":"Task Selection"},{"location":"_old/F24/projects/P5/1_projectcheck/#task-planning","text":"Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the checkpoint presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule.","title":"Task Planning"},{"location":"_old/F24/projects/P5/1_projectcheck/#checkpoint-presentation-80-pts","text":"The recitation before Thanksgiving will be an open office hours. The subsequent recitation right after the due date of the recordings, we will be watching the recordings of your classmates checkin presentations in order to learn what others are doing and give advice. Presentations are 7 minutes long Participation from all team members during the presentation is required Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute checkpoint presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope and upload a video recording in this Google drive folder . You will be presenting this in the recitation on Monday, November 25th.","title":"Checkpoint Presentation (80 pts)"},{"location":"_old/F24/projects/P5/2_projectfinal/","text":"Project 5B & C: Project Presentations, Final Report, and Reflections \u00b6 Deliverables \u00b6 Project Report and Presentation \u2013 due Sunday, December 8th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, December 9th, 1:00-4:00pm, during exam timeslot Reflection \u2013 due Monday, December 9th, 11:59pm Reflections & Peer Review (20 pts) Contributing to Open Source \u00b6 You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (5%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff. Report, Presentation and Reflection \u00b6 You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class. Project Presentations (100 pts) \u00b6 The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 4 minutes long, with 2 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Your Experiences (~1 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the one or two most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Monday, December 11th, 11:59pm . Project Report (200 pts) \u00b6 After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Project Processes and Communication (<1 page) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Summary of Final Contributions (<0.5 page) A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link to the instructors and Sophia via Slack over Group DM or e-mail(to all) by 3rd May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope . Individual Reflection & Peer Evaluations (20 pts) \u00b6 Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"Project 5B & C: Project Presentations, Final Report, and Reflections"},{"location":"_old/F24/projects/P5/2_projectfinal/#project-5b-c-project-presentations-final-report-and-reflections","text":"","title":"Project 5B &amp; C: Project Presentations, Final Report, and Reflections"},{"location":"_old/F24/projects/P5/2_projectfinal/#deliverables","text":"Project Report and Presentation \u2013 due Sunday, December 8th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, December 9th, 1:00-4:00pm, during exam timeslot Reflection \u2013 due Monday, December 9th, 11:59pm Reflections & Peer Review (20 pts)","title":"Deliverables"},{"location":"_old/F24/projects/P5/2_projectfinal/#contributing-to-open-source","text":"You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (5%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff.","title":"Contributing to Open Source"},{"location":"_old/F24/projects/P5/2_projectfinal/#report-presentation-and-reflection","text":"You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class.","title":"Report, Presentation and Reflection"},{"location":"_old/F24/projects/P5/2_projectfinal/#project-presentations-100-pts","text":"The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 4 minutes long, with 2 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Your Experiences (~1 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the one or two most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Monday, December 11th, 11:59pm .","title":"Project Presentations (100 pts)"},{"location":"_old/F24/projects/P5/2_projectfinal/#project-report-200-pts","text":"After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Project Processes and Communication (<1 page) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Summary of Final Contributions (<0.5 page) A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link to the instructors and Sophia via Slack over Group DM or e-mail(to all) by 3rd May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope .","title":"Project Report (200 pts)"},{"location":"_old/F24/projects/P5/2_projectfinal/#individual-reflection-peer-evaluations-20-pts","text":"Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"Individual Reflection &amp; Peer Evaluations (20 pts)"},{"location":"_old/F24/recitations/","text":"Coming soon!","title":"Index"},{"location":"_old/F24/recitations/reci1-github/","text":"Recitation 1: Using Git & Github for Collaborative TypeScript Development \u00b6 Overview \u00b6 After this recitation, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects. Students will learn about working with Git and GitHub by converting a file from JavaScript to TypeScript - a migration that students will perform again on Project 1. Prerequisites \u00b6 You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people. Activity 1a: Forking a repo and adding a collaborator \u00b6 Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine Activity 1b: Run a GitHub Action Workflow \u00b6 On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product Activity 2: Setting up Kanban board and creating issues \u00b6 Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person, and add the issues to the project Kanban board you just created using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your partner or make it public so they have access to it. Activity 3: Branching, committing, and pushing \u00b6 In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Potentially helpful TypeScript resources: exporting: https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#exporting-from-modules functions: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions Express req, res types - https://stackoverflow.com/a/58567246 Push the branch to remote git push --set-upstream origin <your-branch-name> Activity 4: Writing pull requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that there are no eslint errors associated with the file that you translated and that the correctness tests still pass. Note that the GitHub action itself won't pass because the linter won't pass until both files are translated, i.e. both PRs are merged. Assign the issue you created to the pull request Request your partner for a code review TypeScript Translation Resources The following documentation pointers will help with the code changes you'll need to make - Exporting from Modules , Typing Functions , Express Req, Res types Activity 5a: Doing code reviews and resolving merge conflicts \u00b6 Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column Activity 5b: Check GitHub actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Recitation 1 - Git Collaboration"},{"location":"_old/F24/recitations/reci1-github/#recitation-1-using-git-github-for-collaborative-typescript-development","text":"","title":"Recitation 1: Using Git &amp; Github for Collaborative TypeScript Development"},{"location":"_old/F24/recitations/reci1-github/#overview","text":"After this recitation, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects. Students will learn about working with Git and GitHub by converting a file from JavaScript to TypeScript - a migration that students will perform again on Project 1.","title":"Overview"},{"location":"_old/F24/recitations/reci1-github/#prerequisites","text":"You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people.","title":"Prerequisites"},{"location":"_old/F24/recitations/reci1-github/#activity-1a-forking-a-repo-and-adding-a-collaborator","text":"Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine","title":"Activity 1a: Forking a repo and adding a collaborator"},{"location":"_old/F24/recitations/reci1-github/#activity-1b-run-a-github-action-workflow","text":"On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product","title":"Activity 1b: Run a GitHub Action Workflow"},{"location":"_old/F24/recitations/reci1-github/#activity-2-setting-up-kanban-board-and-creating-issues","text":"Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person, and add the issues to the project Kanban board you just created using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your partner or make it public so they have access to it.","title":"Activity 2: Setting up Kanban board and creating issues"},{"location":"_old/F24/recitations/reci1-github/#activity-3-branching-committing-and-pushing","text":"In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Potentially helpful TypeScript resources: exporting: https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#exporting-from-modules functions: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions Express req, res types - https://stackoverflow.com/a/58567246 Push the branch to remote git push --set-upstream origin <your-branch-name>","title":"Activity 3: Branching, committing, and pushing"},{"location":"_old/F24/recitations/reci1-github/#activity-4-writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that there are no eslint errors associated with the file that you translated and that the correctness tests still pass. Note that the GitHub action itself won't pass because the linter won't pass until both files are translated, i.e. both PRs are merged. Assign the issue you created to the pull request Request your partner for a code review TypeScript Translation Resources The following documentation pointers will help with the code changes you'll need to make - Exporting from Modules , Typing Functions , Express Req, Res types","title":"Activity 4: Writing pull requests"},{"location":"_old/F24/recitations/reci1-github/#activity-5a-doing-code-reviews-and-resolving-merge-conflicts","text":"Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column","title":"Activity 5a: Doing code reviews and resolving merge conflicts"},{"location":"_old/F24/recitations/reci1-github/#activity-5b-check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 5b: Check GitHub actions"},{"location":"_old/F24/recitations/reci1-nodeBB/","text":"Recitation 1: Understand NodeBB - DUE Friday August 30, 11:59pm \u00b6 NOTE: because this recitation falls before the first day of class, we are having this recitation ONLY by asynchronous. You will complete online, and not attend recitation in person until week 2. \u00b6 Overview \u00b6 In this course, we will be building on a piece of open source software, NodeBB . NodeBB is \u201can innovative forum software designed to meet the needs of modern online communities.\u201d We will be using NodeBB for the majority of the semester, and we want to start by having you become familiar with the software. You can find an instance of the software deployed at: https://nodebb-f24.azurewebsites.net/ To help yourself become more familiar with the site, we will ask you to interact with it in several ways. Activity 1: Create an account \u00b6 Create a user account using your Andrew ID as the username. You must use your Andrew ID for us to be able to identify you for assigning participation points. You can then edit your profile to add a \"Full Name\" and a profile picture. Note that the demo site does not have the ability to send emails of any kind, so please remember your password as it cannot be easily reset. Activity 2: Introduce Yourself \u00b6 You should introduce yourself to the rest of the class. Please create a post in the \u201cIntroductions\u201d category, which is only visible once you login*. You should include in your introduction the following info: What you want to be called A picture of you (ideally something that will help people recognize you when they see you in class) in the \"thumbnail\" of the post. A short description (1-3 sentences) about a software project you have enjoyed working on in the past, e.g. during an internship or a large-ish course project. A short summary of why you're taking this course (e.g., because it is a requirement for a specific program and/or because you hope to learn about X). Something that you like to do outside of work, or your favorite restaurant in Pittsburgh. Feel free to embed photos or links in the post. Activity 3: Reply to another post \u00b6 After you have introduced yourself, you should reply to at least one other introduction post made by someone else, and comment on or ask a specific question about their prior experience or personal hobby. Try using the \"quote reply\" feature (look for the double-quotation marks at the bottom-right of a post) to reply to a specific sentence from their post. Activity 4: Follow up \u00b6 Login again after a few hours to see if anyone has responded to your Introduction post, and answer their questions, if any. !!! note \"Introductions\" are not public The \"Introductions\" category is configured so that it will not be indexed by search engines, etc. and are only visible to logged-in users.","title":"Recitation 1 - Understand NodeBB"},{"location":"_old/F24/recitations/reci1-nodeBB/#recitation-1-understand-nodebb-due-friday-august-30-1159pm","text":"","title":"Recitation 1: Understand NodeBB - DUE Friday August 30, 11:59pm"},{"location":"_old/F24/recitations/reci1-nodeBB/#note-because-this-recitation-falls-before-the-first-day-of-class-we-are-having-this-recitation-only-by-asynchronous-you-will-complete-online-and-not-attend-recitation-in-person-until-week-2","text":"","title":"NOTE: because this recitation falls before the first day of class, we are having this recitation ONLY by asynchronous.  You will complete online, and not attend recitation in person until week 2."},{"location":"_old/F24/recitations/reci1-nodeBB/#overview","text":"In this course, we will be building on a piece of open source software, NodeBB . NodeBB is \u201can innovative forum software designed to meet the needs of modern online communities.\u201d We will be using NodeBB for the majority of the semester, and we want to start by having you become familiar with the software. You can find an instance of the software deployed at: https://nodebb-f24.azurewebsites.net/ To help yourself become more familiar with the site, we will ask you to interact with it in several ways.","title":"Overview"},{"location":"_old/F24/recitations/reci1-nodeBB/#activity-1-create-an-account","text":"Create a user account using your Andrew ID as the username. You must use your Andrew ID for us to be able to identify you for assigning participation points. You can then edit your profile to add a \"Full Name\" and a profile picture. Note that the demo site does not have the ability to send emails of any kind, so please remember your password as it cannot be easily reset.","title":"Activity 1: Create an account"},{"location":"_old/F24/recitations/reci1-nodeBB/#activity-2-introduce-yourself","text":"You should introduce yourself to the rest of the class. Please create a post in the \u201cIntroductions\u201d category, which is only visible once you login*. You should include in your introduction the following info: What you want to be called A picture of you (ideally something that will help people recognize you when they see you in class) in the \"thumbnail\" of the post. A short description (1-3 sentences) about a software project you have enjoyed working on in the past, e.g. during an internship or a large-ish course project. A short summary of why you're taking this course (e.g., because it is a requirement for a specific program and/or because you hope to learn about X). Something that you like to do outside of work, or your favorite restaurant in Pittsburgh. Feel free to embed photos or links in the post.","title":"Activity 2: Introduce Yourself"},{"location":"_old/F24/recitations/reci1-nodeBB/#activity-3-reply-to-another-post","text":"After you have introduced yourself, you should reply to at least one other introduction post made by someone else, and comment on or ask a specific question about their prior experience or personal hobby. Try using the \"quote reply\" feature (look for the double-quotation marks at the bottom-right of a post) to reply to a specific sentence from their post.","title":"Activity 3: Reply to another post"},{"location":"_old/F24/recitations/reci1-nodeBB/#activity-4-follow-up","text":"Login again after a few hours to see if anyone has responded to your Introduction post, and answer their questions, if any. !!! note \"Introductions\" are not public The \"Introductions\" category is configured so that it will not be indexed by search engines, etc. and are only visible to logged-in users.","title":"Activity 4: Follow up"},{"location":"_old/F24/recitations/reci10-open-source/","text":"Recitation 10: Open Source Projects \u00b6 Overview \u00b6 This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5. Context \u00b6 Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license Scavenger Hunt (30 min) \u00b6 Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5. Reflection (10 min) \u00b6 With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5. Public Project Selection \u00b6 Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet . Resources \u00b6 A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Recitation 10 - Open Source Projects"},{"location":"_old/F24/recitations/reci10-open-source/#recitation-10-open-source-projects","text":"","title":"Recitation 10: Open Source Projects"},{"location":"_old/F24/recitations/reci10-open-source/#overview","text":"This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5.","title":"Overview"},{"location":"_old/F24/recitations/reci10-open-source/#context","text":"Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license","title":"Context"},{"location":"_old/F24/recitations/reci10-open-source/#scavenger-hunt-30-min","text":"Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5.","title":"Scavenger Hunt (30 min)"},{"location":"_old/F24/recitations/reci10-open-source/#reflection-10-min","text":"With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5.","title":"Reflection (10 min)"},{"location":"_old/F24/recitations/reci10-open-source/#public-project-selection","text":"Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet .","title":"Public Project Selection"},{"location":"_old/F24/recitations/reci10-open-source/#resources","text":"A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Resources"},{"location":"_old/F24/recitations/reci10-p5-checkin/","text":"Recitation 10: Open Source Project and Task Selection Check In \u00b6 This recitation will be supplemented with an asychronous project check in. You do not need to attend in person, instead, please upload a recording of your team presenting into the drive link below by Tuesday April 9th 11:59pm Wednesday, April 10th, 11:59pm. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on two peer presentations by Wednesday April 10th 11:59pm. Participation credit will be provided based on the feedback you provide.","title":"Recitation 10 - Open Source Project and Task Selection Check In"},{"location":"_old/F24/recitations/reci10-p5-checkin/#recitation-10-open-source-project-and-task-selection-check-in","text":"This recitation will be supplemented with an asychronous project check in. You do not need to attend in person, instead, please upload a recording of your team presenting into the drive link below by Tuesday April 9th 11:59pm Wednesday, April 10th, 11:59pm. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on two peer presentations by Wednesday April 10th 11:59pm. Participation credit will be provided based on the feedback you provide.","title":"Recitation 10: Open Source Project and Task Selection Check In"},{"location":"_old/F24/recitations/reci10-team-feedback/","text":"Recitation 10: Team Feedback \u00b6 Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 10 - Team Feedback"},{"location":"_old/F24/recitations/reci10-team-feedback/#recitation-10-team-feedback","text":"Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 10: Team Feedback"},{"location":"_old/F24/recitations/reci11-midterm-review/","text":"Recitation 11: Midterm Review \u00b6 This recitation is a chance for you to review and prepare for the midterm on Thursday. You might ask questions about course content, work on the Midterm 2 Practice Questions , or begin working on your cheat sheet. Complete your participation quiz Make sure to complete the quiz to receive participation credit for this recitation.","title":"Recitation 11 - Midterm Review"},{"location":"_old/F24/recitations/reci11-midterm-review/#recitation-11-midterm-review","text":"This recitation is a chance for you to review and prepare for the midterm on Thursday. You might ask questions about course content, work on the Midterm 2 Practice Questions , or begin working on your cheat sheet. Complete your participation quiz Make sure to complete the quiz to receive participation credit for this recitation.","title":"Recitation 11: Midterm Review"},{"location":"_old/F24/recitations/reci11-p5-checkin/","text":"Recitation 11: Open Source Project and Task Selection Check In \u00b6 This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11 - Open Source Project and Task Selection Check In"},{"location":"_old/F24/recitations/reci11-p5-checkin/#recitation-11-open-source-project-and-task-selection-check-in","text":"This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11: Open Source Project and Task Selection Check In"},{"location":"_old/F24/recitations/reci2-teamcontract/","text":"Recitation 2: Team Contract Workshop \u00b6 Overview \u00b6 After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility. Prerequisites \u00b6 None! You will be doing the activities in your teams. Sit with them! Activity 1: Get to know your team! \u00b6 See team assignments here . Do some quick intros, then get ready for.. Activity 1A: Similarities! \u00b6 In your group, spend 5 minutes finding 5 things that every group member has in common. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026 Activity 1B: Team Name \u00b6 As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d Activity 2: Team Contract \u00b6 In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc.) and try to anticipate what might come up over the course of the semester. At the end of class, we'll discuss your ideas and see what you came up with! Activity 2A: Expectations \u00b6 Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on 17-313 projects? How will you deal with unforeseen circumstances affecting team members (e.g. sickness, interviews, competitions)? How will team members be kept accountable for their contributions? Activity 2B: Communication and Scheduling \u00b6 Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time for recurring meetings is a big marker of team success. What platform(s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or via Zoom? What are the expectations or non-negotiables for these meetings? If a deadline is approaching and tasks remain incomplete, how will you convene and communicate to ensure completion? Activity 2C: Responsibilities and Conflict Resolution \u00b6 Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will responsibilities and tasks be divided among team members? Who will be responsible for organizing, facilitating, and taking notes during meetings? How will this responsibility rotate? How will the team address any issues related to teamwork that may arise? What steps will the team take if a member is contributing too little, and at what point will this issue be escalated to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above. Activity 3: Group Reflection \u00b6 Think of this as your team's very first meeting! Spend five minutes reflecting on it. What went well? Did you notice anything that can be improved upon in future meetings? For instance, were everyone\u2019s ideas heard? Did everyone do their best to contribute? Do you have anything to add to your team contract? Remember to be constructive and tactful! Activity 4: Class Discussion \u00b6 Share 2-3 interesting things your team added to your contract!","title":"Recitation 2 - Team Contract Workshop"},{"location":"_old/F24/recitations/reci2-teamcontract/#recitation-2-team-contract-workshop","text":"","title":"Recitation 2: Team Contract Workshop"},{"location":"_old/F24/recitations/reci2-teamcontract/#overview","text":"After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility.","title":"Overview"},{"location":"_old/F24/recitations/reci2-teamcontract/#prerequisites","text":"None! You will be doing the activities in your teams. Sit with them!","title":"Prerequisites"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-1-get-to-know-your-team","text":"See team assignments here . Do some quick intros, then get ready for..","title":"Activity 1: Get to know your team!"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-1a-similarities","text":"In your group, spend 5 minutes finding 5 things that every group member has in common. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026","title":"Activity 1A: Similarities!"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-1b-team-name","text":"As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d","title":"Activity 1B: Team Name"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-2-team-contract","text":"In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc.) and try to anticipate what might come up over the course of the semester. At the end of class, we'll discuss your ideas and see what you came up with!","title":"Activity 2: Team Contract"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-2a-expectations","text":"Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on 17-313 projects? How will you deal with unforeseen circumstances affecting team members (e.g. sickness, interviews, competitions)? How will team members be kept accountable for their contributions?","title":"Activity 2A: Expectations"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-2b-communication-and-scheduling","text":"Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time for recurring meetings is a big marker of team success. What platform(s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or via Zoom? What are the expectations or non-negotiables for these meetings? If a deadline is approaching and tasks remain incomplete, how will you convene and communicate to ensure completion?","title":"Activity 2B: Communication and Scheduling"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-2c-responsibilities-and-conflict-resolution","text":"Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will responsibilities and tasks be divided among team members? Who will be responsible for organizing, facilitating, and taking notes during meetings? How will this responsibility rotate? How will the team address any issues related to teamwork that may arise? What steps will the team take if a member is contributing too little, and at what point will this issue be escalated to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 2C: Responsibilities and Conflict Resolution"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-3-group-reflection","text":"Think of this as your team's very first meeting! Spend five minutes reflecting on it. What went well? Did you notice anything that can be improved upon in future meetings? For instance, were everyone\u2019s ideas heard? Did everyone do their best to contribute? Do you have anything to add to your team contract? Remember to be constructive and tactful!","title":"Activity 3: Group Reflection"},{"location":"_old/F24/recitations/reci2-teamcontract/#activity-4-class-discussion","text":"Share 2-3 interesting things your team added to your contract!","title":"Activity 4: Class Discussion"},{"location":"_old/F24/recitations/reci3-archaeology/","text":"Recitation 3: Software Archaeology \u00b6 Overview \u00b6 In today\u2019s recitation, we will practice implementing a new feature for the NodeBB codebase. Let's implement a new feature! Check out this issue of the feature request. The user wants NodeBB to suggest a new username if an existing username is taken. (Don't worry about searching through all the users currently registered to suggest a new name, just make it suggest the current name the user wanted but with a suffix attached to it. Querying the backend server again is harder and is part of the optional task.) Task 0: Clone the repo \u00b6 Fork this repository and clone it. Follow the README to install the necessary modules and run NodeBB. Task 1: Reproduce the existing behaviour \u00b6 After you've successfully ran the program, go through it to reproduce the current behaviour. Task 2: Diving into the code and implement the new behaviour \u00b6 Let\u2019s learn more about the current implementation! Your high-level goal is to identify the code that implements current implementation and extends it to add the new feature. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the code. Try some or all of the following tasks: Explore the NodeBB directory Understand how current features are implemented. Can you identify whether to modify the front-end or back-end code of the program? Frontend code is located in public directory Backend code is located in src directory Can you identify the keywords that you would like to search in the repository? Maybe try searching for part of the error message that is currently showing. Use your IDE to jump to a definition implicated in the code you\u2019re debugging Warning Since error message involves i18n and l10n , please implement only the English version. Task 3: Making a Pull Request \u00b6 If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue. Task 4 (Optional): Suggest a unique username \u00b6 Can you suggest a unique username by querying the backend server again? For example, if test123 is taken, you should check if test1231 is taken, then test1232 , etc. You should display a username that has not yet been registered by anyone.","title":"Recitation 3 - Software Archaeology"},{"location":"_old/F24/recitations/reci3-archaeology/#recitation-3-software-archaeology","text":"","title":"Recitation 3: Software Archaeology"},{"location":"_old/F24/recitations/reci3-archaeology/#overview","text":"In today\u2019s recitation, we will practice implementing a new feature for the NodeBB codebase. Let's implement a new feature! Check out this issue of the feature request. The user wants NodeBB to suggest a new username if an existing username is taken. (Don't worry about searching through all the users currently registered to suggest a new name, just make it suggest the current name the user wanted but with a suffix attached to it. Querying the backend server again is harder and is part of the optional task.)","title":"Overview"},{"location":"_old/F24/recitations/reci3-archaeology/#task-0-clone-the-repo","text":"Fork this repository and clone it. Follow the README to install the necessary modules and run NodeBB.","title":"Task 0: Clone the repo"},{"location":"_old/F24/recitations/reci3-archaeology/#task-1-reproduce-the-existing-behaviour","text":"After you've successfully ran the program, go through it to reproduce the current behaviour.","title":"Task 1: Reproduce the existing behaviour"},{"location":"_old/F24/recitations/reci3-archaeology/#task-2-diving-into-the-code-and-implement-the-new-behaviour","text":"Let\u2019s learn more about the current implementation! Your high-level goal is to identify the code that implements current implementation and extends it to add the new feature. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the code. Try some or all of the following tasks: Explore the NodeBB directory Understand how current features are implemented. Can you identify whether to modify the front-end or back-end code of the program? Frontend code is located in public directory Backend code is located in src directory Can you identify the keywords that you would like to search in the repository? Maybe try searching for part of the error message that is currently showing. Use your IDE to jump to a definition implicated in the code you\u2019re debugging Warning Since error message involves i18n and l10n , please implement only the English version.","title":"Task 2: Diving into the code and implement the new behaviour"},{"location":"_old/F24/recitations/reci3-archaeology/#task-3-making-a-pull-request","text":"If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue.","title":"Task 3: Making a Pull Request"},{"location":"_old/F24/recitations/reci3-archaeology/#task-4-optional-suggest-a-unique-username","text":"Can you suggest a unique username by querying the backend server again? For example, if test123 is taken, you should check if test1231 is taken, then test1232 , etc. You should display a username that has not yet been registered by anyone.","title":"Task 4 (Optional): Suggest a unique username"},{"location":"_old/F24/recitations/reci4-checkpoint/","text":"Recitation 4: P2B Checkpoint Presentations \u00b6 Today we\u2019ll be having our project presentations. Please make sure to upload the link to the presentation on gradescope under recitation 4. Uploading a link will be what is used for participation. See P2B Checkpoint Presentation for more details. Make sure to submit your slides on Gradescope before you present.","title":"Recitation 4 - P2B Checkpoint Presentations"},{"location":"_old/F24/recitations/reci4-checkpoint/#recitation-4-p2b-checkpoint-presentations","text":"Today we\u2019ll be having our project presentations. Please make sure to upload the link to the presentation on gradescope under recitation 4. Uploading a link will be what is used for participation. See P2B Checkpoint Presentation for more details. Make sure to submit your slides on Gradescope before you present.","title":"Recitation 4: P2B Checkpoint Presentations"},{"location":"_old/F24/recitations/reci5-team-dysfunction/","text":"Recitation 5: Team Dysfunction \u00b6 Learning objectives \u00b6 Practice and reflect about being within a team. Reinforce the knowledge of team dysfunction issues and mitigation strategies. Part 0: Preparation \u00b6 Use the number generator to get a random number from 1-7 that will determine your role. To know how you are supposed to act, reference the Roles & personality traits section for the role description based on your number. Part 1: Skit planning (15 minutes) \u00b6 You will be planning a 3-5 minute skit to perform in front of the class. Your skit will be about a team that is finding a tool to support the payment system of your graduate application. Here are some ideas of what the skit can include: Researching tools to support the payment system Comparing the strengths and weaknesses of the tools Trying to agree on a tool to use Assigning each member a task to do to integrate the payment system into the graduate application Have fun with the skit! Part 2: Skit performance (15 minutes) \u00b6 You will perform the skits in front of the class. As a class, try to guess for each performer: What dysfunctional characteristic did your teammates display? Part 3: Trade-off and task planning meeting (20 minutes) \u00b6 As a class, for each dysfunctional characteristic, discuss the following questions: How would you handle the dysfunctional characteristics in future situations? What problems can be caused by this behavior? Can you think of mitigation strategies and solutions to avoid them? Part 4: Submit on Gradescope \u00b6 To receive participation for this activity, please complete the quiz on Gradescope . Roles & personality traits \u00b6 Here\u2019s a description of the roles and the behavior each role has. Role Behavior Contributor Aim for general team success, discuss solutions with your team. Ask for their opinion and demonstrate engagement during the activity. Know-it-all You think you are extremely experienced and know how to solve the problem on your own. Act like you do not need help and just tell your team to watch while you search for the tool. Try to tell other members how to search for information about the tool. Be combative and shoot another member\u2019s idea down if possible. Act silent Pay attention to the meeting, but simply do not suggest anything. You assume your team members know everything and don\u2019t feel you need to say much. Remain passive but friendly. Agree with everything Do not question the decisions of your team. You are afraid of raising conflicts; so just agree with everything during the activity. Hitchhiking Your goal is to do as little work as possible. Be friendly but not productive. Try to get other people to step in for you, for example you can act confused with the task and say that you need someone else to do this for you. You may have to make a quick, bad attempt to make it look like you tried to figure out the task. Commitment issue Go along with the meeting, until when tasks are being assigned, say that you are busy with something (interview prep, midterm, other assignment). If asked if they could do something else, or if being pressed further continue giving excuses why you can\u2019t contribute. Perfectionist You will perfect even minor details. Your role is to make sure the tool\u2019s source code is readable and aesthetically perfect and that also includes perfect comments. You should argue for or against the tool based on these minor details.","title":"Recitation 5 - Team Dysfunction"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#recitation-5-team-dysfunction","text":"","title":"Recitation 5: Team Dysfunction"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#learning-objectives","text":"Practice and reflect about being within a team. Reinforce the knowledge of team dysfunction issues and mitigation strategies.","title":"Learning objectives"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#part-0-preparation","text":"Use the number generator to get a random number from 1-7 that will determine your role. To know how you are supposed to act, reference the Roles & personality traits section for the role description based on your number.","title":"Part 0: Preparation"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#part-1-skit-planning-15-minutes","text":"You will be planning a 3-5 minute skit to perform in front of the class. Your skit will be about a team that is finding a tool to support the payment system of your graduate application. Here are some ideas of what the skit can include: Researching tools to support the payment system Comparing the strengths and weaknesses of the tools Trying to agree on a tool to use Assigning each member a task to do to integrate the payment system into the graduate application Have fun with the skit!","title":"Part 1: Skit planning (15 minutes)"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#part-2-skit-performance-15-minutes","text":"You will perform the skits in front of the class. As a class, try to guess for each performer: What dysfunctional characteristic did your teammates display?","title":"Part 2: Skit performance (15 minutes)"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#part-3-trade-off-and-task-planning-meeting-20-minutes","text":"As a class, for each dysfunctional characteristic, discuss the following questions: How would you handle the dysfunctional characteristics in future situations? What problems can be caused by this behavior? Can you think of mitigation strategies and solutions to avoid them?","title":"Part 3: Trade-off and task planning meeting (20 minutes)"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#part-4-submit-on-gradescope","text":"To receive participation for this activity, please complete the quiz on Gradescope .","title":"Part 4: Submit on Gradescope"},{"location":"_old/F24/recitations/reci5-team-dysfunction/#roles-personality-traits","text":"Here\u2019s a description of the roles and the behavior each role has. Role Behavior Contributor Aim for general team success, discuss solutions with your team. Ask for their opinion and demonstrate engagement during the activity. Know-it-all You think you are extremely experienced and know how to solve the problem on your own. Act like you do not need help and just tell your team to watch while you search for the tool. Try to tell other members how to search for information about the tool. Be combative and shoot another member\u2019s idea down if possible. Act silent Pay attention to the meeting, but simply do not suggest anything. You assume your team members know everything and don\u2019t feel you need to say much. Remain passive but friendly. Agree with everything Do not question the decisions of your team. You are afraid of raising conflicts; so just agree with everything during the activity. Hitchhiking Your goal is to do as little work as possible. Be friendly but not productive. Try to get other people to step in for you, for example you can act confused with the task and say that you need someone else to do this for you. You may have to make a quick, bad attempt to make it look like you tried to figure out the task. Commitment issue Go along with the meeting, until when tasks are being assigned, say that you are busy with something (interview prep, midterm, other assignment). If asked if they could do something else, or if being pressed further continue giving excuses why you can\u2019t contribute. Perfectionist You will perfect even minor details. Your role is to make sure the tool\u2019s source code is readable and aesthetically perfect and that also includes perfect comments. You should argue for or against the tool based on these minor details.","title":"Roles &amp; personality traits"},{"location":"_old/F24/recitations/reci6-deployment/","text":"Recitation 6: Deployment \u00b6 Overview \u00b6 Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Vercel and Microsoft Azure Set up and get familiarized with the Extreme Startup web app for use in Thursday's (10/10) lecture Definitions \u00b6 Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here! Task 0: Setting up your repository \u00b6 For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Thursday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture. Task 1: Continuous Deployment \u00b6 To start off, you'll be deploying the app you just forked on Vercel. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository. Task 1: Deploy on Vercel \u00b6 Create an account on Vercel by clicking \"Sign up\", choose a hobby account, then \"Continue with GitHub\" Add a new project Choose \"Import Git Repository\" Connect your basic-web-app fork to the Web Service you just created Name your project basic-web-app Click Deploy When the build completes, click on the link of the form *.vercel.app at the top of the page to view the deployment. Task 2: Implement \"What is your Andrew ID?\" \u00b6 To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented. Bonus Task: Continuous Integration \u00b6 While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope!","title":"Recitation 6: Deployment"},{"location":"_old/F24/recitations/reci6-deployment/#recitation-6-deployment","text":"","title":"Recitation 6: Deployment"},{"location":"_old/F24/recitations/reci6-deployment/#overview","text":"Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Vercel and Microsoft Azure Set up and get familiarized with the Extreme Startup web app for use in Thursday's (10/10) lecture","title":"Overview"},{"location":"_old/F24/recitations/reci6-deployment/#definitions","text":"Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here!","title":"Definitions"},{"location":"_old/F24/recitations/reci6-deployment/#task-0-setting-up-your-repository","text":"For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Thursday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture.","title":"Task 0: Setting up your repository"},{"location":"_old/F24/recitations/reci6-deployment/#task-1-continuous-deployment","text":"To start off, you'll be deploying the app you just forked on Vercel. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository.","title":"Task 1: Continuous Deployment"},{"location":"_old/F24/recitations/reci6-deployment/#task-1-deploy-on-vercel","text":"Create an account on Vercel by clicking \"Sign up\", choose a hobby account, then \"Continue with GitHub\" Add a new project Choose \"Import Git Repository\" Connect your basic-web-app fork to the Web Service you just created Name your project basic-web-app Click Deploy When the build completes, click on the link of the form *.vercel.app at the top of the page to view the deployment.","title":"Task 1: Deploy on Vercel"},{"location":"_old/F24/recitations/reci6-deployment/#task-2-implement-what-is-your-andrew-id","text":"To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented.","title":"Task 2: Implement \"What is your Andrew ID?\""},{"location":"_old/F24/recitations/reci6-deployment/#bonus-task-continuous-integration","text":"While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope!","title":"Bonus Task: Continuous Integration"},{"location":"_old/F24/recitations/reci7-azure-setup/","text":"Recitation 7: Azure Setup \u00b6 As discussed in last recitation, Microsoft Azure is another cloud deloyment software similar to Vercel which you all have used in class before. We will be giving out access to Microsoft credits to each team. Only one person per group needs to setup the group Azure instance but everyone will have access to the shared resource. The purpose of this recitation is to help you and your team setup Azure for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on Azure . Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along on the slides and document presented here: See Slides on Instructions and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one Azure instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7 - Azure Setup"},{"location":"_old/F24/recitations/reci7-azure-setup/#recitation-7-azure-setup","text":"As discussed in last recitation, Microsoft Azure is another cloud deloyment software similar to Vercel which you all have used in class before. We will be giving out access to Microsoft credits to each team. Only one person per group needs to setup the group Azure instance but everyone will have access to the shared resource. The purpose of this recitation is to help you and your team setup Azure for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on Azure . Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along on the slides and document presented here: See Slides on Instructions and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one Azure instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7: Azure Setup"},{"location":"_old/F24/recitations/reci7-docker/","text":"Recitation 7: Microservices and Docker \u00b6 Prerequisites \u00b6 You should have downloaded Docker. If you haven't follow the installation instructions here Setup Instructions (10 min): \u00b6 Fork this repo and clone it. Also start the docker engine. Overview \u00b6 During this recitation, students will create a simple FastAPI app, containerize it and deploy it. Context \u00b6 Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] } Activity \u00b6 Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml . Bonus \u00b6 Try deploying your container using instructions from here .","title":"Recitation 7: Microservices and Docker"},{"location":"_old/F24/recitations/reci7-docker/#recitation-7-microservices-and-docker","text":"","title":"Recitation 7: Microservices and Docker"},{"location":"_old/F24/recitations/reci7-docker/#prerequisites","text":"You should have downloaded Docker. If you haven't follow the installation instructions here","title":"Prerequisites"},{"location":"_old/F24/recitations/reci7-docker/#setup-instructions-10-min","text":"Fork this repo and clone it. Also start the docker engine.","title":"Setup Instructions (10 min):"},{"location":"_old/F24/recitations/reci7-docker/#overview","text":"During this recitation, students will create a simple FastAPI app, containerize it and deploy it.","title":"Overview"},{"location":"_old/F24/recitations/reci7-docker/#context","text":"Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] }","title":"Context"},{"location":"_old/F24/recitations/reci7-docker/#activity","text":"Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml .","title":"Activity"},{"location":"_old/F24/recitations/reci7-docker/#bonus","text":"Try deploying your container using instructions from here .","title":"Bonus"},{"location":"_old/F24/recitations/reci7-dysfunction/","text":"Recitation 4: Team Dysfunction \u00b6 Overview \u00b6 This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies. Context \u00b6 All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better. Part 0: Preparation \u00b6 We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class. Part 1: Task Planning Meeting Rehearsal (5 min) \u00b6 Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system. Team 1 \u00b6 For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications. Team 2 \u00b6 For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students. Team 3 \u00b6 For your first assignment, you've been asked to develop a better system for students to log in to their application portal. Team 4 \u00b6 For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2. Part 2: Presentations! (15 min) \u00b6 Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize! Part 3: Class Discussion (15 min) \u00b6 As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems? Appendix A: Role Descriptions \u00b6 Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Recitation 4 - Team Dysfunction"},{"location":"_old/F24/recitations/reci7-dysfunction/#recitation-4-team-dysfunction","text":"","title":"Recitation 4: Team Dysfunction"},{"location":"_old/F24/recitations/reci7-dysfunction/#overview","text":"This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies.","title":"Overview"},{"location":"_old/F24/recitations/reci7-dysfunction/#context","text":"All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better.","title":"Context"},{"location":"_old/F24/recitations/reci7-dysfunction/#part-0-preparation","text":"We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class.","title":"Part 0: Preparation"},{"location":"_old/F24/recitations/reci7-dysfunction/#part-1-task-planning-meeting-rehearsal-5-min","text":"Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system.","title":"Part 1: Task Planning Meeting Rehearsal (5 min)"},{"location":"_old/F24/recitations/reci7-dysfunction/#team-1","text":"For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications.","title":"Team 1"},{"location":"_old/F24/recitations/reci7-dysfunction/#team-2","text":"For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students.","title":"Team 2"},{"location":"_old/F24/recitations/reci7-dysfunction/#team-3","text":"For your first assignment, you've been asked to develop a better system for students to log in to their application portal.","title":"Team 3"},{"location":"_old/F24/recitations/reci7-dysfunction/#team-4","text":"For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2.","title":"Team 4"},{"location":"_old/F24/recitations/reci7-dysfunction/#part-2-presentations-15-min","text":"Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize!","title":"Part 2: Presentations! (15 min)"},{"location":"_old/F24/recitations/reci7-dysfunction/#part-3-class-discussion-15-min","text":"As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems?","title":"Part 3: Class Discussion (15 min)"},{"location":"_old/F24/recitations/reci7-dysfunction/#appendix-a-role-descriptions","text":"Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Appendix A: Role Descriptions"},{"location":"_old/F24/recitations/reci7-llms/","text":"Recitation 7: Large Language Models \u00b6 Overview \u00b6 During this recitation, students will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Setup Instructions (5 min) \u00b6 For this recitation, you'll be using Google's Vertex AI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our GCP project to enable the API and create a copy of the Colab notebook. Note: if you have not yet created a GCP project and redeemed your credits, please refer to the instructions in Task 1B of Recitation 6 . Enable the Vertex AI API using this link . Make sure your NodeBB project from P3 or the basic web app from Recitation 6 is selected in the project selector dropdown. Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Activity 0: Install Dependencies and Authenticate GCP (5 min) \u00b6 Run the first cell of the notebook to install any Python dependencies. Follow the rest of the instructions in the notebook to authenticate GCP. Activity 1: Examine the Stanford Question Answering (SQuAD) Dataset (10 mins) \u00b6 The dataset contains a set of questions and answers to test a system for reading comprehension. Load in the dataset and understand the format. For one example, print out the context, question, and expected answer. Activity 2: Use the Vertex AI API to query the chat-bison LLM (10 min) \u00b6 Now that we have loaded the dataset, let's try querying an LLM to answer one of the questions. Refer to the Vertex Python SDK docs to load and query the model. For this exercise, choose the \" chat-bison@001 \" model. Try running the model on one of the examples from the SQuAD dataset. Does the output match the expected answer? Activity 3: Check Correctness of Output (10 min) \u00b6 When using an LLM, it is important to design an evaluation strategy for the task. This involves choosing a method of evaluating the correctness of the LLM output. Since the output in our task is textual, there are many difference ways of checking similarity to an expected answer. For now we will proceed with simply taking the percent of correct asnwers given by the LLM. Follow the notebook instructions to calculate cosine similarity for a sample of 10 questions. What are some limitations with this metric? Are there ways of changing the prompt to make the outputs better? Once you are done, submit the link to your Colab notebook to gradescope at this link .","title":"Recitation 7 - Large Language Models"},{"location":"_old/F24/recitations/reci7-llms/#recitation-7-large-language-models","text":"","title":"Recitation 7: Large Language Models"},{"location":"_old/F24/recitations/reci7-llms/#overview","text":"During this recitation, students will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"_old/F24/recitations/reci7-llms/#setup-instructions-5-min","text":"For this recitation, you'll be using Google's Vertex AI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our GCP project to enable the API and create a copy of the Colab notebook. Note: if you have not yet created a GCP project and redeemed your credits, please refer to the instructions in Task 1B of Recitation 6 . Enable the Vertex AI API using this link . Make sure your NodeBB project from P3 or the basic web app from Recitation 6 is selected in the project selector dropdown. Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope.","title":"Setup Instructions (5 min)"},{"location":"_old/F24/recitations/reci7-llms/#activity-0-install-dependencies-and-authenticate-gcp-5-min","text":"Run the first cell of the notebook to install any Python dependencies. Follow the rest of the instructions in the notebook to authenticate GCP.","title":"Activity 0: Install Dependencies and Authenticate GCP (5 min)"},{"location":"_old/F24/recitations/reci7-llms/#activity-1-examine-the-stanford-question-answering-squad-dataset-10-mins","text":"The dataset contains a set of questions and answers to test a system for reading comprehension. Load in the dataset and understand the format. For one example, print out the context, question, and expected answer.","title":"Activity 1: Examine the Stanford Question Answering (SQuAD) Dataset (10 mins)"},{"location":"_old/F24/recitations/reci7-llms/#activity-2-use-the-vertex-ai-api-to-query-the-chat-bison-llm-10-min","text":"Now that we have loaded the dataset, let's try querying an LLM to answer one of the questions. Refer to the Vertex Python SDK docs to load and query the model. For this exercise, choose the \" chat-bison@001 \" model. Try running the model on one of the examples from the SQuAD dataset. Does the output match the expected answer?","title":"Activity 2: Use the Vertex AI API to query the chat-bison LLM (10 min)"},{"location":"_old/F24/recitations/reci7-llms/#activity-3-check-correctness-of-output-10-min","text":"When using an LLM, it is important to design an evaluation strategy for the task. This involves choosing a method of evaluating the correctness of the LLM output. Since the output in our task is textual, there are many difference ways of checking similarity to an expected answer. For now we will proceed with simply taking the percent of correct asnwers given by the LLM. Follow the notebook instructions to calculate cosine similarity for a sample of 10 questions. What are some limitations with this metric? Are there ways of changing the prompt to make the outputs better? Once you are done, submit the link to your Colab notebook to gradescope at this link .","title":"Activity 3: Check Correctness of Output (10 min)"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/","text":"Recitation 7: Static Analysis and Continuous Integration \u00b6 Static and dynamic analysis tools help you keep the codebase healthy. In this recitation, we will learn how to set up these tools in CI (GitHub Actions). Step 1: Setup your sample Python repo \u00b6 First, go to this template repo and use it to create your own repo. This repo should be very similar to something you've seen before, except it comes with a failing test. You already learned that it's a big no-no to push directly to main . We can actually enforce this using branch protect rules . Read the docs to understand what they are, and set the following rules: Requires a pull request before merging to main Requires tests to pass before merging to main : Search for the job name in the required checks (i.e. test in this case.) You may need to save the settings first before this search box appears. Your setting should look like this: The failing test cases \u274c wouldn\u2019t have been there if I had these rules enabled in the first place. Now, let's fix our failing test. Step 2: Fix the broken CI \u00b6 The \u274c really shouldn't have been there in the first place if I had these rules enabled. Now let's fix it. Branch off from main and create a PR to fix the broken CI. Take a look in the Actions page to see which test is failing. Branch off from main and create a PR to fix the broken CI. (the fix should be VERY simple!) The test job should pass on your PR. Click \"Squash and merge\"* to merge after the status checks pass. *: It's just a lot cleaner than the default merge. HINT: If you are really stuck on how to fix, click here Step 3: Make your code pretty \u00b6 Different tab sizes driving you crazy? Let's use a tool to standardize them all. A code formatter, a static analysis tool, helps one identify and fix formatting issues in the codebase. Let's use black as an example. First, create another branch for setting up a code formatter. Then, run the following commands to install it locally and try running it: pipenv install --dev black : black is only a development dependency . Your package doesn't actually use it. pipenv run black . --check : Runs black in the current directory. --check dry-runs black and don't alter any files. Observe some files on the list. pipenv run black . : This will actually change the files. Run git diff to observe the file changes. Using CI, we can enforce formatting requirements using the same GH Actions + status checks. For popular tools, someone has done it before, and you can reuse their workflow. Go to this existing black Actions on GH Marketplace Click \"Use latest version\" to see what needs to be added to .github/workflows/main.yml Add another job called \u201cformat\u201d to the main.yml file to use black to check the file formatting Push your formatted files to the branch and observe format passes. Squash and merge the PR Step 4: Add test coverage to the CI workflow \u00b6 Finally, you can also do some dynamic analysis. Since we are already using pytest , let's use pytest-cov , a plugin that reports test coverage. First, install and try to use it locally: Create another branch Install pytest-cov locally: pipenv install --dev pytest-cov Runs pytest with coverage report: pipenv run pytest --cov=app Now, let's add another job in the workflow for reporting coverage: From the test workflow, copy the steps before pytest Now, run pipenv run pytest --cov=app to report coverage Push and observe the new check running Bonus: report coverage in PRs \u00b6 The coverage job doesn't really add much to the workflow now since it doesn't fail. Without being too strict about coverage, we can at least display the coverage status in the PR. Somebody has already done it , so we can use it in our repo too. Hint : you should only need the last two steps in the workflow. Note that this action will only run on pull request-based workflows, so you will need to modify your triggers. If set up, the job will automatically comment on PRs with the coverage info:","title":"Recitation 7 - Static Analysis and Continuous Integration"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#recitation-7-static-analysis-and-continuous-integration","text":"Static and dynamic analysis tools help you keep the codebase healthy. In this recitation, we will learn how to set up these tools in CI (GitHub Actions).","title":"Recitation 7: Static Analysis and Continuous Integration"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#step-1-setup-your-sample-python-repo","text":"First, go to this template repo and use it to create your own repo. This repo should be very similar to something you've seen before, except it comes with a failing test. You already learned that it's a big no-no to push directly to main . We can actually enforce this using branch protect rules . Read the docs to understand what they are, and set the following rules: Requires a pull request before merging to main Requires tests to pass before merging to main : Search for the job name in the required checks (i.e. test in this case.) You may need to save the settings first before this search box appears. Your setting should look like this: The failing test cases \u274c wouldn\u2019t have been there if I had these rules enabled in the first place. Now, let's fix our failing test.","title":"Step 1: Setup your sample Python repo"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#step-2-fix-the-broken-ci","text":"The \u274c really shouldn't have been there in the first place if I had these rules enabled. Now let's fix it. Branch off from main and create a PR to fix the broken CI. Take a look in the Actions page to see which test is failing. Branch off from main and create a PR to fix the broken CI. (the fix should be VERY simple!) The test job should pass on your PR. Click \"Squash and merge\"* to merge after the status checks pass. *: It's just a lot cleaner than the default merge. HINT: If you are really stuck on how to fix, click here","title":"Step 2: Fix the broken CI"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#step-3-make-your-code-pretty","text":"Different tab sizes driving you crazy? Let's use a tool to standardize them all. A code formatter, a static analysis tool, helps one identify and fix formatting issues in the codebase. Let's use black as an example. First, create another branch for setting up a code formatter. Then, run the following commands to install it locally and try running it: pipenv install --dev black : black is only a development dependency . Your package doesn't actually use it. pipenv run black . --check : Runs black in the current directory. --check dry-runs black and don't alter any files. Observe some files on the list. pipenv run black . : This will actually change the files. Run git diff to observe the file changes. Using CI, we can enforce formatting requirements using the same GH Actions + status checks. For popular tools, someone has done it before, and you can reuse their workflow. Go to this existing black Actions on GH Marketplace Click \"Use latest version\" to see what needs to be added to .github/workflows/main.yml Add another job called \u201cformat\u201d to the main.yml file to use black to check the file formatting Push your formatted files to the branch and observe format passes. Squash and merge the PR","title":"Step 3: Make your code pretty"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#step-4-add-test-coverage-to-the-ci-workflow","text":"Finally, you can also do some dynamic analysis. Since we are already using pytest , let's use pytest-cov , a plugin that reports test coverage. First, install and try to use it locally: Create another branch Install pytest-cov locally: pipenv install --dev pytest-cov Runs pytest with coverage report: pipenv run pytest --cov=app Now, let's add another job in the workflow for reporting coverage: From the test workflow, copy the steps before pytest Now, run pipenv run pytest --cov=app to report coverage Push and observe the new check running","title":"Step 4: Add test coverage to the CI workflow"},{"location":"_old/F24/recitations/reci7-static-analysis-ci/#bonus-report-coverage-in-prs","text":"The coverage job doesn't really add much to the workflow now since it doesn't fail. Without being too strict about coverage, we can at least display the coverage status in the PR. Somebody has already done it , so we can use it in our repo too. Hint : you should only need the last two steps in the workflow. Note that this action will only run on pull request-based workflows, so you will need to modify your triggers. If set up, the job will automatically comment on PRs with the coverage info:","title":"Bonus: report coverage in PRs"},{"location":"_old/F24/recitations/reci8-llms/","text":"Recitation 8: Large Language Models \u00b6 Overview \u00b6 During this recitation, you will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Instructions \u00b6 For this recitation and Project 4, you'll be using the OpenAI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our Azure project to enable the API and create a copy of the Colab notebook. Note: if you have not yet set up Azure, please refer to the instructions from Recitation 7 . Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Follow the instructions in the notebook to set up Azure for LLM use. Have fun with the activity! Once you are done, submit the link to your Colab notebook and the answers to the two questions in Gradescope at this link .","title":"Recitation 8 - Large Language Models"},{"location":"_old/F24/recitations/reci8-llms/#recitation-8-large-language-models","text":"","title":"Recitation 8: Large Language Models"},{"location":"_old/F24/recitations/reci8-llms/#overview","text":"During this recitation, you will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"_old/F24/recitations/reci8-llms/#instructions","text":"For this recitation and Project 4, you'll be using the OpenAI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our Azure project to enable the API and create a copy of the Colab notebook. Note: if you have not yet set up Azure, please refer to the instructions from Recitation 7 . Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Follow the instructions in the notebook to set up Azure for LLM use. Have fun with the activity! Once you are done, submit the link to your Colab notebook and the answers to the two questions in Gradescope at this link .","title":"Instructions"},{"location":"_old/F24/recitations/reci8-team-feedback/","text":"Recitation 8: Team Feedback \u00b6 Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8 - Team Feedback"},{"location":"_old/F24/recitations/reci8-team-feedback/#recitation-8-team-feedback","text":"Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8: Team Feedback"},{"location":"_old/F24/recitations/reci9-ml/","text":"Recitation 9: Machine Learning \u00b6 Setup Instructions: \u00b6 Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup Overview \u00b6 During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Context \u00b6 You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb. Activity 1: Examine the Titanic Dataset (10 mins) \u00b6 The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it? Activity 2: Import and Analyze Models (5 min) \u00b6 We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section. Activity 3: Fairness Metrics Evaluation (15 mins) \u00b6 An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates. Activity 4: Recommendation (10 mins) \u00b6 Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Recitation 9 - Machine Learning"},{"location":"_old/F24/recitations/reci9-ml/#recitation-9-machine-learning","text":"","title":"Recitation 9:  Machine Learning"},{"location":"_old/F24/recitations/reci9-ml/#setup-instructions","text":"Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup","title":"Setup Instructions:"},{"location":"_old/F24/recitations/reci9-ml/#overview","text":"During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"_old/F24/recitations/reci9-ml/#context","text":"You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb.","title":"Context"},{"location":"_old/F24/recitations/reci9-ml/#activity-1-examine-the-titanic-dataset-10-mins","text":"The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it?","title":"Activity 1: Examine the Titanic Dataset (10 mins)"},{"location":"_old/F24/recitations/reci9-ml/#activity-2-import-and-analyze-models-5-min","text":"We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section.","title":"Activity 2: Import and Analyze Models (5 min)"},{"location":"_old/F24/recitations/reci9-ml/#activity-3-fairness-metrics-evaluation-15-mins","text":"An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates.","title":"Activity 3: Fairness Metrics Evaluation (15 mins)"},{"location":"_old/F24/recitations/reci9-ml/#activity-4-recommendation-10-mins","text":"Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Activity 4: Recommendation (10 mins)"},{"location":"_old/F24/recitations/reci9-open-source/","text":"Recitation 9: Open Source Projects \u00b6 Overview \u00b6 This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5. Context \u00b6 Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license Scavenger Hunt (30 min) \u00b6 Join the slide deck here made for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5. Reflection (10 min) \u00b6 With your team, discuss the following questions: * Which attributes make a good open source project? A bad open source project? * Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5. Public Project Selection \u00b6 Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet . Resources \u00b6 A list of good first issues: https://goodfirstissues.com/ Another list of good first issues: https://goodfirstissue.dev/ Another good first issue list: https://finder.eddiehub.io/ The GitHub page for the good-first-issue topic: https://github.com/topics/good-first-issue A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors Hall of Fame \u00b6 Here's some extra motivation for picking merging your final pull requests into your open source project! Explore some merged PRs in open source projects from previous semesters in the Hall of Fame .","title":"Recitation 9 - Open Source Projects"},{"location":"_old/F24/recitations/reci9-open-source/#recitation-9-open-source-projects","text":"","title":"Recitation 9: Open Source Projects"},{"location":"_old/F24/recitations/reci9-open-source/#overview","text":"This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5.","title":"Overview"},{"location":"_old/F24/recitations/reci9-open-source/#context","text":"Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license","title":"Context"},{"location":"_old/F24/recitations/reci9-open-source/#scavenger-hunt-30-min","text":"Join the slide deck here made for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5.","title":"Scavenger Hunt (30 min)"},{"location":"_old/F24/recitations/reci9-open-source/#reflection-10-min","text":"With your team, discuss the following questions: * Which attributes make a good open source project? A bad open source project? * Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5.","title":"Reflection (10 min)"},{"location":"_old/F24/recitations/reci9-open-source/#public-project-selection","text":"Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet .","title":"Public Project Selection"},{"location":"_old/F24/recitations/reci9-open-source/#resources","text":"A list of good first issues: https://goodfirstissues.com/ Another list of good first issues: https://goodfirstissue.dev/ Another good first issue list: https://finder.eddiehub.io/ The GitHub page for the good-first-issue topic: https://github.com/topics/good-first-issue A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Resources"},{"location":"_old/F24/recitations/reci9-open-source/#hall-of-fame","text":"Here's some extra motivation for picking merging your final pull requests into your open source project! Explore some merged PRs in open source projects from previous semesters in the Hall of Fame .","title":"Hall of Fame"},{"location":"_old/F24/recitations/reci9-team-feedback/","text":"Recitation 9: Team Feedback \u00b6 Overview \u00b6 During this recitation, you will review the feedback provided by your teammates, work with your team to identify and address issues on your team, and create a team action plan! Instructions \u00b6 Review the feedback provided in your individual feedback report. Discuss the evaluations and feedback report with your team members. Have one member of your team open and create a copy of the Team Feedback Discussions Handout found here . Click on File --> Save as copy in Drive to create a copy that your team will work on together. Click on Share and make sure the Google Doc is editable by anyone in Carnegie Mellon University. You will submit a link to this handout on Gradescope. Have the one team member who made a copy of the Team Feedback Discussions Handout share the link with the rest of your team Create a team action plan. Do so by following the instructions on the Team Feedback Discussions Handout. Do not forget to include the names of all team members who are present for these discussions at the top of your team action plan. Once you are done, make sure to submit a link to the handout with your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 9 - Team Feedback"},{"location":"_old/F24/recitations/reci9-team-feedback/#recitation-9-team-feedback","text":"","title":"Recitation 9: Team Feedback"},{"location":"_old/F24/recitations/reci9-team-feedback/#overview","text":"During this recitation, you will review the feedback provided by your teammates, work with your team to identify and address issues on your team, and create a team action plan!","title":"Overview"},{"location":"_old/F24/recitations/reci9-team-feedback/#instructions","text":"Review the feedback provided in your individual feedback report. Discuss the evaluations and feedback report with your team members. Have one member of your team open and create a copy of the Team Feedback Discussions Handout found here . Click on File --> Save as copy in Drive to create a copy that your team will work on together. Click on Share and make sure the Google Doc is editable by anyone in Carnegie Mellon University. You will submit a link to this handout on Gradescope. Have the one team member who made a copy of the Team Feedback Discussions Handout share the link with the rest of your team Create a team action plan. Do so by following the instructions on the Team Feedback Discussions Handout. Do not forget to include the names of all team members who are present for these discussions at the top of your team action plan. Once you are done, make sure to submit a link to the handout with your completed action plan on gradescope to receive participation credit for this recitation.","title":"Instructions"},{"location":"_old/F24/recitations/archive/reci2-angularjs/","text":"Recitation 2: Crash Course in Angular.js \u00b6 Overview \u00b6 This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment. Pre-requisites \u00b6 Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge Task 0: Fork the repl \u00b6 Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js Task 1: Setup Angular.js \u00b6 Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app> Task 2: Data Binding Basics \u00b6 Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time Task 3: Setting up the controller \u00b6 Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias Task 4: Rendering the list of todo items \u00b6 Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered Task 5: Adding new todo items \u00b6 Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\"> Task 6: Special styling for completed todo items \u00b6 Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Recitation 2 - Angular.js and MVC"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#recitation-2-crash-course-in-angularjs","text":"","title":"Recitation 2: Crash Course in Angular.js"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#overview","text":"This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment.","title":"Overview"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#pre-requisites","text":"Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge","title":"Pre-requisites"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-0-fork-the-repl","text":"Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js","title":"Task 0: Fork the repl"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-1-setup-angularjs","text":"Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app>","title":"Task 1: Setup Angular.js"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-2-data-binding-basics","text":"Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time","title":"Task 2: Data Binding Basics"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-3-setting-up-the-controller","text":"Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias","title":"Task 3: Setting up the controller"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-4-rendering-the-list-of-todo-items","text":"Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered","title":"Task 4: Rendering the list of todo items"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-5-adding-new-todo-items","text":"Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\">","title":"Task 5: Adding new todo items"},{"location":"_old/F24/recitations/archive/reci2-angularjs/#task-6-special-styling-for-completed-todo-items","text":"Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Task 6: Special styling for completed todo items"},{"location":"_old/F24/recitations/archive/reci3-deployment/","text":"Recitation 3: Deployment \u00b6 Overview \u00b6 Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Render and Google Cloud Platform. Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (9/19) lecture Definitions \u00b6 Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here! Task 0: Setting up your repository \u00b6 For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture. Task 1: Continuous Deployment \u00b6 To start off, you'll be deploying the app you just forked on two cloud platforms - Render and Google Cloud Platform. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository. Task 1A: Deploy on Render \u00b6 Create an account on Render Create a new Web Service Choose \"Build and deploy from a Git repository\" Click on Configure account under GitHub, to give Render access to your GitHub repositories - this is necessary to setup continuous deployment. Connect your basic-web-app fork to the Web Service you just created Name your web server <andrewID>-313 Set the Runtime to \"Node\", Build Command to npm install; npm run build and Start Command to npm start Make sure that the \"Free\" Instance Type is selected, and click \"Create Web Service\" When the build completes, click on the link of the form *.onrender.com at the top of the page to view the deployment. Task 1B: Deploy on Google Cloud Platform \u00b6 First, you need to redeem your GCP credits using the following instructions. Fill out the this form link with your first/last name, and Andrew ID Go to your school email and click the link in an email from \"Google Cloud Notifications\" to verify your email address Go back to your email, click on the link (\"click here to redeem\") within a second email from \"Google Cloud Notifications,\" and copy the provided code into the field within the new link Once you submit, a $50 credit should be applied to your GCP billing account. Do not misuse! We've been awarded enough credits such that each student in 17-313 can redeem one coupon. We'll be closely monitoring coupon redemption. Any and all misuse including sharing redemption instructions, redeeming multiple times, etc. will be punished. Now that you've redeemed your coupon, use the following instructions to deploy on GCP. Create a project called \"Extreme Startup\" using the GCP Cloud Console (you can set the location to \"Students\") Visit the Cloud Run console and select the project you just created using the project selector drop down(top-left) Click on \"Create Service\" Select \"Continuously deploy new revisions from a source repository\" and click \"Set up with Cloud Build\" Set the Source repository to be your basic-web-app fork - you may need to click on \"Manage connected repositories\" and authenticate with GitHub if you don't see the repository. Set the Build Type to the \"Go, Node.js, Python, ...\" option Set the Entrypoint to be npm install; npm run build; npm start In the \"Authentication\" section select \"Allow unauthenticated invocations\" and hit \"Create\" Once the deployment is complete, click on the URL of the form *.run.app at the top of the page to view the deployment. With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed on both Render and GCP. Cool! Task 2: Implement \"What is your Andrew ID?\" \u00b6 To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented. Bonus Task: Continuous Integration \u00b6 While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 3 Quiz on Gradescope!","title":"Recitation 3: Deployment"},{"location":"_old/F24/recitations/archive/reci3-deployment/#recitation-3-deployment","text":"","title":"Recitation 3: Deployment"},{"location":"_old/F24/recitations/archive/reci3-deployment/#overview","text":"Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Render and Google Cloud Platform. Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (9/19) lecture","title":"Overview"},{"location":"_old/F24/recitations/archive/reci3-deployment/#definitions","text":"Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here!","title":"Definitions"},{"location":"_old/F24/recitations/archive/reci3-deployment/#task-0-setting-up-your-repository","text":"For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture.","title":"Task 0: Setting up your repository"},{"location":"_old/F24/recitations/archive/reci3-deployment/#task-1-continuous-deployment","text":"To start off, you'll be deploying the app you just forked on two cloud platforms - Render and Google Cloud Platform. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository.","title":"Task 1: Continuous Deployment"},{"location":"_old/F24/recitations/archive/reci3-deployment/#task-1a-deploy-on-render","text":"Create an account on Render Create a new Web Service Choose \"Build and deploy from a Git repository\" Click on Configure account under GitHub, to give Render access to your GitHub repositories - this is necessary to setup continuous deployment. Connect your basic-web-app fork to the Web Service you just created Name your web server <andrewID>-313 Set the Runtime to \"Node\", Build Command to npm install; npm run build and Start Command to npm start Make sure that the \"Free\" Instance Type is selected, and click \"Create Web Service\" When the build completes, click on the link of the form *.onrender.com at the top of the page to view the deployment.","title":"Task 1A: Deploy on Render"},{"location":"_old/F24/recitations/archive/reci3-deployment/#task-1b-deploy-on-google-cloud-platform","text":"First, you need to redeem your GCP credits using the following instructions. Fill out the this form link with your first/last name, and Andrew ID Go to your school email and click the link in an email from \"Google Cloud Notifications\" to verify your email address Go back to your email, click on the link (\"click here to redeem\") within a second email from \"Google Cloud Notifications,\" and copy the provided code into the field within the new link Once you submit, a $50 credit should be applied to your GCP billing account. Do not misuse! We've been awarded enough credits such that each student in 17-313 can redeem one coupon. We'll be closely monitoring coupon redemption. Any and all misuse including sharing redemption instructions, redeeming multiple times, etc. will be punished. Now that you've redeemed your coupon, use the following instructions to deploy on GCP. Create a project called \"Extreme Startup\" using the GCP Cloud Console (you can set the location to \"Students\") Visit the Cloud Run console and select the project you just created using the project selector drop down(top-left) Click on \"Create Service\" Select \"Continuously deploy new revisions from a source repository\" and click \"Set up with Cloud Build\" Set the Source repository to be your basic-web-app fork - you may need to click on \"Manage connected repositories\" and authenticate with GitHub if you don't see the repository. Set the Build Type to the \"Go, Node.js, Python, ...\" option Set the Entrypoint to be npm install; npm run build; npm start In the \"Authentication\" section select \"Allow unauthenticated invocations\" and hit \"Create\" Once the deployment is complete, click on the URL of the form *.run.app at the top of the page to view the deployment. With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed on both Render and GCP. Cool!","title":"Task 1B: Deploy on Google Cloud Platform"},{"location":"_old/F24/recitations/archive/reci3-deployment/#task-2-implement-what-is-your-andrew-id","text":"To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented.","title":"Task 2: Implement \"What is your Andrew ID?\""},{"location":"_old/F24/recitations/archive/reci3-deployment/#bonus-task-continuous-integration","text":"While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 3 Quiz on Gradescope!","title":"Bonus Task: Continuous Integration"},{"location":"_old/F24/recitations/archive/reci6-midterm-review/","text":"Recitation 6: Midterm Review \u00b6 Overview \u00b6 As we have our midterm scheduled for Tuesday, October 10th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam. Exams \u00b6 Fall 2020 Fall 2021 Fall 2022","title":"Recitation 6 - Midterm Review"},{"location":"_old/F24/recitations/archive/reci6-midterm-review/#recitation-6-midterm-review","text":"","title":"Recitation 6: Midterm Review"},{"location":"_old/F24/recitations/archive/reci6-midterm-review/#overview","text":"As we have our midterm scheduled for Tuesday, October 10th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam.","title":"Overview"},{"location":"_old/F24/recitations/archive/reci6-midterm-review/#exams","text":"Fall 2020 Fall 2021 Fall 2022","title":"Exams"},{"location":"projects/","text":"Coming soon!","title":"Homework"},{"location":"projects/P1/","text":"Project 1: Hello, NodeBB! \u00b6 Learning Goals \u00b6 Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase Project Context \u00b6 Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project. Deliverables and Deadlines \u00b6 This is an individual assignment . There are four (4) deliverables and two (2) deadlines for this homework. A) Build Checkpoint - 5 points - due Friday, January 17th, 11:59pm B) Starter Task - 95 points - due Thursday, January 23rd, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Project 1: Hello, NodeBB!"},{"location":"projects/P1/#project-1-hello-nodebb","text":"","title":"Project 1: Hello, NodeBB!"},{"location":"projects/P1/#learning-goals","text":"Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase","title":"Learning Goals"},{"location":"projects/P1/#project-context","text":"Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project.","title":"Project Context"},{"location":"projects/P1/#deliverables-and-deadlines","text":"This is an individual assignment . There are four (4) deliverables and two (2) deadlines for this homework. A) Build Checkpoint - 5 points - due Friday, January 17th, 11:59pm B) Starter Task - 95 points - due Thursday, January 23rd, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P1/1_checkpoint/","text":"Project 1A: Build Checkpoint \u00b6 Deliverables \u00b6 Build Checkpoint \u2013 5 points \u2013 due Friday, January 17th, 11:59pm Getting Started \u00b6 Repository Setup \u00b6 Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Devcontainers Note: if you are having problems with installing directly on your machine, you might want to try installing using a development container. See instructions for that here: development container instructions Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer. Lint and Test \u00b6 When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! You can run the linter and test suite using the following two commands: npm run lint npm run test The first time you run the above commands, you may have to run npm install to fetch dependencies and also edit your config.json file to add test dependencies. See the FAQ page for more. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code. Build Checkpoint (5 pts) \u00b6 Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope . Grading \u00b6 To receive full credit for this checkpoint, we expect: A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser","title":"1A Build Checkpoint"},{"location":"projects/P1/1_checkpoint/#project-1a-build-checkpoint","text":"","title":"Project 1A: Build Checkpoint"},{"location":"projects/P1/1_checkpoint/#deliverables","text":"Build Checkpoint \u2013 5 points \u2013 due Friday, January 17th, 11:59pm","title":"Deliverables"},{"location":"projects/P1/1_checkpoint/#getting-started","text":"","title":"Getting Started"},{"location":"projects/P1/1_checkpoint/#repository-setup","text":"Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Devcontainers Note: if you are having problems with installing directly on your machine, you might want to try installing using a development container. See instructions for that here: development container instructions Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer.","title":"Repository Setup"},{"location":"projects/P1/1_checkpoint/#lint-and-test","text":"When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! You can run the linter and test suite using the following two commands: npm run lint npm run test The first time you run the above commands, you may have to run npm install to fetch dependencies and also edit your config.json file to add test dependencies. See the FAQ page for more. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code.","title":"Lint and Test"},{"location":"projects/P1/1_checkpoint/#build-checkpoint-5-pts","text":"Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope .","title":"Build Checkpoint (5 pts)"},{"location":"projects/P1/1_checkpoint/#grading","text":"To receive full credit for this checkpoint, we expect: A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser","title":"Grading"},{"location":"projects/P1/2_refactoring/","text":"Project 1B: Starter Task \u00b6 Deliverables \u00b6 Starter Task - 95 points - due Thursday, January 23rd, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts) Onboarding \u00b6 Now that you have explored the repository, the development team would like to give you an onboarding assignment. The team has noticed an accumulation of warnings in SonarCloud , a continuous code quality inspection tool. Your task is to remove SonarCloud warnings by refactoring code and validating that your change takes effect within the NodeBB codebase. Prerequisites \u00b6 Onboarding Materials \u00b6 Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors. Git & GitHub \u00b6 In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete Recitation 2 - Git, GitHub, as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed. GitHub Issue (20 pts) \u00b6 First, choose a single file that has SonarCloud warning(s) and open a github issue in the class repository to declare which file and SonarCloud warning(s) that you will be working on. For the task, the file must Be a Javascript file. Be in the src/ folder. Be a file that no one else in the class has picked and created an issue for. We expect you to look through existing open issues, if any, to avoid such duplication; thus, there is an incentive for you to start early! If you really can't find a unique file because you are late to the game, then you may pick a file that has an open issue, but then identify a separate SonarCloud warning in the same file. You can reference the other issue in your description to distinguish yourself (e.g., \"this is different from #123 because...\"). The SonarCloud warning must be categorized under the Adaptability section and contain the \"Refactor\" key word. The goal of this task is to refactor code in the NodeBB codebase based on the specifications of the SonarCloud warning. Title the task appropriately, such as Refactoring code in <file name> , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Additionally, within the issue description, be sure to include an explanation of the SonarCloud warnings that you are working on. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more. Task (10 pts) \u00b6 For this task, you will focus on refactoring the code and removing all the corresponding SonarCloud warning(s) from your chosen file. As part of the task, you would also need to validate your changes for one SonarCloud warning utilizing code coverage and running a NodeBB instance. Back in your own fork, create a feature branch and implement the changes needed to address the SonarCloud warnings. You should start with the following steps: Review the SonarCloud warnings for the file. Identify the necessary code changes to address each warning. Implement the changes and ensure that they do not introduce new warnings or issues. Run the linter and test suite to ensure your changes pass all checks. NOTE : because of recent changes to SonarCloud, you are not required to ensure the warning has been removed as per this paragraph: You can check that your refactored code removes the warning by following the SonarCloud links automatically generated in the PR after the checks are run. You could also go to SonarCloud's Pull Request list and search for your PR there. ~~ For the validation part of the task, you only need to validate the refactored code you have worked on for one SonarCloud warning in the file you chose. You should examine the code coverage report (either the local HTML report or the online one generated by CoverAlls when you make a pull request) to ensure that the refactored code are included in the test coverage. If not, continue with the following steps: Locate the tests that are currently covering that file. Write tests that will add coverage to the refactored code you've written. All new tests added by you must pass. The tests that you write should be similar to the existing tests (e.g., do not introduce a new testing framework). We also want you to manually test your changes in a running NodeBB instance. The purpose is to trigger the refactored code's execution from the user interface (UI) with the following steps: Within your implementation, add a print statement (e.g. console.log(YOUR_NAME)) immediately before, after, or in the middle of your refactored code. Restart the NodeBB instance and watch its logs via ./nodebb log . Perform any necessary UI operations that execute the refactored code (e.g. clicking buttons for an action) Take a screenshot of these logs to include within your report with an explanation of the steps taken to trigger the code. GitHub Pull Request (25 pts) \u00b6 As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. You should ensure that all checks including SonarCloud Quality Gate as well as Lint & Test are green. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705 Written Assignment (40 pts) \u00b6 After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope. Grading \u00b6 To receive full credit for this project, we expect: A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB","title":"1B Starter Task"},{"location":"projects/P1/2_refactoring/#project-1b-starter-task","text":"","title":"Project 1B: Starter Task"},{"location":"projects/P1/2_refactoring/#deliverables","text":"Starter Task - 95 points - due Thursday, January 23rd, 11:59PM GitHub Issue (20 pts) Code Refactoring and Validation (10 pts) GitHub Pull Request (25 pts) Gradescope Written Assignment (40 pts)","title":"Deliverables"},{"location":"projects/P1/2_refactoring/#onboarding","text":"Now that you have explored the repository, the development team would like to give you an onboarding assignment. The team has noticed an accumulation of warnings in SonarCloud , a continuous code quality inspection tool. Your task is to remove SonarCloud warnings by refactoring code and validating that your change takes effect within the NodeBB codebase.","title":"Onboarding"},{"location":"projects/P1/2_refactoring/#prerequisites","text":"","title":"Prerequisites"},{"location":"projects/P1/2_refactoring/#onboarding-materials","text":"Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors.","title":"Onboarding Materials"},{"location":"projects/P1/2_refactoring/#git-github","text":"In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete Recitation 2 - Git, GitHub, as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed.","title":"Git &amp; GitHub"},{"location":"projects/P1/2_refactoring/#github-issue-20-pts","text":"First, choose a single file that has SonarCloud warning(s) and open a github issue in the class repository to declare which file and SonarCloud warning(s) that you will be working on. For the task, the file must Be a Javascript file. Be in the src/ folder. Be a file that no one else in the class has picked and created an issue for. We expect you to look through existing open issues, if any, to avoid such duplication; thus, there is an incentive for you to start early! If you really can't find a unique file because you are late to the game, then you may pick a file that has an open issue, but then identify a separate SonarCloud warning in the same file. You can reference the other issue in your description to distinguish yourself (e.g., \"this is different from #123 because...\"). The SonarCloud warning must be categorized under the Adaptability section and contain the \"Refactor\" key word. The goal of this task is to refactor code in the NodeBB codebase based on the specifications of the SonarCloud warning. Title the task appropriately, such as Refactoring code in <file name> , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Additionally, within the issue description, be sure to include an explanation of the SonarCloud warnings that you are working on. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more.","title":"GitHub Issue (20 pts)"},{"location":"projects/P1/2_refactoring/#task-10-pts","text":"For this task, you will focus on refactoring the code and removing all the corresponding SonarCloud warning(s) from your chosen file. As part of the task, you would also need to validate your changes for one SonarCloud warning utilizing code coverage and running a NodeBB instance. Back in your own fork, create a feature branch and implement the changes needed to address the SonarCloud warnings. You should start with the following steps: Review the SonarCloud warnings for the file. Identify the necessary code changes to address each warning. Implement the changes and ensure that they do not introduce new warnings or issues. Run the linter and test suite to ensure your changes pass all checks. NOTE : because of recent changes to SonarCloud, you are not required to ensure the warning has been removed as per this paragraph: You can check that your refactored code removes the warning by following the SonarCloud links automatically generated in the PR after the checks are run. You could also go to SonarCloud's Pull Request list and search for your PR there. ~~ For the validation part of the task, you only need to validate the refactored code you have worked on for one SonarCloud warning in the file you chose. You should examine the code coverage report (either the local HTML report or the online one generated by CoverAlls when you make a pull request) to ensure that the refactored code are included in the test coverage. If not, continue with the following steps: Locate the tests that are currently covering that file. Write tests that will add coverage to the refactored code you've written. All new tests added by you must pass. The tests that you write should be similar to the existing tests (e.g., do not introduce a new testing framework). We also want you to manually test your changes in a running NodeBB instance. The purpose is to trigger the refactored code's execution from the user interface (UI) with the following steps: Within your implementation, add a print statement (e.g. console.log(YOUR_NAME)) immediately before, after, or in the middle of your refactored code. Restart the NodeBB instance and watch its logs via ./nodebb log . Perform any necessary UI operations that execute the refactored code (e.g. clicking buttons for an action) Take a screenshot of these logs to include within your report with an explanation of the steps taken to trigger the code.","title":"Task (10 pts)"},{"location":"projects/P1/2_refactoring/#github-pull-request-25-pts","text":"As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. You should ensure that all checks including SonarCloud Quality Gate as well as Lint & Test are green. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705","title":"GitHub Pull Request (25 pts)"},{"location":"projects/P1/2_refactoring/#written-assignment-40-pts","text":"After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope.","title":"Written Assignment (40 pts)"},{"location":"projects/P1/2_refactoring/#grading","text":"To receive full credit for this project, we expect: A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB","title":"Grading"},{"location":"projects/P1/developmentContainer/","text":"Development Container Installation Instructions \u00b6 You might want to consider running NodeBB in a VSCode Development container. These are step by step instructions on how to configure a development container on a Mac, more documentation for Windows is available here: https://code.visualstudio.com/docs/devcontainers/containers First, You should follow the instructions here to install docker and development containers for vscode: https://code.visualstudio.com/docs/devcontainers/tutorial When you are done, you should be able to run the example in that tutorial. After that, Clone the repo from your fork of the class repository: > git clone git@github.com:CMU-313/NodeBB.git Cloning into 'NodeBB'... remote: Enumerating objects: 280535, done. remote: Counting objects: 100% (1389/1389), done. remote: Compressing objects: 100% (1237/1237), done. remote: Total 280535 (delta 135), reused 1304 (delta 122), pack-reused 279146 (from 1) Receiving objects: 100% (280535/280535), 83.62 MiB | 12.54 MiB/s, done. Resolving deltas: 100% (222305/222305), done. Next, open the directory you just created with vscode. You can do this in the UI, but if you have launching from the command line enabled ( https://code.visualstudio.com/docs/setup/mac ) then you can use the command: Command: code . This should open vscode as such: If you followed the tutorial correctly, you will see a blue square in the bottom left corner: Click on that, and it will open this menu: From there, choose \u201cReopen in Container\u201d It will take a little while for that to run, then it should restart VSCode and you will see this in the bottom left: Now go to the menu, and select Terminal -> New Terminal Now you will see an integrated terminal window. You should be able to check the node version and npm version also: Now you have access to the NodeBB files, but you should follow the Linux instructions, EVEN IF YOU ARE RUNNING ON A MAC OR WINDOWS COMPUTER.","title":"Development Container Installation Instructions"},{"location":"projects/P1/developmentContainer/#development-container-installation-instructions","text":"You might want to consider running NodeBB in a VSCode Development container. These are step by step instructions on how to configure a development container on a Mac, more documentation for Windows is available here: https://code.visualstudio.com/docs/devcontainers/containers First, You should follow the instructions here to install docker and development containers for vscode: https://code.visualstudio.com/docs/devcontainers/tutorial When you are done, you should be able to run the example in that tutorial. After that, Clone the repo from your fork of the class repository: > git clone git@github.com:CMU-313/NodeBB.git Cloning into 'NodeBB'... remote: Enumerating objects: 280535, done. remote: Counting objects: 100% (1389/1389), done. remote: Compressing objects: 100% (1237/1237), done. remote: Total 280535 (delta 135), reused 1304 (delta 122), pack-reused 279146 (from 1) Receiving objects: 100% (280535/280535), 83.62 MiB | 12.54 MiB/s, done. Resolving deltas: 100% (222305/222305), done. Next, open the directory you just created with vscode. You can do this in the UI, but if you have launching from the command line enabled ( https://code.visualstudio.com/docs/setup/mac ) then you can use the command: Command: code . This should open vscode as such: If you followed the tutorial correctly, you will see a blue square in the bottom left corner: Click on that, and it will open this menu: From there, choose \u201cReopen in Container\u201d It will take a little while for that to run, then it should restart VSCode and you will see this in the bottom left: Now go to the menu, and select Terminal -> New Terminal Now you will see an integrated terminal window. You should be able to check the node version and npm version also: Now you have access to the NodeBB files, but you should follow the Linux instructions, EVEN IF YOU ARE RUNNING ON A MAC OR WINDOWS COMPUTER.","title":"Development Container Installation Instructions"},{"location":"projects/P1/documentation/","text":"Resources & Documentation \u00b6 Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours. Git & GitHub Documentation \u00b6 Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project. NodeBB Documentation \u00b6 The official NodeBB documentation is available at https://docs.nodebb.org. The CMU-313 snapshot is a fork of v3.8.4. When developing with NodeBB, the following documentation about internal REST API endpoints might be helpful: Read API Write API If you want to run HTTP requests to interact with the REST API of a running NodeBB instance (e.g., on localhost ), then you can use the curl tool to issue HTTP requests via the command-line. Tutorial on using curl for testing a REST API","title":"Resources and Documentation"},{"location":"projects/P1/documentation/#resources-documentation","text":"Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours.","title":"Resources &amp; Documentation"},{"location":"projects/P1/documentation/#git-github-documentation","text":"Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project.","title":"Git &amp; GitHub Documentation"},{"location":"projects/P1/documentation/#nodebb-documentation","text":"The official NodeBB documentation is available at https://docs.nodebb.org. The CMU-313 snapshot is a fork of v3.8.4. When developing with NodeBB, the following documentation about internal REST API endpoints might be helpful: Read API Write API If you want to run HTTP requests to interact with the REST API of a running NodeBB instance (e.g., on localhost ), then you can use the curl tool to issue HTTP requests via the command-line. Tutorial on using curl for testing a REST API","title":"NodeBB Documentation"},{"location":"projects/P1/faq/","text":"Frequently Asked Questions \u00b6 This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released! Installation and Running the Instance \u00b6 I'm running into errors about missing files when running ./nodebb start ! \u00b6 Try re-building some of the assets by running ./nodebb build first, then try running the start command again. I can't start a NodeBB instance and I get an error message saying that port 4567 is already in use. \u00b6 Maybe you have another NodeBB instance already running. Try stopping it via ./nodebb stop . Otherwise, try using a differnt port. Analysis Tools \u00b6 I can't run the test or lint commands because I have missing dependencies. \u00b6 Run npm install after ./nodebb setup to make sure you have all the dependencies needed for running tests. Running the test suite stops immediately and throws a bunch of errors! \u00b6 This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file under the \"test_database\" field. For redis: if you are using database 0 for running the local instance, you can use database 1 for testing so that the test data remains separate. Reset \u00b6 How do I reset my NodeBB configurations? \u00b6 Delete the config.json file and re-run the ./nodebb setup command. How do I reset my NodeBB database? \u00b6 Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"FAQ"},{"location":"projects/P1/faq/#frequently-asked-questions","text":"This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released!","title":"Frequently Asked Questions"},{"location":"projects/P1/faq/#installation-and-running-the-instance","text":"","title":"Installation and Running the Instance"},{"location":"projects/P1/faq/#im-running-into-errors-about-missing-files-when-running-nodebb-start","text":"Try re-building some of the assets by running ./nodebb build first, then try running the start command again.","title":"I'm running into errors about missing files when running ./nodebb start!"},{"location":"projects/P1/faq/#i-cant-start-a-nodebb-instance-and-i-get-an-error-message-saying-that-port-4567-is-already-in-use","text":"Maybe you have another NodeBB instance already running. Try stopping it via ./nodebb stop . Otherwise, try using a differnt port.","title":"I can't start a NodeBB instance and I get an error message saying that port 4567 is already in use."},{"location":"projects/P1/faq/#analysis-tools","text":"","title":"Analysis Tools"},{"location":"projects/P1/faq/#i-cant-run-the-test-or-lint-commands-because-i-have-missing-dependencies","text":"Run npm install after ./nodebb setup to make sure you have all the dependencies needed for running tests.","title":"I can't run the test or lint commands because I have missing dependencies."},{"location":"projects/P1/faq/#running-the-test-suite-stops-immediately-and-throws-a-bunch-of-errors","text":"This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file under the \"test_database\" field. For redis: if you are using database 0 for running the local instance, you can use database 1 for testing so that the test data remains separate.","title":"Running the test suite stops immediately and throws a bunch of errors!"},{"location":"projects/P1/faq/#reset","text":"","title":"Reset"},{"location":"projects/P1/faq/#how-do-i-reset-my-nodebb-configurations","text":"Delete the config.json file and re-run the ./nodebb setup command.","title":"How do I reset my NodeBB configurations?"},{"location":"projects/P1/faq/#how-do-i-reset-my-nodebb-database","text":"Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"How do I reset my NodeBB database?"},{"location":"projects/P1/github/","text":"GitHub Exercise \u00b6 Overview \u00b6 The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning. Prerequisites \u00b6 You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics Forking a Repository \u00b6 Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine. Running a GitHub Action Workflow \u00b6 On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product. Setting up a Project Board \u00b6 Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository. Creating Issues \u00b6 Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects! Branching, Committing, and Pushing \u00b6 On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name> Writing Pull Requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes. Check GitHub Actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"GitHub Exercise"},{"location":"projects/P1/github/#github-exercise","text":"","title":"GitHub Exercise"},{"location":"projects/P1/github/#overview","text":"The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning.","title":"Overview"},{"location":"projects/P1/github/#prerequisites","text":"You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics","title":"Prerequisites"},{"location":"projects/P1/github/#forking-a-repository","text":"Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine.","title":"Forking a Repository"},{"location":"projects/P1/github/#running-a-github-action-workflow","text":"On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product.","title":"Running a GitHub Action Workflow"},{"location":"projects/P1/github/#setting-up-a-project-board","text":"Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository.","title":"Setting up a Project Board"},{"location":"projects/P1/github/#creating-issues","text":"Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects!","title":"Creating Issues"},{"location":"projects/P1/github/#branching-committing-and-pushing","text":"On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name>","title":"Branching, Committing, and Pushing"},{"location":"projects/P1/github/#writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes.","title":"Writing Pull Requests"},{"location":"projects/P1/github/#check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"Check GitHub Actions"},{"location":"projects/P1/installation/mac/","text":"Installing NodeBB on MacOS \u00b6 Required Software \u00b6 First, install the following programs: http://nodejs.org/ http://brew.sh/ Installing Redis \u00b6 Install redis with homebrew: % brew install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Mac"},{"location":"projects/P1/installation/mac/#installing-nodebb-on-macos","text":"","title":"Installing NodeBB on MacOS"},{"location":"projects/P1/installation/mac/#required-software","text":"First, install the following programs: http://nodejs.org/ http://brew.sh/","title":"Required Software"},{"location":"projects/P1/installation/mac/#installing-redis","text":"Install redis with homebrew: % brew install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"projects/P1/installation/mac/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"projects/P1/installation/ubuntu/","text":"Installing on Ubuntu \u00b6 Required Software \u00b6 Installing Node.js \u00b6 Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs npm Verify installation of Node.js and npm by checking their installed versions. % node -v # ideally v18.x or v20.x % npm -v # ideally 9.x or above Installing Redis \u00b6 The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Linux (Ubuntu)"},{"location":"projects/P1/installation/ubuntu/#installing-on-ubuntu","text":"","title":"Installing on Ubuntu"},{"location":"projects/P1/installation/ubuntu/#required-software","text":"","title":"Required Software"},{"location":"projects/P1/installation/ubuntu/#installing-nodejs","text":"Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs npm Verify installation of Node.js and npm by checking their installed versions. % node -v # ideally v18.x or v20.x % npm -v # ideally 9.x or above","title":"Installing Node.js"},{"location":"projects/P1/installation/ubuntu/#installing-redis","text":"The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"projects/P1/installation/ubuntu/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"projects/P1/installation/windows/","text":"Installing NodeBB on Windows \u00b6 17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation . Installing WSL2 on Windows \u00b6 Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation. Installing NodeBB \u00b6 If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Windows"},{"location":"projects/P1/installation/windows/#installing-nodebb-on-windows","text":"17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation .","title":"Installing NodeBB on Windows"},{"location":"projects/P1/installation/windows/#installing-wsl2-on-windows","text":"Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation.","title":"Installing WSL2 on Windows"},{"location":"projects/P1/installation/windows/#installing-nodebb","text":"If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Installing NodeBB"},{"location":"projects/P2/","text":"Project 2: Collaborative Development \u00b6 Learning Goals \u00b6 Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams Project Context \u00b6 CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation. Deliverables and Deadlines \u00b6 This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Spring Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 70 points \u2013 due Thursday, January 30th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) B) First Sprint \u2013 95 points \u2013 due Tuesday, February 11th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday Feburary 12th C) Second Sprint \u2013 110 points \u2013 due Thursday, February 27th, 11:59pm Process & Implementation Final Snapshot (50 pts) Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Project 2: Collaborative Development"},{"location":"projects/P2/#project-2-collaborative-development","text":"","title":"Project 2: Collaborative Development"},{"location":"projects/P2/#learning-goals","text":"Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams","title":"Learning Goals"},{"location":"projects/P2/#project-context","text":"CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation.","title":"Project Context"},{"location":"projects/P2/#deliverables-and-deadlines","text":"This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Spring Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 70 points \u2013 due Thursday, January 30th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) B) First Sprint \u2013 95 points \u2013 due Tuesday, February 11th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday Feburary 12th C) Second Sprint \u2013 110 points \u2013 due Thursday, February 27th, 11:59pm Process & Implementation Final Snapshot (50 pts) Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P2/1_teamprocess/","text":"Project 2A: Collaborative Development \u00b6 Deliverables \u00b6 Team Process & Planning \u2013 70 points \u2013 due Thursday, January 30th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts) Team Setup \u00b6 Slack Channel \u00b6 On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester. GitHub Repository \u00b6 You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/fBWN52gG Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the note below). Setting up a Project Kanban Board and Creating Issues Project boards are a great way to track development. While there are lots of great external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. To create a Project Kanban follow the steps below: Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have a teammate create an issue for adding team member names to the README Assign yourself to the issue, and add the issues to the project Kanban board you just created under the \"Todo\" column using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your team or make it public so they have access to it. You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope. Teamwork Self-Assessment \u00b6 As the course moves into team-based projects, we will be releasing weekly self-assessments, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, January 31th and due the following Friday, February 7th (both at 11:59pm). Main Deliverables \u00b6 Teamwork Contract (35 pts) \u00b6 When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel. Project Planning (35 pts) \u00b6 Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below. Functional Requirements - User Stories \u00b6 During this meeting, discuss potential functional requirements of this project. Consider what possible use cases may be for this system and what features it should have to fulfill those needs. Then, document these functional requirements in the form of user stories that follow the guidelines discussed in lecture. All of your user stories should be in the format of \"As a [role], I want [function], so that [value]\". You should come up with at least two user stories per student in your group. Formulating User Stories Consider what are the different types of users that will be interacting with your system (your stakeholders) and what features they would want to have that the current NodeBB does not provide. You may want to reference features in existing Q&A systems (e.g. Piazza, Diderot) that may be desirable, or conduct interviews with your peers who could be a potential users of this system. As a team, you should then come up with a prioritization ranking for each user story. The prioritization should be based on two factors Impact : how essential is this user story to the overall functionality of the application to your stakeholders, how beneficial it would be to your stakeholders, and Effort : how much time/effort is required to implement this user story Once you have your list of user stories, create a new GitHub Project board (click into Projects on your team repository). Then create two new columns to the left called \"User Stories\" and \"Backlog\" . At this point in time, you should have \"User Stories\", \"Backlog\", \"To-Do\", \"In Progress\" and \"Done\" , in that order from left to right. Feel free to add more columns if your teams decide that you need them during your development process Add your user stories into the \"User Stories\" column using the \u201c+ Add item\u201d button at the bottom, create draft issues for each of your user stories.In the body of each of these draft issues, provide a brief but concrete justification of its prioritization ranking that your team decided on. You should order all the user stories in this column from highest to lowest priority. Technical Requirements - Issues \u00b6 Now that you have your prioritized list, consider the technical requirements of the various user stories and collectively decide on which one(s) you will be focusing on over the next two sprints. In this project (as like most projects), your team is aiming to maximize the amount of value you are delivering to your stakeholders given your constraints. Your selected user stories should have relatively high priority based on your team's ranking, and you should actively take factors into consideration that may impact your development. Selecting Appropriate User Stories Given the amount of variations in each team's user stories, it's hard to give concrete guideline on the number of user stories that a team needs to tackle. Teams could tackle 1 user story that requires major effort, or a few user stories that each requires lesser effort. In general, we are expecting that user stories be selected given: 2 sprints of 2 weeks each number of team members on your team assumption of 8 hours/week available per individual The course staff is happy to discuss this with your team during OH and we highly recommend you do so if your team is unsure. We will also be providing you with feedback during your first sprint's checkpoint presentation . The feature(s) you plan to implement should not be purely cosmetic or arbitrary. We expect this to be a non-issue as most high priority features to make NodeBB usable in a course environment would require changes that span across the development stack. Note An example of what would not be accepted is a cosmetic feature that only modifies a frontend UI component (i.e. changing the color of the navbar), or just the renaming of a field in the database. You may want to look ahead into parts 2B and 2C to check our specific requirements for your implementation. Convert the feature(s) you decide to implement into technical requirements (i.e. what needs to be developed for this feature to work). Then, break these requirements down into manageable, assignable issues and document them on your Project board by adding them to \u201cBacklog\u201d column. At minimum, these issues should make use of GitHub features like milestones/labels/descriptions to denote: Estimated effort for each task Dependencies among tasks (if any) Initial assignments for team members Milestones to indicate which sprint the issue should be completed in (Sprint 1, Sprint 2, Stretch) Acceptance criteria that describes how you know this task is done - think about how you will test this feature You should actively assign and move these issues across your Kanban board as your team makes progress. A Note on Grading We will not assess how accurately you predicted your development process, nor will we be giving points based on the complexity or quality of your changes. The focus of our evaluations will be on how you decompose the problem, how you respond to unexpected circumstances, and how you analyze and reflect on your experience later on. We will check your development progress at the end of each sprint. Please be proactive in your planning to ensure that you make notable progress in both of your sprints. We highly recommend reading ahead on what our expectations are for the end of each sprint as you plan your milestone goals. Include a link to your GitHub board in your Gradescope submission. If you are unsure about your planned changes, you can ask for feedback from a member of the course staff! Extra Credit (7 pts) \u00b6 Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester! Grading \u00b6 To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"2A Team Process & Planning"},{"location":"projects/P2/1_teamprocess/#project-2a-collaborative-development","text":"","title":"Project 2A: Collaborative Development"},{"location":"projects/P2/1_teamprocess/#deliverables","text":"Team Process & Planning \u2013 70 points \u2013 due Thursday, January 30th, 11:59pm Prerequisite: Team Setup Teamwork Contract (35 pts) Project Planning (35 pts) Extra Credit (7 pts)","title":"Deliverables"},{"location":"projects/P2/1_teamprocess/#team-setup","text":"","title":"Team Setup"},{"location":"projects/P2/1_teamprocess/#slack-channel","text":"On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester.","title":"Slack Channel"},{"location":"projects/P2/1_teamprocess/#github-repository","text":"You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/fBWN52gG Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the note below). Setting up a Project Kanban Board and Creating Issues Project boards are a great way to track development. While there are lots of great external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. To create a Project Kanban follow the steps below: Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have a teammate create an issue for adding team member names to the README Assign yourself to the issue, and add the issues to the project Kanban board you just created under the \"Todo\" column using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your team or make it public so they have access to it. You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope.","title":"GitHub Repository"},{"location":"projects/P2/1_teamprocess/#teamwork-self-assessment","text":"As the course moves into team-based projects, we will be releasing weekly self-assessments, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, January 31th and due the following Friday, February 7th (both at 11:59pm).","title":"Teamwork Self-Assessment"},{"location":"projects/P2/1_teamprocess/#main-deliverables","text":"","title":"Main Deliverables"},{"location":"projects/P2/1_teamprocess/#teamwork-contract-35-pts","text":"When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel.","title":"Teamwork Contract (35 pts)"},{"location":"projects/P2/1_teamprocess/#project-planning-35-pts","text":"Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below.","title":"Project Planning (35 pts)"},{"location":"projects/P2/1_teamprocess/#extra-credit-7-pts","text":"Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester!","title":"Extra Credit (7 pts)"},{"location":"projects/P2/1_teamprocess/#grading","text":"To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"Grading"},{"location":"projects/P2/2_firstsprint/","text":"Project 2B: Collaborative Development \u00b6 Deliverables \u00b6 First Sprint \u2013 95 points \u2013 due Tuesday, February 11th, 11:59pm Process & Implementation Interim (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday February 10th Process and Implementation Interim (50 pts) \u00b6 Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. A helpful resource for naming commits to practice best habits and make it easier for your teammates to review your code is conventional commits . Consider using this format to ensure your PRs have atomic, well named commits. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Checkpoint Presentation (45 pts) \u00b6 During the Week 5 recitation slot ( Monday February 10th ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline. Grading \u00b6 To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback Resources & Documentation \u00b6 NodeBB Development \u00b6 We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"2B First Sprint"},{"location":"projects/P2/2_firstsprint/#project-2b-collaborative-development","text":"","title":"Project 2B: Collaborative Development"},{"location":"projects/P2/2_firstsprint/#deliverables","text":"First Sprint \u2013 95 points \u2013 due Tuesday, February 11th, 11:59pm Process & Implementation Interim (50 pts) Checkpoint Presentation (45 pts) - Held in Recitation on Monday February 10th","title":"Deliverables"},{"location":"projects/P2/2_firstsprint/#process-and-implementation-interim-50-pts","text":"Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. A helpful resource for naming commits to practice best habits and make it easier for your teammates to review your code is conventional commits . Consider using this format to ensure your PRs have atomic, well named commits. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process and Implementation Interim (50 pts)"},{"location":"projects/P2/2_firstsprint/#checkpoint-presentation-45-pts","text":"During the Week 5 recitation slot ( Monday February 10th ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline.","title":"Checkpoint Presentation (45 pts)"},{"location":"projects/P2/2_firstsprint/#grading","text":"To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback","title":"Grading"},{"location":"projects/P2/2_firstsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P2/2_firstsprint/#nodebb-development","text":"We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"NodeBB Development"},{"location":"projects/P2/3_secondsprint/","text":"Project 2C: Collaborative Development \u00b6 Deliverables \u00b6 Second Sprint \u2013 110 points \u2013 due Thursday, February 27th, 11:59pm Process & Implementation Final (50 pts) Process & Team Reflection (30 pts) Individual Reflection (30 pts) Process and Implementation Final (50 pts) \u00b6 Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Process and Team Reflection (30 pts) \u00b6 Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims. Individual Reflection (30 pts) \u00b6 Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection. Grading \u00b6 To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence Resources & Documentation \u00b6 NodeBB Development \u00b6 By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"2C Second Sprint"},{"location":"projects/P2/3_secondsprint/#project-2c-collaborative-development","text":"","title":"Project 2C: Collaborative Development"},{"location":"projects/P2/3_secondsprint/#deliverables","text":"Second Sprint \u2013 110 points \u2013 due Thursday, February 27th, 11:59pm Process & Implementation Final (50 pts) Process & Team Reflection (30 pts) Individual Reflection (30 pts)","title":"Deliverables"},{"location":"projects/P2/3_secondsprint/#process-and-implementation-final-50-pts","text":"Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process and Implementation Final (50 pts)"},{"location":"projects/P2/3_secondsprint/#process-and-team-reflection-30-pts","text":"Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims.","title":"Process and Team Reflection (30 pts)"},{"location":"projects/P2/3_secondsprint/#individual-reflection-30-pts","text":"Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection.","title":"Individual Reflection (30 pts)"},{"location":"projects/P2/3_secondsprint/#grading","text":"To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence","title":"Grading"},{"location":"projects/P2/3_secondsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P2/3_secondsprint/#nodebb-development","text":"By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"NodeBB Development"},{"location":"projects/P3/","text":"Project 3: Continuous Integration + Deployment \u00b6 Learning Goals \u00b6 Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice Project Context \u00b6 Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process. Deliverables and Deadlines \u00b6 There are two (2) deadlines for this project. This project is worth a total of 100 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, March 13th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 65 points \u2013 due Thursday, March 20th, 11:59pm Tool Analysis Design Doc (50 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, March 27th, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the Site Reliability Engineer(SRE) for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration. Checkpoint Deliverables \u00b6 Deployed Application (25 pts) \u00b6 Your team will be using Linux Virtual Machines (VMs) hosted at CMU for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit. Tools Checkpoint (10 pts) \u00b6 Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools Final Deliverables \u00b6 Tool Analysis Design Doc (50 pts) \u00b6 Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections. Tool Evaluations (~N pages) \u00b6 For each of the N-1 tools explored by your team, you must provide: Name and high-level description of what the tool does and a link to its documentation/source Whether the tool is used for static or dynamic analysis A link to the pull request made from the testing branch for this tool A pro/con analysis of the tool and appropriate evidence in the form of screenshots to support your claims. You can use the questions provided in the research you did for the checkpoint to shape your analysis. Each of these sections should take up approximately 1 page (including screenshots) and no more than 2 pages. Justification (~Half a page) \u00b6 After going through each of the tools, you should explicitly state the tool(s) you are choosing to integrate for this project and provide a justification for why you are selecting this tool. You should refer to the pro/con analysis done in the prior sections and how they align with the goals of your team and the project overall. You must recommend at least one tool , even if it\u2019s with reservations. Integration (<1 page) \u00b6 This section should address the different factors to take into consideration when integrating a new tool. At minimum, you should address the following: Technical Questions How are you integrating the tool (high-level)? At what point in the development/deployment process shall it be integrated? What sorts of customization or configuration will you be using? If you added any specific configuration to allow the main branch of your repository to pass its status checks, add the justification for those decisions in this section. Social Integration Questions How do you foresee the team using the tool during their development process? Consider the incentives & deterrents to the developers when it comes to using the tool, and their personal motivation to use it. Your answers should be based on your experiences running the tools on your team repository and be grounded in data from your research on different factors such as tool usability, output, and customizability. Keep this section updated as you work on implementing the integration. Conclusion (<1 page) \u00b6 In this section, provide a brief summary of your findings along with items that were not addressed in the previous sections. Are there any open questions? Are there any issues you consider to be out of scope? What drawbacks of the proposed process/tooling are you accepting for some (good) reason? This section should be used to wrap everything up and ensure you have a good/complete design document! Submit the Design Document as a single PDF to Gradescope. Tool Integration (15 pts) \u00b6 Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have *not* completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs. Extra Credit \u00b6 Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project. Feature Review (6 pts) \u00b6 For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing. Grading \u00b6 To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described. Resources & Documentation \u00b6 Starter List of Tools \u00b6 NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find! Static Tools \u00b6 flow : Static type checker for JavaScript JScent : Program analyzer for detecting \u201ccode smells\u201d JSHint : Used to flag suspicious usage in JavaScript programs StandardJS / ts-standard : Static analysis tool for code quality within JavaScript/TypeScript projects Retire.js : Finds library/node module vulnerabilities within your project Dynamic Tools \u00b6 Iroh : Runtime code tracking and visualization Jalangi : Framework for dynamic analyses in JavaScript Fast-Fuzz : Fuzzing framework for TypeScript Stryker Mutator : Mutation testing tool for JavaScript","title":"Project 3: Continuous Integration + Deployment"},{"location":"projects/P3/#project-3-continuous-integration-deployment","text":"","title":"Project 3: Continuous Integration + Deployment"},{"location":"projects/P3/#learning-goals","text":"Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice","title":"Learning Goals"},{"location":"projects/P3/#project-context","text":"Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process.","title":"Project Context"},{"location":"projects/P3/#deliverables-and-deadlines","text":"There are two (2) deadlines for this project. This project is worth a total of 100 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, March 13th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 65 points \u2013 due Thursday, March 20th, 11:59pm Tool Analysis Design Doc (50 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, March 27th, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the Site Reliability Engineer(SRE) for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration.","title":"Deliverables and Deadlines"},{"location":"projects/P3/#checkpoint-deliverables","text":"","title":"Checkpoint Deliverables"},{"location":"projects/P3/#deployed-application-25-pts","text":"Your team will be using Linux Virtual Machines (VMs) hosted at CMU for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit.","title":"Deployed Application (25 pts)"},{"location":"projects/P3/#tools-checkpoint-10-pts","text":"Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools","title":"Tools Checkpoint (10 pts)"},{"location":"projects/P3/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"projects/P3/#tool-analysis-design-doc-50-pts","text":"Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections.","title":"Tool Analysis Design Doc (50 pts)"},{"location":"projects/P3/#tool-integration-15-pts","text":"Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have *not* completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs.","title":"Tool Integration (15 pts)"},{"location":"projects/P3/#extra-credit","text":"Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project.","title":"Extra Credit"},{"location":"projects/P3/#feature-review-6-pts","text":"For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing.","title":"Feature Review (6 pts)"},{"location":"projects/P3/#grading","text":"To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described.","title":"Grading"},{"location":"projects/P3/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P3/#starter-list-of-tools","text":"NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find!","title":"Starter List of Tools"},{"location":"projects/P3/deployment/","text":"NodeBB Deployment on Azure \u00b6 This document will provide instructions to create a web-app deployment of NodeBB on Azure. Initial Setup \u00b6 Visit Azure and create an account using your school email address. There will be a wizard which will ask questions, you can select \u201cskip\u201d if you want. Once you are done, you should see the home screen: Select \"Subscriptions\", and you should see a subscription from your TA. For all resources created in this class, use this subscription. Create a Redis Instance on Azure \u00b6 Go back to the Azure homepage. Click \"Create new Resource\". Search for \"Azure Cache for Redis\" and select it. Make sure it is the one with the Blue logo provided by vendor \"Microsoft\", and not one of the third-party services. It should look like this: When creating the resource, use the lab subscription you created above. For \"Resource Group\", if nothing exists already, just create a new one called \"P3\". DNS Name: Use <team_name>-db or something similar. This will also be the \"resource name\" that you will see at the homepage/dashboard later so make sure to name it something that you can identify later as being the Redis instance for your team. Cache size: Select the lowest available (e.g. Standard C0 - 250 MB) Next\u2014Networking: Make sure \"Public Endpoint\" is selected so that you can connect to the instance from outside of Azure. Next\u2014Advanced: a. Enable the \"Non-TLS port\" option so that you can connect to the instance via port 6379. b. Under \"Authentication\", disable Microsoft Entra and enable \"Access Keys\". Next\u2014Tags: Ignore this page. Move forward. Next\u2014Review + Create. You should have the same options as listed below: Create the instance! Wait for several steps of creation and initialization (can take several minutes) before the instance appears available from the Azure Dashboard. Test the Redis instance: Go to the resource page for your Redis resource and note the host name. It should end with \".redis.cache.windows.net\". You should also see \"Port 6379 enabled\" and a link to \"Access keys\" (which you can also get to by navigating to the \"Authentication\" tab). From here, copy either the primary or secondary access key. Then, in your terminal on your laptop, type redis-cli -h <host-name-ending-in.redis.cache.windows.net> -p 6379 -a <access_key> . You should be able to login to the redis instance and get a command-line interface. You should see a prompt with the hostname and port number, and you can type commands like info to get instance info. Type CTRL+D to exit the redis-cli. Troubleshooting \u00b6 If your Redis resource seems to be up on the Azure dashboard but you are not able to connect to it via the CLI, check some of these things in the CLI: Is public networking enabled? Check \"Settings > Private endpoint.\" If you see private endpoints, then you need to delete them and add public access via the buttons on this screen. Is port 6379 (the non-SSL port) enabled? Check \"Settings > Advanced Settings > Access only via SSL,\" which should be set to \"No.\" Did you copy the right access key? See the screenshot above for reference. Create a Web App \u00b6 From the Azure dashboard, select \"Create Resource\" and choose \"Web App\". Choose the same Subscription and Resource Group as above. Basics: a. Choose a web app name, e.g. nodebb-<team_name> (the suffix will be .azurewebsites.net ). Make sure to disable \"Try a unique name\" so you don't get a long hash in the name. b. For Runtime stack, choose \"Node 20 LTS\". c. For Region, the default might be \u201cCanada Central\u201d, which is fine. d. For \"App Service Plan\" / \"Pricing Plan\" choose \"Basic B1\" Next\u2014Deployment: a. Enable basic authentication. Make sure to scroll down to the bottom of the page and enable this before doing the next step (at the top of the page). b. Scroll back up and enable \"Continuous Deployment\" via GitHub, and link to your GitHub account and choose the team repo you are working on. You will need to give Azure access to your GitHub account. You can optionally skip this step if you are confident about configuring CI separately later on manually. c. NOTE: The repository name is your team\u2019s repository Next\u2014Network: Defaults should be fine. Just make sure public access is ON. Next\u2014Monitor & Secure: You can disable App Insights to avoid this extra billing. Next\u2014Tags: Ignore, just move forward. Review+Create. Make sure you are on the Basic B1 plan (about $12.41 USD/month). Confirm all details and create. This will again take some time to create. Setup CI via GitHub Actions \u00b6 From the Azure dashboard, go to the resource page for your Web App created above. Navigate to the \"Settings > Configuration\" tab from the sidebar and in the start-up command type node app . Save this setting. Navigate to the \"Deployment > Deployment Center\" tab from the sidebar. Configure the deployment to build from source: GitHub and make sure it is connected to your repository (Org/Repo/Branch) as above. a. If your Deployment center is already connected to your repository, then you can go to the next step. If it is not connected, then For \"Workflow Option\", choose \"Use Available Workflow\". We will use the Azure Deploy workflow already in the CMU-313/NodeBB repo. This workflow deploys to Azure, but it depends on several secret variables like ADMIN_PASSWORD (for your NodeBB admin user), REDIS_HOST , REDIS_PASSWORD (for your database), and AZUREAPPSERVICE_PUBLISHPROFILE_XXX (for allowing GitHub to deploy to your Azure instance). Save these changes. Now let's set up these secret variables on GitHub.com. a. Go to your team's NodeBB repository and navigate to Settings > Secrets and Variables > Actions. You should already see a secret called AZUREAPPSERVICE_PUBLISHPROFILE_XXX which Azure put there when you linked your GitHub account and created the web app resource. b. Use the \"New repository secret\" button three times to create three secrets needed for your workflow: i. ADMIN_PASSWORD : Choose something easy to remember. ii. REDIS_HOST : Put the full domain of your Redis cache instance in the form <name>.redis.cache.windows.net . iii. REDIS_PASSWORD : Put the secret access key (either primary or secondary) for your Redis cache instance, which is the same one used to connect via CLI. It can be accessed from the \"Authentication\" tab in the Redis resource page on Azure. Delete the .yml file that was committed by Azure. It might be named something like: .github/workflows/f24_nodebb-<teamname\\>.yml Finally, edit the workflow file .github/workflows/azure-deploy-f24.yml in your own repository and modify four lines: a. Edit the name of the repository to match your repository name from GitHub. This guard is used here so that forks of the repo don't accidentally trigger deployments to the wrong target hostname. b. Edit the NodeBB setup URL to match the domain where your web app will be deployed. You can get this from the Overview page of the Web App resource on Azure; it should be of the form <name>.azurewebsites.net . Make sure that the workflow file retains the https:// prefix and the :443 suffix around the domain. c. Edit the app name to the <name> part, which is the name of your app on Azure. d. Edit the name of the publish profile secret key to match the name of the secret key in your settings, as shown above. Azure auto-generates the name of this variable with a unique suffix, so we have to keep updating this one. Commit and push to GitHub to trigger the Actions workflow and Azure deployment. Monitoring the Deployment \u00b6 On GitHub, you should see a dot next to the commit that shows you the status of the action. This may take a couple of minutes to complete. If the action fails, you can view the logs to see what went wrong (e.g. bad configuration or failed a lint/test). On the Azure dashboard, you can go to the Web App resource page, navigate to the Deployment Center tab from the sidebar, and view logs. You should see a log entry after every GitHub Action that succeeds its deployment. It can take 20-30 minutes for the deployment. If something goes wrong, you can navigate to the \"Log Stream\" page in the sidebar of your Web App resource. This should give you the stdout stream for the NodeBB setup and run, just like you would see on your own command-line if you ran ./nodebb setup and ./nodebb start locally. This can help you debug issues with wrong configuration, etc. if you missed any of the steps above.","title":"NodeBB Deployment on Azure"},{"location":"projects/P3/deployment/#nodebb-deployment-on-azure","text":"This document will provide instructions to create a web-app deployment of NodeBB on Azure.","title":"NodeBB Deployment on Azure"},{"location":"projects/P3/deployment/#initial-setup","text":"Visit Azure and create an account using your school email address. There will be a wizard which will ask questions, you can select \u201cskip\u201d if you want. Once you are done, you should see the home screen: Select \"Subscriptions\", and you should see a subscription from your TA. For all resources created in this class, use this subscription.","title":"Initial Setup"},{"location":"projects/P3/deployment/#create-a-redis-instance-on-azure","text":"Go back to the Azure homepage. Click \"Create new Resource\". Search for \"Azure Cache for Redis\" and select it. Make sure it is the one with the Blue logo provided by vendor \"Microsoft\", and not one of the third-party services. It should look like this: When creating the resource, use the lab subscription you created above. For \"Resource Group\", if nothing exists already, just create a new one called \"P3\". DNS Name: Use <team_name>-db or something similar. This will also be the \"resource name\" that you will see at the homepage/dashboard later so make sure to name it something that you can identify later as being the Redis instance for your team. Cache size: Select the lowest available (e.g. Standard C0 - 250 MB) Next\u2014Networking: Make sure \"Public Endpoint\" is selected so that you can connect to the instance from outside of Azure. Next\u2014Advanced: a. Enable the \"Non-TLS port\" option so that you can connect to the instance via port 6379. b. Under \"Authentication\", disable Microsoft Entra and enable \"Access Keys\". Next\u2014Tags: Ignore this page. Move forward. Next\u2014Review + Create. You should have the same options as listed below: Create the instance! Wait for several steps of creation and initialization (can take several minutes) before the instance appears available from the Azure Dashboard. Test the Redis instance: Go to the resource page for your Redis resource and note the host name. It should end with \".redis.cache.windows.net\". You should also see \"Port 6379 enabled\" and a link to \"Access keys\" (which you can also get to by navigating to the \"Authentication\" tab). From here, copy either the primary or secondary access key. Then, in your terminal on your laptop, type redis-cli -h <host-name-ending-in.redis.cache.windows.net> -p 6379 -a <access_key> . You should be able to login to the redis instance and get a command-line interface. You should see a prompt with the hostname and port number, and you can type commands like info to get instance info. Type CTRL+D to exit the redis-cli.","title":"Create a Redis Instance on Azure"},{"location":"projects/P3/deployment/#troubleshooting","text":"If your Redis resource seems to be up on the Azure dashboard but you are not able to connect to it via the CLI, check some of these things in the CLI: Is public networking enabled? Check \"Settings > Private endpoint.\" If you see private endpoints, then you need to delete them and add public access via the buttons on this screen. Is port 6379 (the non-SSL port) enabled? Check \"Settings > Advanced Settings > Access only via SSL,\" which should be set to \"No.\" Did you copy the right access key? See the screenshot above for reference.","title":"Troubleshooting"},{"location":"projects/P3/deployment/#create-a-web-app","text":"From the Azure dashboard, select \"Create Resource\" and choose \"Web App\". Choose the same Subscription and Resource Group as above. Basics: a. Choose a web app name, e.g. nodebb-<team_name> (the suffix will be .azurewebsites.net ). Make sure to disable \"Try a unique name\" so you don't get a long hash in the name. b. For Runtime stack, choose \"Node 20 LTS\". c. For Region, the default might be \u201cCanada Central\u201d, which is fine. d. For \"App Service Plan\" / \"Pricing Plan\" choose \"Basic B1\" Next\u2014Deployment: a. Enable basic authentication. Make sure to scroll down to the bottom of the page and enable this before doing the next step (at the top of the page). b. Scroll back up and enable \"Continuous Deployment\" via GitHub, and link to your GitHub account and choose the team repo you are working on. You will need to give Azure access to your GitHub account. You can optionally skip this step if you are confident about configuring CI separately later on manually. c. NOTE: The repository name is your team\u2019s repository Next\u2014Network: Defaults should be fine. Just make sure public access is ON. Next\u2014Monitor & Secure: You can disable App Insights to avoid this extra billing. Next\u2014Tags: Ignore, just move forward. Review+Create. Make sure you are on the Basic B1 plan (about $12.41 USD/month). Confirm all details and create. This will again take some time to create.","title":"Create a Web App"},{"location":"projects/P3/deployment/#setup-ci-via-github-actions","text":"From the Azure dashboard, go to the resource page for your Web App created above. Navigate to the \"Settings > Configuration\" tab from the sidebar and in the start-up command type node app . Save this setting. Navigate to the \"Deployment > Deployment Center\" tab from the sidebar. Configure the deployment to build from source: GitHub and make sure it is connected to your repository (Org/Repo/Branch) as above. a. If your Deployment center is already connected to your repository, then you can go to the next step. If it is not connected, then For \"Workflow Option\", choose \"Use Available Workflow\". We will use the Azure Deploy workflow already in the CMU-313/NodeBB repo. This workflow deploys to Azure, but it depends on several secret variables like ADMIN_PASSWORD (for your NodeBB admin user), REDIS_HOST , REDIS_PASSWORD (for your database), and AZUREAPPSERVICE_PUBLISHPROFILE_XXX (for allowing GitHub to deploy to your Azure instance). Save these changes. Now let's set up these secret variables on GitHub.com. a. Go to your team's NodeBB repository and navigate to Settings > Secrets and Variables > Actions. You should already see a secret called AZUREAPPSERVICE_PUBLISHPROFILE_XXX which Azure put there when you linked your GitHub account and created the web app resource. b. Use the \"New repository secret\" button three times to create three secrets needed for your workflow: i. ADMIN_PASSWORD : Choose something easy to remember. ii. REDIS_HOST : Put the full domain of your Redis cache instance in the form <name>.redis.cache.windows.net . iii. REDIS_PASSWORD : Put the secret access key (either primary or secondary) for your Redis cache instance, which is the same one used to connect via CLI. It can be accessed from the \"Authentication\" tab in the Redis resource page on Azure. Delete the .yml file that was committed by Azure. It might be named something like: .github/workflows/f24_nodebb-<teamname\\>.yml Finally, edit the workflow file .github/workflows/azure-deploy-f24.yml in your own repository and modify four lines: a. Edit the name of the repository to match your repository name from GitHub. This guard is used here so that forks of the repo don't accidentally trigger deployments to the wrong target hostname. b. Edit the NodeBB setup URL to match the domain where your web app will be deployed. You can get this from the Overview page of the Web App resource on Azure; it should be of the form <name>.azurewebsites.net . Make sure that the workflow file retains the https:// prefix and the :443 suffix around the domain. c. Edit the app name to the <name> part, which is the name of your app on Azure. d. Edit the name of the publish profile secret key to match the name of the secret key in your settings, as shown above. Azure auto-generates the name of this variable with a unique suffix, so we have to keep updating this one. Commit and push to GitHub to trigger the Actions workflow and Azure deployment.","title":"Setup CI via GitHub Actions"},{"location":"projects/P3/deployment/#monitoring-the-deployment","text":"On GitHub, you should see a dot next to the commit that shows you the status of the action. This may take a couple of minutes to complete. If the action fails, you can view the logs to see what went wrong (e.g. bad configuration or failed a lint/test). On the Azure dashboard, you can go to the Web App resource page, navigate to the Deployment Center tab from the sidebar, and view logs. You should see a log entry after every GitHub Action that succeeds its deployment. It can take 20-30 minutes for the deployment. If something goes wrong, you can navigate to the \"Log Stream\" page in the sidebar of your Web App resource. This should give you the stdout stream for the NodeBB setup and run, just like you would see on your own command-line if you ran ./nodebb setup and ./nodebb start locally. This can help you debug issues with wrong configuration, etc. if you missed any of the steps above.","title":"Monitoring the Deployment"},{"location":"projects/P4/","text":"Project 4: Architecting an LLM Integration \u00b6 Learning Goals \u00b6 Design a software architecture for a software system that incorporates a foundational large language model Decide the appropriate architecture for a given problem Address and describe the tradeoffs of different architectures Integrate pre-trained foundational large language models into an existing software system Evaluate the performance/quality of LLM powered features Design test suites that include unit, integration, and mock testing, to ensure robustness and reliability Engineer techniques to improve the performance of pre-trained models on application-specific tasks Decide whether an LLM powered solution is production ready Project Context \u00b6 The development of the new Q&A forum system for CMU is in full swing when your CEO suddenly bursts into the room shouting, \u201cLLMs! AI! Why are we building a Q&A forum without integrating LLMs?!\u201d Once your CEO has finally calmed down, your manager calls an all-hands meeting. At the meeting, everyone agrees that you don\u2019t have the resources to build a completely new Q&A forum and also automate the whole question-answering problem. But, to better compete with Piazza, your CEO and manager decide to put your team in charge of exploring using an LLM to implement a translation feature. This feature will automatically translate posts written in languages other than English into English. This initiative aims to foster inclusivity and ensure that language barriers do not hinder participation in the forum. In light of this new direction, your manager wants you to: Architect the feature - reason about, document and select an appropriate architecture for integrating this feature into the existing system. Build an experimental integration with the existing NodeBB codebase to evaluate feasibility. Evaluate the feature and decide whether the feature should be fully implemented. As everything is just settling down, your CEO bursts back into the room!! There's a new catch: the company is strapped for funding and must be very careful with its spending. As a result, your team is now required to conduct all experimentation and implementation of the LLM-powered translation feature using only the OpenAI credits currently at your disposal . If your team successfully stays within your available credits and doesn't need to request any more, you\u2019ll earn bonus points for your ingenuity and efficiency. Some of you may think that it\u2019s unfair for this change to come up unexpectedly, especially since we didn\u2019t inform you before P3, but keep in mind that this is just like real life! Working in a company means having to deal with unexpected circumstances, which more often than not contain some aspect concerning money. We're looking to see how well you can adapt to this new situation, and we want you to have this experience before you're dealing with the pressure of real company money. Rest assured, if your team needs more credits to finish the project, we will not be taking off points. Deliverables and Deadlines \u00b6 There are three (3) deadlines for the project. This project is worth a total of 125 points. Checkpoint #1 Deliverables \u2013 55 pts - due Thursday, March 27, 11:59pm Architectural Design Document (40 pts) Basic LLM Experiment (15 pts) Checkpoint #2 Deliverables \u2013 10 pts - due Sunday, April 6, 11:59pm LLM Experiment Integration Checkpoint (10 pts) Final Deliverables - 60 pts - due Wednesday, April 9, 11:59pm Final LLM Experiment Implementation (30 pts) Evaluation Report (30 pts) Checkpoint #1 Deliverables \u00b6 Architectural Design Document (40 points) \u00b6 To start, your manager has requested a concrete design document outlining how you plan to integrate the new LLM-powered translation feature into the existing codebase. One of your manager's requirements is that this feature should work on a deployed site. If the team decides to go ahead with the feature, this design document will be followed in order to fully integrate this feature into NodeBB. Two initial solutions to consider are: Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Your design document must discuss both of these approaches and include a third approach of your choosing . You must advocate for one of these three approaches as the best solution. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the translation feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Assessing LLM Suitability (<1 page) Use proprities of LLMs discussed in class to discuss why an LLM may be a good solution for translating posts on NodeBB. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture. Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider three different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Note Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Tip Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. Warning In the past, students have utilized generative AI tools to generate diagrams with mixed success. While some diagrams have been useful and accurate, others have fallen short due to inaccuracies or oversimplifications not aligned with specific project requirements. Be cautious and review them carefully for accuracy and relevance. If we suspect you've abused generative AI and your diagrams are inadequate , we won't consider regrade requests. You\u2019ve been warned. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF. Basic LLM Experiment (15 points) \u00b6 To explore the feasibility of LLMs for this task, your manager would like you to prototype the basic functionality of an LLM to translate text. Due to the company\u2019s existing deal with Microsoft, your team will use the gpt-4o-mini language model from OpenAI's Platform. Once you're all set up, open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Only one team member needs to do this, and the team should collaborate using this notebook. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. Now, you should be ready to experiment with gpt-4o-mini! Follow the instructions in the notebook through the end of the Basic LLM Experiment. Given the unpredictable nature of LLM responses, it is crucial to test whether your application can handle a range of outcomes. Your Colab notebook should also include tests for your code. We have provided a starter code. In this task, you are required to employ mocking techniques to test your code resilience against unexpected results from API calls to the LLM. Mocking is a method used in testing to replace real system components with mock objects that simulate the behavior of those components. This approach allows developers to emulate various scenarios, including errors or atypical responses from external services, without having to make actual API calls. Here you will be using mocking to mimic different unexpected outcomes to check if your code can handle such anomalies gracefully. For full credit, your submission should have at least four mock tests that deal with different unexpected model behaviors. At least one of these tests should involve the model returning unexpected text. All tests should relate to the query_llm_robust function. You should download and submit a .ipynb copy of your Colab notebook (with outputs) to Gradescope. Checkpoint #2 Deliverables \u00b6 LLM Experiment Integration Checkpoint (10 points) \u00b6 For this checkpoint, you are expected to have successfully integrated the provided UI code into your project. Additionally, you must implement and deploy a server-side functionality that returns a hardcoded response. This step is crucial to ensure you are on track. We have provided some initial code on this repo . Furthermore, your server-side code must include unit and mock tests. To accomplish this, you must move the tests you wrote in the previous checkpoint to the repo and integrate them into the CI pipeline. Final Deliverables \u00b6 Final LLM Experiment Implementation (30 points) \u00b6 The final step is to implement this LLM feature into your team's NodeBB project. Your implementation should include the UI code you integrated in Checkpoint #2. You should also integrate the code you developed as a part of the LLM experiment, but you may modify it as needed to successfully integrate the functionality into your code. Because this is the last Project to use NodeBB, commit to your repo, and we will grade your final repository state Reach out to your TA if you have any questions. Evaluation Report (30 points) \u00b6 Now that you\u2019ve experimented with an LLM integration, write a report that summarizes your findings for the rest of the team. In particular, you will need to decide whether your findings justify completing and shipping this feature. Your report should include the following with clear headings: 1. Introduction (<0.5 pages) Provide a brief introduction to the LLM integration you\u2019re evaluating, and the context of its use, i.e. the translation feature. 2. LLM integration (<1 page) Describe the end-to-end implementation of your final solution to translating posts. Given an arbitrary post in any language, how do you integrate with an LLM to return an answer? Feel free to include any prompts and diagrams. 4. Evaluation Results (<0.5 page) Provide a summary of the results from applying the evaluation strategy on your final LLM experiment. Feel free to include any evidence/output from your notebook. 5. Operational Costs (<0.5 pages) Based on the pricing of your chosen LLM, how much will it cost to provide users with this feature? How long does it take to translate a post? State any assumptions made in making these estimates. Is the cost associated with providing this feature reasonable? 6. Final Recommendation (<0.5 pages) Provide a final decision on whether the translation feature should be implemented based on the evaluation results, operational costs and other relevant factors. On Gradescope submit the following: Link to your Colab notebook (with output) that contains your code, analysis. Make sure it is editable so that we can run the notebook if necessary. PDF of your evaluation report Grading \u00b6 To receive full credit for the first checkpoint, we expect: An uploaded PDF design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to your Colab notebook completing all of the setup and basic LLM experiment steps outlined by the previous section To receive full credit for the second checkpoint, we expect: A functional integration of the UI code into your NodeBB application. A preliminary implementation of the translation feature using the starter code, including CI with unit and mock tests. Integrating NodeBB and the translation service. To receive full credit for the final deadline, we expect: A functional translation feature, as described in your design document, integrated into your NodeBB application. An uploaded PDF report discussing your evaluation findings addressing all the sections outlined above Resource & Documentation \u00b6 Design Documents \u00b6 The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation. LLMs \u00b6 OpenAI docs OpenAI pricing SBert Cosine Similarity Documentation SBert Semantic Search Documentation","title":"Project 4: Architecting an LLM Integration"},{"location":"projects/P4/#project-4-architecting-an-llm-integration","text":"","title":"Project 4: Architecting an LLM Integration"},{"location":"projects/P4/#learning-goals","text":"Design a software architecture for a software system that incorporates a foundational large language model Decide the appropriate architecture for a given problem Address and describe the tradeoffs of different architectures Integrate pre-trained foundational large language models into an existing software system Evaluate the performance/quality of LLM powered features Design test suites that include unit, integration, and mock testing, to ensure robustness and reliability Engineer techniques to improve the performance of pre-trained models on application-specific tasks Decide whether an LLM powered solution is production ready","title":"Learning Goals"},{"location":"projects/P4/#project-context","text":"The development of the new Q&A forum system for CMU is in full swing when your CEO suddenly bursts into the room shouting, \u201cLLMs! AI! Why are we building a Q&A forum without integrating LLMs?!\u201d Once your CEO has finally calmed down, your manager calls an all-hands meeting. At the meeting, everyone agrees that you don\u2019t have the resources to build a completely new Q&A forum and also automate the whole question-answering problem. But, to better compete with Piazza, your CEO and manager decide to put your team in charge of exploring using an LLM to implement a translation feature. This feature will automatically translate posts written in languages other than English into English. This initiative aims to foster inclusivity and ensure that language barriers do not hinder participation in the forum. In light of this new direction, your manager wants you to: Architect the feature - reason about, document and select an appropriate architecture for integrating this feature into the existing system. Build an experimental integration with the existing NodeBB codebase to evaluate feasibility. Evaluate the feature and decide whether the feature should be fully implemented. As everything is just settling down, your CEO bursts back into the room!! There's a new catch: the company is strapped for funding and must be very careful with its spending. As a result, your team is now required to conduct all experimentation and implementation of the LLM-powered translation feature using only the OpenAI credits currently at your disposal . If your team successfully stays within your available credits and doesn't need to request any more, you\u2019ll earn bonus points for your ingenuity and efficiency. Some of you may think that it\u2019s unfair for this change to come up unexpectedly, especially since we didn\u2019t inform you before P3, but keep in mind that this is just like real life! Working in a company means having to deal with unexpected circumstances, which more often than not contain some aspect concerning money. We're looking to see how well you can adapt to this new situation, and we want you to have this experience before you're dealing with the pressure of real company money. Rest assured, if your team needs more credits to finish the project, we will not be taking off points.","title":"Project Context"},{"location":"projects/P4/#deliverables-and-deadlines","text":"There are three (3) deadlines for the project. This project is worth a total of 125 points. Checkpoint #1 Deliverables \u2013 55 pts - due Thursday, March 27, 11:59pm Architectural Design Document (40 pts) Basic LLM Experiment (15 pts) Checkpoint #2 Deliverables \u2013 10 pts - due Sunday, April 6, 11:59pm LLM Experiment Integration Checkpoint (10 pts) Final Deliverables - 60 pts - due Wednesday, April 9, 11:59pm Final LLM Experiment Implementation (30 pts) Evaluation Report (30 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P4/#checkpoint-1-deliverables","text":"","title":"Checkpoint #1 Deliverables"},{"location":"projects/P4/#architectural-design-document-40-points","text":"To start, your manager has requested a concrete design document outlining how you plan to integrate the new LLM-powered translation feature into the existing codebase. One of your manager's requirements is that this feature should work on a deployed site. If the team decides to go ahead with the feature, this design document will be followed in order to fully integrate this feature into NodeBB. Two initial solutions to consider are: Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Your design document must discuss both of these approaches and include a third approach of your choosing . You must advocate for one of these three approaches as the best solution. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the translation feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Assessing LLM Suitability (<1 page) Use proprities of LLMs discussed in class to discuss why an LLM may be a good solution for translating posts on NodeBB. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture. Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider three different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Note Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Tip Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. Warning In the past, students have utilized generative AI tools to generate diagrams with mixed success. While some diagrams have been useful and accurate, others have fallen short due to inaccuracies or oversimplifications not aligned with specific project requirements. Be cautious and review them carefully for accuracy and relevance. If we suspect you've abused generative AI and your diagrams are inadequate , we won't consider regrade requests. You\u2019ve been warned. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF.","title":"Architectural Design Document (40 points)"},{"location":"projects/P4/#basic-llm-experiment-15-points","text":"To explore the feasibility of LLMs for this task, your manager would like you to prototype the basic functionality of an LLM to translate text. Due to the company\u2019s existing deal with Microsoft, your team will use the gpt-4o-mini language model from OpenAI's Platform. Once you're all set up, open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Only one team member needs to do this, and the team should collaborate using this notebook. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. Now, you should be ready to experiment with gpt-4o-mini! Follow the instructions in the notebook through the end of the Basic LLM Experiment. Given the unpredictable nature of LLM responses, it is crucial to test whether your application can handle a range of outcomes. Your Colab notebook should also include tests for your code. We have provided a starter code. In this task, you are required to employ mocking techniques to test your code resilience against unexpected results from API calls to the LLM. Mocking is a method used in testing to replace real system components with mock objects that simulate the behavior of those components. This approach allows developers to emulate various scenarios, including errors or atypical responses from external services, without having to make actual API calls. Here you will be using mocking to mimic different unexpected outcomes to check if your code can handle such anomalies gracefully. For full credit, your submission should have at least four mock tests that deal with different unexpected model behaviors. At least one of these tests should involve the model returning unexpected text. All tests should relate to the query_llm_robust function. You should download and submit a .ipynb copy of your Colab notebook (with outputs) to Gradescope.","title":"Basic LLM Experiment (15 points)"},{"location":"projects/P4/#checkpoint-2-deliverables","text":"","title":"Checkpoint #2 Deliverables"},{"location":"projects/P4/#llm-experiment-integration-checkpoint-10-points","text":"For this checkpoint, you are expected to have successfully integrated the provided UI code into your project. Additionally, you must implement and deploy a server-side functionality that returns a hardcoded response. This step is crucial to ensure you are on track. We have provided some initial code on this repo . Furthermore, your server-side code must include unit and mock tests. To accomplish this, you must move the tests you wrote in the previous checkpoint to the repo and integrate them into the CI pipeline.","title":"LLM Experiment Integration Checkpoint (10 points)"},{"location":"projects/P4/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"projects/P4/#final-llm-experiment-implementation-30-points","text":"The final step is to implement this LLM feature into your team's NodeBB project. Your implementation should include the UI code you integrated in Checkpoint #2. You should also integrate the code you developed as a part of the LLM experiment, but you may modify it as needed to successfully integrate the functionality into your code. Because this is the last Project to use NodeBB, commit to your repo, and we will grade your final repository state Reach out to your TA if you have any questions.","title":"Final LLM Experiment Implementation (30 points)"},{"location":"projects/P4/#evaluation-report-30-points","text":"Now that you\u2019ve experimented with an LLM integration, write a report that summarizes your findings for the rest of the team. In particular, you will need to decide whether your findings justify completing and shipping this feature. Your report should include the following with clear headings: 1. Introduction (<0.5 pages) Provide a brief introduction to the LLM integration you\u2019re evaluating, and the context of its use, i.e. the translation feature. 2. LLM integration (<1 page) Describe the end-to-end implementation of your final solution to translating posts. Given an arbitrary post in any language, how do you integrate with an LLM to return an answer? Feel free to include any prompts and diagrams. 4. Evaluation Results (<0.5 page) Provide a summary of the results from applying the evaluation strategy on your final LLM experiment. Feel free to include any evidence/output from your notebook. 5. Operational Costs (<0.5 pages) Based on the pricing of your chosen LLM, how much will it cost to provide users with this feature? How long does it take to translate a post? State any assumptions made in making these estimates. Is the cost associated with providing this feature reasonable? 6. Final Recommendation (<0.5 pages) Provide a final decision on whether the translation feature should be implemented based on the evaluation results, operational costs and other relevant factors. On Gradescope submit the following: Link to your Colab notebook (with output) that contains your code, analysis. Make sure it is editable so that we can run the notebook if necessary. PDF of your evaluation report","title":"Evaluation Report (30 points)"},{"location":"projects/P4/#grading","text":"To receive full credit for the first checkpoint, we expect: An uploaded PDF design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to your Colab notebook completing all of the setup and basic LLM experiment steps outlined by the previous section To receive full credit for the second checkpoint, we expect: A functional integration of the UI code into your NodeBB application. A preliminary implementation of the translation feature using the starter code, including CI with unit and mock tests. Integrating NodeBB and the translation service. To receive full credit for the final deadline, we expect: A functional translation feature, as described in your design document, integrated into your NodeBB application. An uploaded PDF report discussing your evaluation findings addressing all the sections outlined above","title":"Grading"},{"location":"projects/P4/#resource-documentation","text":"","title":"Resource &amp; Documentation"},{"location":"projects/P4/#design-documents","text":"The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation.","title":"Design Documents"},{"location":"projects/P4/#llms","text":"OpenAI docs OpenAI pricing SBert Cosine Similarity Documentation SBert Semantic Search Documentation","title":"LLMs"},{"location":"projects/P5/","text":"Project 5: Open Source Excursion \u00b6 Learning Goals \u00b6 Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development Project Description \u00b6 Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. In past semesters, we've had teams merge code into popular open source projects like CPython, Pandas, and MyPy - see our Hall of Fame for details. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience. Deliverables and Deadlines \u00b6 This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 400 points (~24% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Wednesday, April 16th, 11:59pm Project selection - due Wednesday, April 16th Check-In Presentation (slides + recording) (80 pts) - due Sunday April 21st B) Project Final Report & Presentations \u2013 300 points \u2013 due Sunday, May 4th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, May 5th, 1:00-4:00pm C) Individual Reflections \u2013 20 points \u2013 due Monday, May 5th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 4 weeks. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Project 5: Open Source Excursion"},{"location":"projects/P5/#project-5-open-source-excursion","text":"","title":"Project 5: Open Source Excursion"},{"location":"projects/P5/#learning-goals","text":"Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development","title":"Learning Goals"},{"location":"projects/P5/#project-description","text":"Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. In past semesters, we've had teams merge code into popular open source projects like CPython, Pandas, and MyPy - see our Hall of Fame for details. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience.","title":"Project Description"},{"location":"projects/P5/#deliverables-and-deadlines","text":"This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 400 points (~24% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Wednesday, April 16th, 11:59pm Project selection - due Wednesday, April 16th Check-In Presentation (slides + recording) (80 pts) - due Sunday April 21st B) Project Final Report & Presentations \u2013 300 points \u2013 due Sunday, May 4th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, May 5th, 1:00-4:00pm C) Individual Reflections \u2013 20 points \u2013 due Monday, May 5th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 4 weeks. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Deliverables and Deadlines"},{"location":"projects/P5/1_projectcheck/","text":"Project 5A: Project and Task Selection \u00b6 Deliverables \u00b6 Project & Task Selection \u2013 80 points Project Selection - enter project name and URL in the spreadsheet by Wednesday, April 16th, 11:59pm Task Selection Checkpoint Presentation \u2013 slides and video recording due Sunday, April 20th, 11:59pm Open Source Project Selection \u00b6 You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may also check the other sheets in the Public Project Selection Spreadsheet which will include Projects and whether they were merged into main. You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet . We highly recommend you also think about potential tasks (see below) before finalizing on a project, as your success depends heavily on the chosen task. Task Selection \u00b6 For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff. Task Planning \u00b6 Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the checkpoint presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule. Checkpoint Presentation (80 pts) \u00b6 The recitation before Thanksgiving will be an open office hours. The subsequent recitation right after the due date of the recordings, we will be watching the recordings of your classmates checkin presentations in order to learn what others are doing and give advice. Presentations are 7 minutes long Participation from all team members during the presentation is required Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute checkpoint presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope and upload a video recording in this Google drive folder . You will be presenting this in the recitation on Monday, November 25th.","title":"5A Project and Task Selection"},{"location":"projects/P5/1_projectcheck/#project-5a-project-and-task-selection","text":"","title":"Project 5A: Project and Task Selection"},{"location":"projects/P5/1_projectcheck/#deliverables","text":"Project & Task Selection \u2013 80 points Project Selection - enter project name and URL in the spreadsheet by Wednesday, April 16th, 11:59pm Task Selection Checkpoint Presentation \u2013 slides and video recording due Sunday, April 20th, 11:59pm","title":"Deliverables"},{"location":"projects/P5/1_projectcheck/#open-source-project-selection","text":"You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may also check the other sheets in the Public Project Selection Spreadsheet which will include Projects and whether they were merged into main. You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet . We highly recommend you also think about potential tasks (see below) before finalizing on a project, as your success depends heavily on the chosen task.","title":"Open Source Project Selection"},{"location":"projects/P5/1_projectcheck/#task-selection","text":"For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff.","title":"Task Selection"},{"location":"projects/P5/1_projectcheck/#task-planning","text":"Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the checkpoint presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule.","title":"Task Planning"},{"location":"projects/P5/1_projectcheck/#checkpoint-presentation-80-pts","text":"The recitation before Thanksgiving will be an open office hours. The subsequent recitation right after the due date of the recordings, we will be watching the recordings of your classmates checkin presentations in order to learn what others are doing and give advice. Presentations are 7 minutes long Participation from all team members during the presentation is required Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute checkpoint presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope and upload a video recording in this Google drive folder . You will be presenting this in the recitation on Monday, November 25th.","title":"Checkpoint Presentation (80 pts)"},{"location":"projects/P5/2_projectfinal/","text":"Project 5B & C: Project Presentations, Final Report, and Reflections \u00b6 Deliverables \u00b6 Project Report and Presentation \u2013 due Sunday, May 4th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, May 5th, 1:00-4:00pm, during exam timeslot Reflection \u2013 due Monday, May 5th, 11:59pm Reflections & Peer Review (20 pts) Contributing to Open Source \u00b6 You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (5%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff. Report, Presentation and Reflection \u00b6 You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class. Project Presentations (100 pts) \u00b6 The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 4 minutes long, with 2 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Your Experiences (~1 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the one or two most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Monday, May 5th, 11:59pm . Project Report (200 pts) \u00b6 After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Project Processes and Communication (<1 page) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Summary of Final Contributions (<0.5 page) A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link to the instructors and Sophia via Slack over Group DM or e-mail(to all) by 3rd May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope . Individual Reflection & Peer Evaluations (20 pts) \u00b6 Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"5B & C Project Presentations, Final Report, and Reflections"},{"location":"projects/P5/2_projectfinal/#project-5b-c-project-presentations-final-report-and-reflections","text":"","title":"Project 5B &amp; C: Project Presentations, Final Report, and Reflections"},{"location":"projects/P5/2_projectfinal/#deliverables","text":"Project Report and Presentation \u2013 due Sunday, May 4th, 11:59pm Project Report (200 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, May 5th, 1:00-4:00pm, during exam timeslot Reflection \u2013 due Monday, May 5th, 11:59pm Reflections & Peer Review (20 pts)","title":"Deliverables"},{"location":"projects/P5/2_projectfinal/#contributing-to-open-source","text":"You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (5%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff.","title":"Contributing to Open Source"},{"location":"projects/P5/2_projectfinal/#report-presentation-and-reflection","text":"You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class.","title":"Report, Presentation and Reflection"},{"location":"projects/P5/2_projectfinal/#project-presentations-100-pts","text":"The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 4 minutes long, with 2 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Your Experiences (~1 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the one or two most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Monday, May 5th, 11:59pm .","title":"Project Presentations (100 pts)"},{"location":"projects/P5/2_projectfinal/#project-report-200-pts","text":"After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Project Processes and Communication (<1 page) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Summary of Final Contributions (<0.5 page) A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link to the instructors and Sophia via Slack over Group DM or e-mail(to all) by 3rd May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope .","title":"Project Report (200 pts)"},{"location":"projects/P5/2_projectfinal/#individual-reflection-peer-evaluations-20-pts","text":"Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Use of Generative AI Forbidden As described in the syllabus, the use of generative AI tools for this part of the assignment is forbidden, and will be considered to be an academic integrity violation. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"Individual Reflection &amp; Peer Evaluations (20 pts)"},{"location":"recitations/","text":"Coming soon!","title":"Index"},{"location":"recitations/reci1-github/","text":"Recitation 1: Using Git & Github for Collaborative TypeScript Development \u00b6 Overview \u00b6 After this recitation, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects. Students will learn about working with Git and GitHub by converting a file from JavaScript to TypeScript - a migration that students will perform again on Project 1. Prerequisites \u00b6 You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people. Activity 1a: Forking a repo and adding a collaborator \u00b6 Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine Activity 1b: Run a GitHub Action Workflow \u00b6 On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product Activity 2: Setting up Kanban board and creating issues \u00b6 Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person, and add the issues to the project Kanban board you just created using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your partner or make it public so they have access to it. Activity 3: Branching, committing, and pushing \u00b6 In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Potentially helpful TypeScript resources: exporting: https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#exporting-from-modules functions: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions Express req, res types - https://stackoverflow.com/a/58567246 Push the branch to remote git push --set-upstream origin <your-branch-name> Activity 4: Writing pull requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that there are no eslint errors associated with the file that you translated and that the correctness tests still pass. Note that the GitHub action itself won't pass because the linter won't pass until both files are translated, i.e. both PRs are merged. Assign the issue you created to the pull request Request your partner for a code review TypeScript Translation Resources The following documentation pointers will help with the code changes you'll need to make - Exporting from Modules , Typing Functions , Express Req, Res types Activity 5a: Doing code reviews and resolving merge conflicts \u00b6 Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column Activity 5b: Check GitHub actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Recitation 1 - Git Collaboration"},{"location":"recitations/reci1-github/#recitation-1-using-git-github-for-collaborative-typescript-development","text":"","title":"Recitation 1: Using Git &amp; Github for Collaborative TypeScript Development"},{"location":"recitations/reci1-github/#overview","text":"After this recitation, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects. Students will learn about working with Git and GitHub by converting a file from JavaScript to TypeScript - a migration that students will perform again on Project 1.","title":"Overview"},{"location":"recitations/reci1-github/#prerequisites","text":"You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people.","title":"Prerequisites"},{"location":"recitations/reci1-github/#activity-1a-forking-a-repo-and-adding-a-collaborator","text":"Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine","title":"Activity 1a: Forking a repo and adding a collaborator"},{"location":"recitations/reci1-github/#activity-1b-run-a-github-action-workflow","text":"On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product","title":"Activity 1b: Run a GitHub Action Workflow"},{"location":"recitations/reci1-github/#activity-2-setting-up-kanban-board-and-creating-issues","text":"Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! Create a project board by clicking on the Projects tab, and then \"New project\" under the \"Link a project\" drop down button. Use the \"Board\" template. Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person, and add the issues to the project Kanban board you just created using the \"Projects\" option(two fields below \"Assignees\") Share the Kanban/Project board with your partner or make it public so they have access to it.","title":"Activity 2: Setting up Kanban board and creating issues"},{"location":"recitations/reci1-github/#activity-3-branching-committing-and-pushing","text":"In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Potentially helpful TypeScript resources: exporting: https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#exporting-from-modules functions: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#functions Express req, res types - https://stackoverflow.com/a/58567246 Push the branch to remote git push --set-upstream origin <your-branch-name>","title":"Activity 3: Branching, committing, and pushing"},{"location":"recitations/reci1-github/#activity-4-writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that there are no eslint errors associated with the file that you translated and that the correctness tests still pass. Note that the GitHub action itself won't pass because the linter won't pass until both files are translated, i.e. both PRs are merged. Assign the issue you created to the pull request Request your partner for a code review TypeScript Translation Resources The following documentation pointers will help with the code changes you'll need to make - Exporting from Modules , Typing Functions , Express Req, Res types","title":"Activity 4: Writing pull requests"},{"location":"recitations/reci1-github/#activity-5a-doing-code-reviews-and-resolving-merge-conflicts","text":"Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column","title":"Activity 5a: Doing code reviews and resolving merge conflicts"},{"location":"recitations/reci1-github/#activity-5b-check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 5b: Check GitHub actions"},{"location":"recitations/reci1-nodeBB/","text":"Recitation 1: Understand NodeBB - DUE Friday January 17th, 11:59pm \u00b6 NOTE: because this recitation falls before the first day of class, we are having this recitation ONLY by asynchronous. You will complete online, and not attend recitation in person until week 2. \u00b6 Overview \u00b6 In this course, we will be building on a piece of open source software, NodeBB . NodeBB is \u201can innovative forum software designed to meet the needs of modern online communities.\u201d We will be using NodeBB for the majority of the semester, and we want to start by having you become familiar with the software. You can find an instance of the software deployed at: Class NodeBB To help yourself become more familiar with the site, we will ask you to interact with it in several ways. Activity 1: Create an account \u00b6 Create a user account using your Andrew ID as the username. You must use your Andrew ID for us to be able to identify you for assigning participation points. You can then edit your profile to add a \"Full Name\" and a profile picture. Note that the demo site does not have the ability to send emails of any kind, so please remember your password as it cannot be easily reset. Activity 2: Introduce Yourself \u00b6 You should introduce yourself to the rest of the class. Please create a post in the \u201cIntroductions\u201d category, which is only visible once you login*. You should include in your introduction the following info: What you want to be called A picture of you (ideally something that will help people recognize you when they see you in class) in the \"thumbnail\" of the post. A short description (1-3 sentences) about a software project you have enjoyed working on in the past, e.g. during an internship or a large-ish course project. A short summary of why you're taking this course (e.g., because it is a requirement for a specific program and/or because you hope to learn about X). Something that you like to do outside of work, or your favorite restaurant in Pittsburgh. Feel free to embed photos or links in the post. Activity 3: Reply to another post \u00b6 After you have introduced yourself, you should reply to at least one other introduction post made by someone else, and comment on or ask a specific question about their prior experience or personal hobby. Try using the \"quote reply\" feature (look for the double-quotation marks at the bottom-right of a post) to reply to a specific sentence from their post. Activity 4: Follow up \u00b6 Login again after a few hours to see if anyone has responded to your Introduction post, and answer their questions, if any. !!! note \"Introductions\" are not public The \"Introductions\" category is configured so that it will not be indexed by search engines, etc. and are only visible to logged-in users.","title":"Recitation 1 - Understand NodeBB"},{"location":"recitations/reci1-nodeBB/#recitation-1-understand-nodebb-due-friday-january-17th-1159pm","text":"","title":"Recitation 1: Understand NodeBB - DUE Friday January 17th, 11:59pm"},{"location":"recitations/reci1-nodeBB/#note-because-this-recitation-falls-before-the-first-day-of-class-we-are-having-this-recitation-only-by-asynchronous-you-will-complete-online-and-not-attend-recitation-in-person-until-week-2","text":"","title":"NOTE: because this recitation falls before the first day of class, we are having this recitation ONLY by asynchronous.  You will complete online, and not attend recitation in person until week 2."},{"location":"recitations/reci1-nodeBB/#overview","text":"In this course, we will be building on a piece of open source software, NodeBB . NodeBB is \u201can innovative forum software designed to meet the needs of modern online communities.\u201d We will be using NodeBB for the majority of the semester, and we want to start by having you become familiar with the software. You can find an instance of the software deployed at: Class NodeBB To help yourself become more familiar with the site, we will ask you to interact with it in several ways.","title":"Overview"},{"location":"recitations/reci1-nodeBB/#activity-1-create-an-account","text":"Create a user account using your Andrew ID as the username. You must use your Andrew ID for us to be able to identify you for assigning participation points. You can then edit your profile to add a \"Full Name\" and a profile picture. Note that the demo site does not have the ability to send emails of any kind, so please remember your password as it cannot be easily reset.","title":"Activity 1: Create an account"},{"location":"recitations/reci1-nodeBB/#activity-2-introduce-yourself","text":"You should introduce yourself to the rest of the class. Please create a post in the \u201cIntroductions\u201d category, which is only visible once you login*. You should include in your introduction the following info: What you want to be called A picture of you (ideally something that will help people recognize you when they see you in class) in the \"thumbnail\" of the post. A short description (1-3 sentences) about a software project you have enjoyed working on in the past, e.g. during an internship or a large-ish course project. A short summary of why you're taking this course (e.g., because it is a requirement for a specific program and/or because you hope to learn about X). Something that you like to do outside of work, or your favorite restaurant in Pittsburgh. Feel free to embed photos or links in the post.","title":"Activity 2: Introduce Yourself"},{"location":"recitations/reci1-nodeBB/#activity-3-reply-to-another-post","text":"After you have introduced yourself, you should reply to at least one other introduction post made by someone else, and comment on or ask a specific question about their prior experience or personal hobby. Try using the \"quote reply\" feature (look for the double-quotation marks at the bottom-right of a post) to reply to a specific sentence from their post.","title":"Activity 3: Reply to another post"},{"location":"recitations/reci1-nodeBB/#activity-4-follow-up","text":"Login again after a few hours to see if anyone has responded to your Introduction post, and answer their questions, if any. !!! note \"Introductions\" are not public The \"Introductions\" category is configured so that it will not be indexed by search engines, etc. and are only visible to logged-in users.","title":"Activity 4: Follow up"},{"location":"recitations/reci10-open-source/","text":"Recitation 10: Open Source Projects \u00b6 Overview \u00b6 This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5. Context \u00b6 Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license Scavenger Hunt (30 min) \u00b6 Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5. Reflection (10 min) \u00b6 With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5. Public Project Selection \u00b6 Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet . Resources \u00b6 A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Recitation 9 - Open Source Scavenger Hunt"},{"location":"recitations/reci10-open-source/#recitation-10-open-source-projects","text":"","title":"Recitation 10: Open Source Projects"},{"location":"recitations/reci10-open-source/#overview","text":"This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5.","title":"Overview"},{"location":"recitations/reci10-open-source/#context","text":"Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license","title":"Context"},{"location":"recitations/reci10-open-source/#scavenger-hunt-30-min","text":"Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5.","title":"Scavenger Hunt (30 min)"},{"location":"recitations/reci10-open-source/#reflection-10-min","text":"With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5.","title":"Reflection (10 min)"},{"location":"recitations/reci10-open-source/#public-project-selection","text":"Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet .","title":"Public Project Selection"},{"location":"recitations/reci10-open-source/#resources","text":"A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Resources"},{"location":"recitations/reci10-p5-checkin/","text":"Recitation 10: Open Source Project and Task Selection Check In \u00b6 This recitation will be supplemented with an asychronous project check in. You do not need to attend in person, instead, please upload a recording of your team presenting into the drive link below by Tuesday April 9th 11:59pm Wednesday, April 10th, 11:59pm. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on two peer presentations by Wednesday April 10th 11:59pm. Participation credit will be provided based on the feedback you provide.","title":"Recitation 10 - Open Source Project and Task Selection Check In"},{"location":"recitations/reci10-p5-checkin/#recitation-10-open-source-project-and-task-selection-check-in","text":"This recitation will be supplemented with an asychronous project check in. You do not need to attend in person, instead, please upload a recording of your team presenting into the drive link below by Tuesday April 9th 11:59pm Wednesday, April 10th, 11:59pm. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on two peer presentations by Wednesday April 10th 11:59pm. Participation credit will be provided based on the feedback you provide.","title":"Recitation 10: Open Source Project and Task Selection Check In"},{"location":"recitations/reci10-team-feedback/","text":"Recitation 10: Team Feedback \u00b6 Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 10 - Team Feedback"},{"location":"recitations/reci10-team-feedback/#recitation-10-team-feedback","text":"Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 10: Team Feedback"},{"location":"recitations/reci11-midterm-review/","text":"Recitation 11: Midterm Review \u00b6 This recitation is a chance for you to review and prepare for the midterm on April 17th. You might ask questions about course content, work on the Midterm 2 Practice Questions , or begin working on your cheat sheet. Complete your participation quiz Make sure to complete the quiz to receive participation credit for this recitation.","title":"Recitation 11 - Midterm Review"},{"location":"recitations/reci11-midterm-review/#recitation-11-midterm-review","text":"This recitation is a chance for you to review and prepare for the midterm on April 17th. You might ask questions about course content, work on the Midterm 2 Practice Questions , or begin working on your cheat sheet. Complete your participation quiz Make sure to complete the quiz to receive participation credit for this recitation.","title":"Recitation 11: Midterm Review"},{"location":"recitations/reci11-p5-checkin/","text":"Recitation 11: Open Source Project and Task Selection Check In \u00b6 This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11 - Open Source Project and Task Selection Check In"},{"location":"recitations/reci11-p5-checkin/#recitation-11-open-source-project-and-task-selection-check-in","text":"This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope and upload your team presentation video to the correct recitation folder. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11: Open Source Project and Task Selection Check In"},{"location":"recitations/reci13-open-source-presentation/","text":"Recitation 13 - Open Source Projects Presentation \u00b6 Overview \u00b6 This presentation slides are available in the following folder: Recitation 13 Folder on Google Drive","title":"Recitation 13 - Open Source Projects Presentation"},{"location":"recitations/reci13-open-source-presentation/#recitation-13-open-source-projects-presentation","text":"","title":"Recitation 13 - Open Source Projects Presentation"},{"location":"recitations/reci13-open-source-presentation/#overview","text":"This presentation slides are available in the following folder: Recitation 13 Folder on Google Drive","title":"Overview"},{"location":"recitations/reci2-teamcontract/","text":"Recitation 2: Team Contract Workshop \u00b6 Overview \u00b6 After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility. Prerequisites \u00b6 None! You will be doing the activities in your teams. Sit with them! Activity 1: Get to know your team! \u00b6 See team assignments here . Do some quick intros, then get ready for.. Activity 1A: Similarities! \u00b6 In your group, spend 5 minutes finding 5 things that every group member has in common. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026 Activity 1B: Team Name \u00b6 As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d Activity 2: Team Contract \u00b6 In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc.) and try to anticipate what might come up over the course of the semester. At the end of class, we'll discuss your ideas and see what you came up with! Activity 2A: Expectations \u00b6 Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on 17-313 projects? How will you deal with unforeseen circumstances affecting team members (e.g. sickness, interviews, competitions)? How will team members be kept accountable for their contributions? Activity 2B: Communication and Scheduling \u00b6 Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time for recurring meetings is a big marker of team success. What platform(s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or via Zoom? What are the expectations or non-negotiables for these meetings? If a deadline is approaching and tasks remain incomplete, how will you convene and communicate to ensure completion? Activity 2C: Responsibilities and Conflict Resolution \u00b6 Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will responsibilities and tasks be divided among team members? Who will be responsible for organizing, facilitating, and taking notes during meetings? How will this responsibility rotate? How will the team address any issues related to teamwork that may arise? What steps will the team take if a member is contributing too little, and at what point will this issue be escalated to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above. Activity 3: Group Reflection \u00b6 Think of this as your team's very first meeting! Spend five minutes reflecting on it. What went well? Did you notice anything that can be improved upon in future meetings? For instance, were everyone\u2019s ideas heard? Did everyone do their best to contribute? Do you have anything to add to your team contract? Remember to be constructive and tactful! Activity 4: Class Discussion \u00b6 Share 2-3 interesting things your team added to your contract!","title":"Recitation 2 - Team Contract Workshop"},{"location":"recitations/reci2-teamcontract/#recitation-2-team-contract-workshop","text":"","title":"Recitation 2: Team Contract Workshop"},{"location":"recitations/reci2-teamcontract/#overview","text":"After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility.","title":"Overview"},{"location":"recitations/reci2-teamcontract/#prerequisites","text":"None! You will be doing the activities in your teams. Sit with them!","title":"Prerequisites"},{"location":"recitations/reci2-teamcontract/#activity-1-get-to-know-your-team","text":"See team assignments here . Do some quick intros, then get ready for..","title":"Activity 1: Get to know your team!"},{"location":"recitations/reci2-teamcontract/#activity-1a-similarities","text":"In your group, spend 5 minutes finding 5 things that every group member has in common. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026","title":"Activity 1A: Similarities!"},{"location":"recitations/reci2-teamcontract/#activity-1b-team-name","text":"As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d","title":"Activity 1B: Team Name"},{"location":"recitations/reci2-teamcontract/#activity-2-team-contract","text":"In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc.) and try to anticipate what might come up over the course of the semester. At the end of class, we'll discuss your ideas and see what you came up with!","title":"Activity 2: Team Contract"},{"location":"recitations/reci2-teamcontract/#activity-2a-expectations","text":"Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on 17-313 projects? How will you deal with unforeseen circumstances affecting team members (e.g. sickness, interviews, competitions)? How will team members be kept accountable for their contributions?","title":"Activity 2A: Expectations"},{"location":"recitations/reci2-teamcontract/#activity-2b-communication-and-scheduling","text":"Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time for recurring meetings is a big marker of team success. What platform(s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or via Zoom? What are the expectations or non-negotiables for these meetings? If a deadline is approaching and tasks remain incomplete, how will you convene and communicate to ensure completion?","title":"Activity 2B: Communication and Scheduling"},{"location":"recitations/reci2-teamcontract/#activity-2c-responsibilities-and-conflict-resolution","text":"Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will responsibilities and tasks be divided among team members? Who will be responsible for organizing, facilitating, and taking notes during meetings? How will this responsibility rotate? How will the team address any issues related to teamwork that may arise? What steps will the team take if a member is contributing too little, and at what point will this issue be escalated to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 2C: Responsibilities and Conflict Resolution"},{"location":"recitations/reci2-teamcontract/#activity-3-group-reflection","text":"Think of this as your team's very first meeting! Spend five minutes reflecting on it. What went well? Did you notice anything that can be improved upon in future meetings? For instance, were everyone\u2019s ideas heard? Did everyone do their best to contribute? Do you have anything to add to your team contract? Remember to be constructive and tactful!","title":"Activity 3: Group Reflection"},{"location":"recitations/reci2-teamcontract/#activity-4-class-discussion","text":"Share 2-3 interesting things your team added to your contract!","title":"Activity 4: Class Discussion"},{"location":"recitations/reci3-archaeology/","text":"Recitation 3: Software Archaeology \u00b6 Overview \u00b6 In today\u2019s recitation, we will practice implementing a new feature for the NodeBB codebase. Let's implement a new feature! Check out this issue of the feature request. The user wants NodeBB to suggest a new username if an existing username is taken. (Don't worry about searching through all the users currently registered to suggest a new name, just make it suggest the current name the user wanted but with a suffix attached to it. Querying the backend server again is harder and is part of the optional task.) Task 0: Clone the repo \u00b6 Fork this repository and clone it. Follow the README to install the necessary modules and run NodeBB. Task 1: Reproduce the existing behaviour \u00b6 After you've successfully ran the program, go through it to reproduce the current behaviour. Task 2: Diving into the code and implement the new behaviour \u00b6 Let\u2019s learn more about the current implementation! Your high-level goal is to identify the code that implements current implementation and extends it to add the new feature. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the code. Try some or all of the following tasks: Explore the NodeBB directory Understand how current features are implemented. Can you identify whether to modify the front-end or back-end code of the program? Frontend code is located in public directory Backend code is located in src directory Can you identify the keywords that you would like to search in the repository? Maybe try searching for part of the error message that is currently showing. Use your IDE to jump to a definition implicated in the code you\u2019re debugging Warning Since error message involves i18n and l10n , please implement only the English version. Task 3: Making a Pull Request \u00b6 If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue. Task 4 (Optional): Suggest a unique username \u00b6 Can you suggest a unique username by querying the backend server again? For example, if test123 is taken, you should check if test1231 is taken, then test1232 , etc. You should display a username that has not yet been registered by anyone.","title":"Recitation 3 - Software Archaeology"},{"location":"recitations/reci3-archaeology/#recitation-3-software-archaeology","text":"","title":"Recitation 3: Software Archaeology"},{"location":"recitations/reci3-archaeology/#overview","text":"In today\u2019s recitation, we will practice implementing a new feature for the NodeBB codebase. Let's implement a new feature! Check out this issue of the feature request. The user wants NodeBB to suggest a new username if an existing username is taken. (Don't worry about searching through all the users currently registered to suggest a new name, just make it suggest the current name the user wanted but with a suffix attached to it. Querying the backend server again is harder and is part of the optional task.)","title":"Overview"},{"location":"recitations/reci3-archaeology/#task-0-clone-the-repo","text":"Fork this repository and clone it. Follow the README to install the necessary modules and run NodeBB.","title":"Task 0: Clone the repo"},{"location":"recitations/reci3-archaeology/#task-1-reproduce-the-existing-behaviour","text":"After you've successfully ran the program, go through it to reproduce the current behaviour.","title":"Task 1: Reproduce the existing behaviour"},{"location":"recitations/reci3-archaeology/#task-2-diving-into-the-code-and-implement-the-new-behaviour","text":"Let\u2019s learn more about the current implementation! Your high-level goal is to identify the code that implements current implementation and extends it to add the new feature. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the code. Try some or all of the following tasks: Explore the NodeBB directory Understand how current features are implemented. Can you identify whether to modify the front-end or back-end code of the program? Frontend code is located in public directory Backend code is located in src directory Can you identify the keywords that you would like to search in the repository? Maybe try searching for part of the error message that is currently showing. Use your IDE to jump to a definition implicated in the code you\u2019re debugging Warning Since error message involves i18n and l10n , please implement only the English version.","title":"Task 2: Diving into the code and implement the new behaviour"},{"location":"recitations/reci3-archaeology/#task-3-making-a-pull-request","text":"If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue.","title":"Task 3: Making a Pull Request"},{"location":"recitations/reci3-archaeology/#task-4-optional-suggest-a-unique-username","text":"Can you suggest a unique username by querying the backend server again? For example, if test123 is taken, you should check if test1231 is taken, then test1232 , etc. You should display a username that has not yet been registered by anyone.","title":"Task 4 (Optional): Suggest a unique username"},{"location":"recitations/reci4-checkpoint/","text":"Recitation 4: P2B Checkpoint Presentations \u00b6 Today we\u2019ll be having our project presentations. Please make sure to upload the link to the presentation on gradescope under recitation 4. The slides link uploaded will be used for participation credit and to help us grade in case we miss something during the presentation. See P2B Checkpoint Presentation for more details. Make sure to submit your slides on Gradescope before you present.","title":"Recitation 4 - Checkpoint Presentations"},{"location":"recitations/reci4-checkpoint/#recitation-4-p2b-checkpoint-presentations","text":"Today we\u2019ll be having our project presentations. Please make sure to upload the link to the presentation on gradescope under recitation 4. The slides link uploaded will be used for participation credit and to help us grade in case we miss something during the presentation. See P2B Checkpoint Presentation for more details. Make sure to submit your slides on Gradescope before you present.","title":"Recitation 4: P2B Checkpoint Presentations"},{"location":"recitations/reci5-team-dysfunction/","text":"Recitation 5: Team Dysfunction \u00b6 Learning objectives \u00b6 Practice and reflect about being within a team. Reinforce the knowledge of team dysfunction issues and mitigation strategies. Part 0: Preparation \u00b6 Use the number generator to get a random number from 1-7 that will determine your role. To know how you are supposed to act, reference the Roles & personality traits section for the role description based on your number. Part 1: Skit planning (15 minutes) \u00b6 You will be planning a 3-5 minute skit to perform in front of the class. Your skit will be about a team that is finding a tool to support the payment system of your graduate application. Here are some ideas of what the skit can include: Researching tools to support the payment system Comparing the strengths and weaknesses of the tools Trying to agree on a tool to use Assigning each member a task to do to integrate the payment system into the graduate application Have fun with the skit! Part 2: Skit performance (15 minutes) \u00b6 You will perform the skits in front of the class. As a class, try to guess for each performer: What dysfunctional characteristic did your teammates display? Part 3: Trade-off and task planning meeting (20 minutes) \u00b6 As a class, for each dysfunctional characteristic, discuss the following questions: How would you handle the dysfunctional characteristics in future situations? What problems can be caused by this behavior? Can you think of mitigation strategies and solutions to avoid them? Part 4: Submit on Gradescope \u00b6 To receive participation for this activity, please complete the quiz on Gradescope . Roles & personality traits \u00b6 Here\u2019s a description of the roles and the behavior each role has. Role Behavior Contributor Aim for general team success, discuss solutions with your team. Ask for their opinion and demonstrate engagement during the activity. Know-it-all You think you are extremely experienced and know how to solve the problem on your own. Act like you do not need help and just tell your team to watch while you search for the tool. Try to tell other members how to search for information about the tool. Be combative and shoot another member\u2019s idea down if possible. Act silent Pay attention to the meeting, but simply do not suggest anything. You assume your team members know everything and don\u2019t feel you need to say much. Remain passive but friendly. Agree with everything Do not question the decisions of your team. You are afraid of raising conflicts; so just agree with everything during the activity. Hitchhiking Your goal is to do as little work as possible. Be friendly but not productive. Try to get other people to step in for you, for example you can act confused with the task and say that you need someone else to do this for you. You may have to make a quick, bad attempt to make it look like you tried to figure out the task. Commitment issue Go along with the meeting, until when tasks are being assigned, say that you are busy with something (interview prep, midterm, other assignment). If asked if they could do something else, or if being pressed further continue giving excuses why you can\u2019t contribute. Perfectionist You will perfect even minor details. Your role is to make sure the tool\u2019s source code is readable and aesthetically perfect and that also includes perfect comments. You should argue for or against the tool based on these minor details.","title":"Recitation 5 - Team Dysfunction"},{"location":"recitations/reci5-team-dysfunction/#recitation-5-team-dysfunction","text":"","title":"Recitation 5: Team Dysfunction"},{"location":"recitations/reci5-team-dysfunction/#learning-objectives","text":"Practice and reflect about being within a team. Reinforce the knowledge of team dysfunction issues and mitigation strategies.","title":"Learning objectives"},{"location":"recitations/reci5-team-dysfunction/#part-0-preparation","text":"Use the number generator to get a random number from 1-7 that will determine your role. To know how you are supposed to act, reference the Roles & personality traits section for the role description based on your number.","title":"Part 0: Preparation"},{"location":"recitations/reci5-team-dysfunction/#part-1-skit-planning-15-minutes","text":"You will be planning a 3-5 minute skit to perform in front of the class. Your skit will be about a team that is finding a tool to support the payment system of your graduate application. Here are some ideas of what the skit can include: Researching tools to support the payment system Comparing the strengths and weaknesses of the tools Trying to agree on a tool to use Assigning each member a task to do to integrate the payment system into the graduate application Have fun with the skit!","title":"Part 1: Skit planning (15 minutes)"},{"location":"recitations/reci5-team-dysfunction/#part-2-skit-performance-15-minutes","text":"You will perform the skits in front of the class. As a class, try to guess for each performer: What dysfunctional characteristic did your teammates display?","title":"Part 2: Skit performance (15 minutes)"},{"location":"recitations/reci5-team-dysfunction/#part-3-trade-off-and-task-planning-meeting-20-minutes","text":"As a class, for each dysfunctional characteristic, discuss the following questions: How would you handle the dysfunctional characteristics in future situations? What problems can be caused by this behavior? Can you think of mitigation strategies and solutions to avoid them?","title":"Part 3: Trade-off and task planning meeting (20 minutes)"},{"location":"recitations/reci5-team-dysfunction/#part-4-submit-on-gradescope","text":"To receive participation for this activity, please complete the quiz on Gradescope .","title":"Part 4: Submit on Gradescope"},{"location":"recitations/reci5-team-dysfunction/#roles-personality-traits","text":"Here\u2019s a description of the roles and the behavior each role has. Role Behavior Contributor Aim for general team success, discuss solutions with your team. Ask for their opinion and demonstrate engagement during the activity. Know-it-all You think you are extremely experienced and know how to solve the problem on your own. Act like you do not need help and just tell your team to watch while you search for the tool. Try to tell other members how to search for information about the tool. Be combative and shoot another member\u2019s idea down if possible. Act silent Pay attention to the meeting, but simply do not suggest anything. You assume your team members know everything and don\u2019t feel you need to say much. Remain passive but friendly. Agree with everything Do not question the decisions of your team. You are afraid of raising conflicts; so just agree with everything during the activity. Hitchhiking Your goal is to do as little work as possible. Be friendly but not productive. Try to get other people to step in for you, for example you can act confused with the task and say that you need someone else to do this for you. You may have to make a quick, bad attempt to make it look like you tried to figure out the task. Commitment issue Go along with the meeting, until when tasks are being assigned, say that you are busy with something (interview prep, midterm, other assignment). If asked if they could do something else, or if being pressed further continue giving excuses why you can\u2019t contribute. Perfectionist You will perfect even minor details. Your role is to make sure the tool\u2019s source code is readable and aesthetically perfect and that also includes perfect comments. You should argue for or against the tool based on these minor details.","title":"Roles &amp; personality traits"},{"location":"recitations/reci6-deployment/","text":"Recitation 6: Deployment \u00b6 Overview \u00b6 Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Vercel and Microsoft Azure Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (02/25) lecture Definitions \u00b6 Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here! Task 0: Setting up your repository \u00b6 For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Thursday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture. Task 1: Continuous Deployment \u00b6 To start off, you'll be deploying the app you just forked on Vercel. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository. Task 1: Deploy on Vercel \u00b6 Create an account on Vercel by clicking \"Sign up\", choose a hobby account, then \"Continue with GitHub\" Add a new project Choose \"Import Git Repository\" Connect your basic-web-app fork to the Web Service you just created Name your project basic-web-app Click Deploy When the build completes, click on the link of the form *.vercel.app at the top of the page to view the deployment. Task 2: Implement \"What is your Andrew ID?\" \u00b6 To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the Vercel dashboard. Once the deployments are complete manually verify that both support the query you just implemented. Bonus Task: Continuous Integration \u00b6 While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope!","title":"Recitation 6 - Deployment"},{"location":"recitations/reci6-deployment/#recitation-6-deployment","text":"","title":"Recitation 6: Deployment"},{"location":"recitations/reci6-deployment/#overview","text":"Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Vercel and Microsoft Azure Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (02/25) lecture","title":"Overview"},{"location":"recitations/reci6-deployment/#definitions","text":"Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here!","title":"Definitions"},{"location":"recitations/reci6-deployment/#task-0-setting-up-your-repository","text":"For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Thursday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture.","title":"Task 0: Setting up your repository"},{"location":"recitations/reci6-deployment/#task-1-continuous-deployment","text":"To start off, you'll be deploying the app you just forked on Vercel. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository.","title":"Task 1: Continuous Deployment"},{"location":"recitations/reci6-deployment/#task-1-deploy-on-vercel","text":"Create an account on Vercel by clicking \"Sign up\", choose a hobby account, then \"Continue with GitHub\" Add a new project Choose \"Import Git Repository\" Connect your basic-web-app fork to the Web Service you just created Name your project basic-web-app Click Deploy When the build completes, click on the link of the form *.vercel.app at the top of the page to view the deployment.","title":"Task 1: Deploy on Vercel"},{"location":"recitations/reci6-deployment/#task-2-implement-what-is-your-andrew-id","text":"To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the Vercel dashboard. Once the deployments are complete manually verify that both support the query you just implemented.","title":"Task 2: Implement \"What is your Andrew ID?\""},{"location":"recitations/reci6-deployment/#bonus-task-continuous-integration","text":"While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope!","title":"Bonus Task: Continuous Integration"},{"location":"recitations/reci7-azure-setup/","text":"Recitation 7: Azure Setup \u00b6 As discussed in last recitation, Microsoft Azure is another cloud deloyment software similar to Vercel which you all have used in class before. We will be giving out access to Microsoft credits to each team. Only one person per group needs to setup the group Azure instance but everyone will have access to the shared resource. The purpose of this recitation is to help you and your team setup Azure for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on Azure . Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along on the slides and document presented here: See Slides on Instructions and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one Azure instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7 - Azure Setup"},{"location":"recitations/reci7-azure-setup/#recitation-7-azure-setup","text":"As discussed in last recitation, Microsoft Azure is another cloud deloyment software similar to Vercel which you all have used in class before. We will be giving out access to Microsoft credits to each team. Only one person per group needs to setup the group Azure instance but everyone will have access to the shared resource. The purpose of this recitation is to help you and your team setup Azure for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on Azure . Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along on the slides and document presented here: See Slides on Instructions and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one Azure instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7: Azure Setup"},{"location":"recitations/reci7-docker/","text":"Recitation 7: Microservices and Docker \u00b6 Prerequisites \u00b6 You should have downloaded Docker. If you haven't follow the installation instructions here Setup Instructions (10 min): \u00b6 Fork this repo and clone it. Also start the docker engine. Overview \u00b6 During this recitation, students will create a simple FastAPI app, containerize it and deploy it. Context \u00b6 Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] } Activity \u00b6 Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml . Bonus \u00b6 Try deploying your container using instructions from here .","title":"Recitation 7: Microservices and Docker"},{"location":"recitations/reci7-docker/#recitation-7-microservices-and-docker","text":"","title":"Recitation 7: Microservices and Docker"},{"location":"recitations/reci7-docker/#prerequisites","text":"You should have downloaded Docker. If you haven't follow the installation instructions here","title":"Prerequisites"},{"location":"recitations/reci7-docker/#setup-instructions-10-min","text":"Fork this repo and clone it. Also start the docker engine.","title":"Setup Instructions (10 min):"},{"location":"recitations/reci7-docker/#overview","text":"During this recitation, students will create a simple FastAPI app, containerize it and deploy it.","title":"Overview"},{"location":"recitations/reci7-docker/#context","text":"Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] }","title":"Context"},{"location":"recitations/reci7-docker/#activity","text":"Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml .","title":"Activity"},{"location":"recitations/reci7-docker/#bonus","text":"Try deploying your container using instructions from here .","title":"Bonus"},{"location":"recitations/reci7-dysfunction/","text":"Recitation 4: Team Dysfunction \u00b6 Overview \u00b6 This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies. Context \u00b6 All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better. Part 0: Preparation \u00b6 We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class. Part 1: Task Planning Meeting Rehearsal (5 min) \u00b6 Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system. Team 1 \u00b6 For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications. Team 2 \u00b6 For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students. Team 3 \u00b6 For your first assignment, you've been asked to develop a better system for students to log in to their application portal. Team 4 \u00b6 For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2. Part 2: Presentations! (15 min) \u00b6 Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize! Part 3: Class Discussion (15 min) \u00b6 As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems? Appendix A: Role Descriptions \u00b6 Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Recitation 4 - Team Dysfunction"},{"location":"recitations/reci7-dysfunction/#recitation-4-team-dysfunction","text":"","title":"Recitation 4: Team Dysfunction"},{"location":"recitations/reci7-dysfunction/#overview","text":"This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies.","title":"Overview"},{"location":"recitations/reci7-dysfunction/#context","text":"All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better.","title":"Context"},{"location":"recitations/reci7-dysfunction/#part-0-preparation","text":"We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class.","title":"Part 0: Preparation"},{"location":"recitations/reci7-dysfunction/#part-1-task-planning-meeting-rehearsal-5-min","text":"Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system.","title":"Part 1: Task Planning Meeting Rehearsal (5 min)"},{"location":"recitations/reci7-dysfunction/#team-1","text":"For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications.","title":"Team 1"},{"location":"recitations/reci7-dysfunction/#team-2","text":"For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students.","title":"Team 2"},{"location":"recitations/reci7-dysfunction/#team-3","text":"For your first assignment, you've been asked to develop a better system for students to log in to their application portal.","title":"Team 3"},{"location":"recitations/reci7-dysfunction/#team-4","text":"For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2.","title":"Team 4"},{"location":"recitations/reci7-dysfunction/#part-2-presentations-15-min","text":"Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize!","title":"Part 2: Presentations! (15 min)"},{"location":"recitations/reci7-dysfunction/#part-3-class-discussion-15-min","text":"As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems?","title":"Part 3: Class Discussion (15 min)"},{"location":"recitations/reci7-dysfunction/#appendix-a-role-descriptions","text":"Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Appendix A: Role Descriptions"},{"location":"recitations/reci7-llms/","text":"Recitation 7: Large Language Models \u00b6 Overview \u00b6 During this recitation, students will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Setup Instructions (5 min) \u00b6 For this recitation, you'll be using Google's Vertex AI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our GCP project to enable the API and create a copy of the Colab notebook. Note: if you have not yet created a GCP project and redeemed your credits, please refer to the instructions in Task 1B of Recitation 6 . Enable the Vertex AI API using this link . Make sure your NodeBB project from P3 or the basic web app from Recitation 6 is selected in the project selector dropdown. Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Activity 0: Install Dependencies and Authenticate GCP (5 min) \u00b6 Run the first cell of the notebook to install any Python dependencies. Follow the rest of the instructions in the notebook to authenticate GCP. Activity 1: Examine the Stanford Question Answering (SQuAD) Dataset (10 mins) \u00b6 The dataset contains a set of questions and answers to test a system for reading comprehension. Load in the dataset and understand the format. For one example, print out the context, question, and expected answer. Activity 2: Use the Vertex AI API to query the chat-bison LLM (10 min) \u00b6 Now that we have loaded the dataset, let's try querying an LLM to answer one of the questions. Refer to the Vertex Python SDK docs to load and query the model. For this exercise, choose the \" chat-bison@001 \" model. Try running the model on one of the examples from the SQuAD dataset. Does the output match the expected answer? Activity 3: Check Correctness of Output (10 min) \u00b6 When using an LLM, it is important to design an evaluation strategy for the task. This involves choosing a method of evaluating the correctness of the LLM output. Since the output in our task is textual, there are many difference ways of checking similarity to an expected answer. For now we will proceed with simply taking the percent of correct asnwers given by the LLM. Follow the notebook instructions to calculate cosine similarity for a sample of 10 questions. What are some limitations with this metric? Are there ways of changing the prompt to make the outputs better? Once you are done, submit the link to your Colab notebook to gradescope at this link .","title":"Recitation 7 - Large Language Models"},{"location":"recitations/reci7-llms/#recitation-7-large-language-models","text":"","title":"Recitation 7: Large Language Models"},{"location":"recitations/reci7-llms/#overview","text":"During this recitation, students will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"recitations/reci7-llms/#setup-instructions-5-min","text":"For this recitation, you'll be using Google's Vertex AI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to set up our GCP project to enable the API and create a copy of the Colab notebook. Note: if you have not yet created a GCP project and redeemed your credits, please refer to the instructions in Task 1B of Recitation 6 . Enable the Vertex AI API using this link . Make sure your NodeBB project from P3 or the basic web app from Recitation 6 is selected in the project selector dropdown. Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope.","title":"Setup Instructions (5 min)"},{"location":"recitations/reci7-llms/#activity-0-install-dependencies-and-authenticate-gcp-5-min","text":"Run the first cell of the notebook to install any Python dependencies. Follow the rest of the instructions in the notebook to authenticate GCP.","title":"Activity 0: Install Dependencies and Authenticate GCP (5 min)"},{"location":"recitations/reci7-llms/#activity-1-examine-the-stanford-question-answering-squad-dataset-10-mins","text":"The dataset contains a set of questions and answers to test a system for reading comprehension. Load in the dataset and understand the format. For one example, print out the context, question, and expected answer.","title":"Activity 1: Examine the Stanford Question Answering (SQuAD) Dataset (10 mins)"},{"location":"recitations/reci7-llms/#activity-2-use-the-vertex-ai-api-to-query-the-chat-bison-llm-10-min","text":"Now that we have loaded the dataset, let's try querying an LLM to answer one of the questions. Refer to the Vertex Python SDK docs to load and query the model. For this exercise, choose the \" chat-bison@001 \" model. Try running the model on one of the examples from the SQuAD dataset. Does the output match the expected answer?","title":"Activity 2: Use the Vertex AI API to query the chat-bison LLM (10 min)"},{"location":"recitations/reci7-llms/#activity-3-check-correctness-of-output-10-min","text":"When using an LLM, it is important to design an evaluation strategy for the task. This involves choosing a method of evaluating the correctness of the LLM output. Since the output in our task is textual, there are many difference ways of checking similarity to an expected answer. For now we will proceed with simply taking the percent of correct asnwers given by the LLM. Follow the notebook instructions to calculate cosine similarity for a sample of 10 questions. What are some limitations with this metric? Are there ways of changing the prompt to make the outputs better? Once you are done, submit the link to your Colab notebook to gradescope at this link .","title":"Activity 3: Check Correctness of Output (10 min)"},{"location":"recitations/reci7-onprem-setup/","text":"Recitation 7: Linux VM Setup \u00b6 Although not discussed in the last recitation, another common method for deploying services is on-premises infrastructure, which is widely utilized by large corporations, particularly in the finance industry. Unlike Vercel, which specializes in cloud-based deployment and offers streamlined solutions for web applications, typically on-premises deployment provides organizations with greater control over their hardware, data security, and compliance requirements, albeit at the cost of higher maintenance and upfront investment. Emails were sent out to each group with instructions on how to connect to their VM. Only one person per group needs to setup the hosted group instance and everyone will have access to the VM and resource. The purpose of this recitation is to help you and your team host NodeBB on your Linux VM for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on an On Premises Deployment (hosted at CMU). Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along through each line on the slides/document presented here: See Slides on Instructions (TBA) and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one hosted instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7 - On Prem Deployment"},{"location":"recitations/reci7-onprem-setup/#recitation-7-linux-vm-setup","text":"Although not discussed in the last recitation, another common method for deploying services is on-premises infrastructure, which is widely utilized by large corporations, particularly in the finance industry. Unlike Vercel, which specializes in cloud-based deployment and offers streamlined solutions for web applications, typically on-premises deployment provides organizations with greater control over their hardware, data security, and compliance requirements, albeit at the cost of higher maintenance and upfront investment. Emails were sent out to each group with instructions on how to connect to their VM. Only one person per group needs to setup the hosted group instance and everyone will have access to the VM and resource. The purpose of this recitation is to help you and your team host NodeBB on your Linux VM for use in Project 3 where you will be integrating CI/CD tools into development practice. Today, we will be walking through setting up your team's NodeBB instance on an On Premises Deployment (hosted at CMU). Since each group will be working to set up one instance, make sure to help one person on each team go through the setup step by step. Make sure to follow along through each line on the slides/document presented here: See Slides on Instructions (TBA) and see Document on Instructions Make sure to Submit on Gradescope after this recitation. There should be one hosted instance per group but each team member should make a submission onto Gradescope.","title":"Recitation 7: Linux VM Setup"},{"location":"recitations/reci7-static-analysis-ci/","text":"Recitation 7: Static Analysis and Continuous Integration \u00b6 Static and dynamic analysis tools help you keep the codebase healthy. In this recitation, we will learn how to set up these tools in CI (GitHub Actions). Step 1: Setup your sample Python repo \u00b6 First, go to this template repo and use it to create your own repo. This repo should be very similar to something you've seen before, except it comes with a failing test. You already learned that it's a big no-no to push directly to main . We can actually enforce this using branch protect rules . Read the docs to understand what they are, and set the following rules: Requires a pull request before merging to main Requires tests to pass before merging to main : Search for the job name in the required checks (i.e. test in this case.) You may need to save the settings first before this search box appears. Your setting should look like this: The failing test cases \u274c wouldn\u2019t have been there if I had these rules enabled in the first place. Now, let's fix our failing test. Step 2: Fix the broken CI \u00b6 The \u274c really shouldn't have been there in the first place if I had these rules enabled. Now let's fix it. Branch off from main and create a PR to fix the broken CI. Take a look in the Actions page to see which test is failing. Branch off from main and create a PR to fix the broken CI. (the fix should be VERY simple!) The test job should pass on your PR. Click \"Squash and merge\"* to merge after the status checks pass. *: It's just a lot cleaner than the default merge. HINT: If you are really stuck on how to fix, click here Step 3: Make your code pretty \u00b6 Different tab sizes driving you crazy? Let's use a tool to standardize them all. A code formatter, a static analysis tool, helps one identify and fix formatting issues in the codebase. Let's use black as an example. First, create another branch for setting up a code formatter. Then, run the following commands to install it locally and try running it: pipenv install --dev black : black is only a development dependency . Your package doesn't actually use it. pipenv run black . --check : Runs black in the current directory. --check dry-runs black and don't alter any files. Observe some files on the list. pipenv run black . : This will actually change the files. Run git diff to observe the file changes. Using CI, we can enforce formatting requirements using the same GH Actions + status checks. For popular tools, someone has done it before, and you can reuse their workflow. Go to this existing black Actions on GH Marketplace Click \"Use latest version\" to see what needs to be added to .github/workflows/main.yml Add another job called \u201cformat\u201d to the main.yml file to use black to check the file formatting Push your formatted files to the branch and observe format passes. Squash and merge the PR Step 4: Add test coverage to the CI workflow \u00b6 Finally, you can also do some dynamic analysis. Since we are already using pytest , let's use pytest-cov , a plugin that reports test coverage. First, install and try to use it locally: Create another branch Install pytest-cov locally: pipenv install --dev pytest-cov Runs pytest with coverage report: pipenv run pytest --cov=app Now, let's add another job in the workflow for reporting coverage: From the test workflow, copy the steps before pytest Now, run pipenv run pytest --cov=app to report coverage Push and observe the new check running Bonus: report coverage in PRs \u00b6 The coverage job doesn't really add much to the workflow now since it doesn't fail. Without being too strict about coverage, we can at least display the coverage status in the PR. Somebody has already done it , so we can use it in our repo too. Hint : you should only need the last two steps in the workflow. Note that this action will only run on pull request-based workflows, so you will need to modify your triggers. If set up, the job will automatically comment on PRs with the coverage info:","title":"Recitation 7 - Static Analysis and Continuous Integration"},{"location":"recitations/reci7-static-analysis-ci/#recitation-7-static-analysis-and-continuous-integration","text":"Static and dynamic analysis tools help you keep the codebase healthy. In this recitation, we will learn how to set up these tools in CI (GitHub Actions).","title":"Recitation 7: Static Analysis and Continuous Integration"},{"location":"recitations/reci7-static-analysis-ci/#step-1-setup-your-sample-python-repo","text":"First, go to this template repo and use it to create your own repo. This repo should be very similar to something you've seen before, except it comes with a failing test. You already learned that it's a big no-no to push directly to main . We can actually enforce this using branch protect rules . Read the docs to understand what they are, and set the following rules: Requires a pull request before merging to main Requires tests to pass before merging to main : Search for the job name in the required checks (i.e. test in this case.) You may need to save the settings first before this search box appears. Your setting should look like this: The failing test cases \u274c wouldn\u2019t have been there if I had these rules enabled in the first place. Now, let's fix our failing test.","title":"Step 1: Setup your sample Python repo"},{"location":"recitations/reci7-static-analysis-ci/#step-2-fix-the-broken-ci","text":"The \u274c really shouldn't have been there in the first place if I had these rules enabled. Now let's fix it. Branch off from main and create a PR to fix the broken CI. Take a look in the Actions page to see which test is failing. Branch off from main and create a PR to fix the broken CI. (the fix should be VERY simple!) The test job should pass on your PR. Click \"Squash and merge\"* to merge after the status checks pass. *: It's just a lot cleaner than the default merge. HINT: If you are really stuck on how to fix, click here","title":"Step 2: Fix the broken CI"},{"location":"recitations/reci7-static-analysis-ci/#step-3-make-your-code-pretty","text":"Different tab sizes driving you crazy? Let's use a tool to standardize them all. A code formatter, a static analysis tool, helps one identify and fix formatting issues in the codebase. Let's use black as an example. First, create another branch for setting up a code formatter. Then, run the following commands to install it locally and try running it: pipenv install --dev black : black is only a development dependency . Your package doesn't actually use it. pipenv run black . --check : Runs black in the current directory. --check dry-runs black and don't alter any files. Observe some files on the list. pipenv run black . : This will actually change the files. Run git diff to observe the file changes. Using CI, we can enforce formatting requirements using the same GH Actions + status checks. For popular tools, someone has done it before, and you can reuse their workflow. Go to this existing black Actions on GH Marketplace Click \"Use latest version\" to see what needs to be added to .github/workflows/main.yml Add another job called \u201cformat\u201d to the main.yml file to use black to check the file formatting Push your formatted files to the branch and observe format passes. Squash and merge the PR","title":"Step 3: Make your code pretty"},{"location":"recitations/reci7-static-analysis-ci/#step-4-add-test-coverage-to-the-ci-workflow","text":"Finally, you can also do some dynamic analysis. Since we are already using pytest , let's use pytest-cov , a plugin that reports test coverage. First, install and try to use it locally: Create another branch Install pytest-cov locally: pipenv install --dev pytest-cov Runs pytest with coverage report: pipenv run pytest --cov=app Now, let's add another job in the workflow for reporting coverage: From the test workflow, copy the steps before pytest Now, run pipenv run pytest --cov=app to report coverage Push and observe the new check running","title":"Step 4: Add test coverage to the CI workflow"},{"location":"recitations/reci7-static-analysis-ci/#bonus-report-coverage-in-prs","text":"The coverage job doesn't really add much to the workflow now since it doesn't fail. Without being too strict about coverage, we can at least display the coverage status in the PR. Somebody has already done it , so we can use it in our repo too. Hint : you should only need the last two steps in the workflow. Note that this action will only run on pull request-based workflows, so you will need to modify your triggers. If set up, the job will automatically comment on PRs with the coverage info:","title":"Bonus: report coverage in PRs"},{"location":"recitations/reci8-llms/","text":"Recitation 8: Large Language Models \u00b6 Overview \u00b6 During this recitation, you will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Instructions \u00b6 For this recitation and Project 4, you'll be using the OpenAI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to create a copy of the Colab notebook. Note: get your OpenAI keys from here Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Have fun with the activity! Once you are done, submit the link to your Colab notebook and the answers to the question in Gradescope at this link .","title":"Recitation 8 - LLMs"},{"location":"recitations/reci8-llms/#recitation-8-large-language-models","text":"","title":"Recitation 8: Large Language Models"},{"location":"recitations/reci8-llms/#overview","text":"During this recitation, you will be able to run and evaluate a large language model on an example question/answer dataset. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"recitations/reci8-llms/#instructions","text":"For this recitation and Project 4, you'll be using the OpenAI Platform in a Colab notebook to query a large language model on a question/answer dataset. First, we need to create a copy of the Colab notebook. Note: get your OpenAI keys from here Open the Colab notebook using this link . Click on File --> Save as a copy in Drive to create your own copy that you will work on. Click on Share and make sure the Colab notebook is editable by anyone in Carnegie Mellon University. You will submit a link to this notebook for Gradescope. Have fun with the activity! Once you are done, submit the link to your Colab notebook and the answers to the question in Gradescope at this link .","title":"Instructions"},{"location":"recitations/reci8-team-feedback/","text":"Recitation 8: Team Feedback \u00b6 Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8 - Team Feedback"},{"location":"recitations/reci8-team-feedback/#recitation-8-team-feedback","text":"Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8: Team Feedback"},{"location":"recitations/reci9-ml/","text":"Recitation 9: Machine Learning \u00b6 Setup Instructions: \u00b6 Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup Overview \u00b6 During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Context \u00b6 You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb. Activity 1: Examine the Titanic Dataset (10 mins) \u00b6 The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it? Activity 2: Import and Analyze Models (5 min) \u00b6 We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section. Activity 3: Fairness Metrics Evaluation (15 mins) \u00b6 An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates. Activity 4: Recommendation (10 mins) \u00b6 Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Recitation 9 - Machine Learning"},{"location":"recitations/reci9-ml/#recitation-9-machine-learning","text":"","title":"Recitation 9:  Machine Learning"},{"location":"recitations/reci9-ml/#setup-instructions","text":"Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup","title":"Setup Instructions:"},{"location":"recitations/reci9-ml/#overview","text":"During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"recitations/reci9-ml/#context","text":"You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb.","title":"Context"},{"location":"recitations/reci9-ml/#activity-1-examine-the-titanic-dataset-10-mins","text":"The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it?","title":"Activity 1: Examine the Titanic Dataset (10 mins)"},{"location":"recitations/reci9-ml/#activity-2-import-and-analyze-models-5-min","text":"We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section.","title":"Activity 2: Import and Analyze Models (5 min)"},{"location":"recitations/reci9-ml/#activity-3-fairness-metrics-evaluation-15-mins","text":"An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates.","title":"Activity 3: Fairness Metrics Evaluation (15 mins)"},{"location":"recitations/reci9-ml/#activity-4-recommendation-10-mins","text":"Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Activity 4: Recommendation (10 mins)"},{"location":"recitations/reci9-open-source/","text":"Recitation 9: Open Source Projects \u00b6 Overview \u00b6 This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5. Context \u00b6 Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license Scavenger Hunt (30 min) \u00b6 Join the slide deck here made for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5. Reflection (10 min) \u00b6 With your team, discuss the following questions: * Which attributes make a good open source project? A bad open source project? * Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5. Public Project Selection \u00b6 Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet . Resources \u00b6 A list of good first issues: https://goodfirstissues.com/ Another list of good first issues: https://goodfirstissue.dev/ Another good first issue list: https://finder.eddiehub.io/ The GitHub page for the good-first-issue topic: https://github.com/topics/good-first-issue A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors Hall of Fame \u00b6 Here's some extra motivation for picking merging your final pull requests into your open source project! Explore some merged PRs in open source projects from previous semesters in the Hall of Fame .","title":"Recitation 9 - Open Source Projects"},{"location":"recitations/reci9-open-source/#recitation-9-open-source-projects","text":"","title":"Recitation 9: Open Source Projects"},{"location":"recitations/reci9-open-source/#overview","text":"This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5.","title":"Overview"},{"location":"recitations/reci9-open-source/#context","text":"Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license","title":"Context"},{"location":"recitations/reci9-open-source/#scavenger-hunt-30-min","text":"Join the slide deck here made for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5.","title":"Scavenger Hunt (30 min)"},{"location":"recitations/reci9-open-source/#reflection-10-min","text":"With your team, discuss the following questions: * Which attributes make a good open source project? A bad open source project? * Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5.","title":"Reflection (10 min)"},{"location":"recitations/reci9-open-source/#public-project-selection","text":"Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet .","title":"Public Project Selection"},{"location":"recitations/reci9-open-source/#resources","text":"A list of good first issues: https://goodfirstissues.com/ Another list of good first issues: https://goodfirstissue.dev/ Another good first issue list: https://finder.eddiehub.io/ The GitHub page for the good-first-issue topic: https://github.com/topics/good-first-issue A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Resources"},{"location":"recitations/reci9-open-source/#hall-of-fame","text":"Here's some extra motivation for picking merging your final pull requests into your open source project! Explore some merged PRs in open source projects from previous semesters in the Hall of Fame .","title":"Hall of Fame"},{"location":"recitations/reci9-team-feedback/","text":"Recitation 9: Team Feedback \u00b6 Overview \u00b6 During this recitation, you will review the feedback provided by your teammates, work with your team to identify and address issues on your team, and create a team action plan! Instructions \u00b6 Review the feedback provided in your individual feedback report. Discuss the evaluations and feedback report with your team members. Have one member of your team open and create a copy of the Team Feedback Discussions Handout found here . Click on File --> Save as copy in Drive to create a copy that your team will work on together. Click on Share and make sure the Google Doc is editable by anyone in Carnegie Mellon University. You will submit a link to this handout on Gradescope. Have the one team member who made a copy of the Team Feedback Discussions Handout share the link with the rest of your team Create a team action plan. Do so by following the instructions on the Team Feedback Discussions Handout. Do not forget to include the names of all team members who are present for these discussions at the top of your team action plan. Once you are done, make sure to submit a link to the handout with your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 9 - Team Feedback"},{"location":"recitations/reci9-team-feedback/#recitation-9-team-feedback","text":"","title":"Recitation 9: Team Feedback"},{"location":"recitations/reci9-team-feedback/#overview","text":"During this recitation, you will review the feedback provided by your teammates, work with your team to identify and address issues on your team, and create a team action plan!","title":"Overview"},{"location":"recitations/reci9-team-feedback/#instructions","text":"Review the feedback provided in your individual feedback report. Discuss the evaluations and feedback report with your team members. Have one member of your team open and create a copy of the Team Feedback Discussions Handout found here . Click on File --> Save as copy in Drive to create a copy that your team will work on together. Click on Share and make sure the Google Doc is editable by anyone in Carnegie Mellon University. You will submit a link to this handout on Gradescope. Have the one team member who made a copy of the Team Feedback Discussions Handout share the link with the rest of your team Create a team action plan. Do so by following the instructions on the Team Feedback Discussions Handout. Do not forget to include the names of all team members who are present for these discussions at the top of your team action plan. Once you are done, make sure to submit a link to the handout with your completed action plan on gradescope to receive participation credit for this recitation.","title":"Instructions"},{"location":"recitations/archive/reci2-angularjs/","text":"Recitation 2: Crash Course in Angular.js \u00b6 Overview \u00b6 This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment. Pre-requisites \u00b6 Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge Task 0: Fork the repl \u00b6 Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js Task 1: Setup Angular.js \u00b6 Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app> Task 2: Data Binding Basics \u00b6 Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time Task 3: Setting up the controller \u00b6 Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias Task 4: Rendering the list of todo items \u00b6 Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered Task 5: Adding new todo items \u00b6 Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\"> Task 6: Special styling for completed todo items \u00b6 Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Recitation 2 - Angular.js and MVC"},{"location":"recitations/archive/reci2-angularjs/#recitation-2-crash-course-in-angularjs","text":"","title":"Recitation 2: Crash Course in Angular.js"},{"location":"recitations/archive/reci2-angularjs/#overview","text":"This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment.","title":"Overview"},{"location":"recitations/archive/reci2-angularjs/#pre-requisites","text":"Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge","title":"Pre-requisites"},{"location":"recitations/archive/reci2-angularjs/#task-0-fork-the-repl","text":"Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js","title":"Task 0: Fork the repl"},{"location":"recitations/archive/reci2-angularjs/#task-1-setup-angularjs","text":"Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app>","title":"Task 1: Setup Angular.js"},{"location":"recitations/archive/reci2-angularjs/#task-2-data-binding-basics","text":"Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time","title":"Task 2: Data Binding Basics"},{"location":"recitations/archive/reci2-angularjs/#task-3-setting-up-the-controller","text":"Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias","title":"Task 3: Setting up the controller"},{"location":"recitations/archive/reci2-angularjs/#task-4-rendering-the-list-of-todo-items","text":"Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered","title":"Task 4: Rendering the list of todo items"},{"location":"recitations/archive/reci2-angularjs/#task-5-adding-new-todo-items","text":"Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\">","title":"Task 5: Adding new todo items"},{"location":"recitations/archive/reci2-angularjs/#task-6-special-styling-for-completed-todo-items","text":"Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Task 6: Special styling for completed todo items"},{"location":"recitations/archive/reci3-deployment/","text":"Recitation 3: Deployment \u00b6 Overview \u00b6 Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Render and Google Cloud Platform. Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (9/19) lecture Definitions \u00b6 Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here! Task 0: Setting up your repository \u00b6 For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture. Task 1: Continuous Deployment \u00b6 To start off, you'll be deploying the app you just forked on two cloud platforms - Render and Google Cloud Platform. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository. Task 1A: Deploy on Render \u00b6 Create an account on Render Create a new Web Service Choose \"Build and deploy from a Git repository\" Click on Configure account under GitHub, to give Render access to your GitHub repositories - this is necessary to setup continuous deployment. Connect your basic-web-app fork to the Web Service you just created Name your web server <andrewID>-313 Set the Runtime to \"Node\", Build Command to npm install; npm run build and Start Command to npm start Make sure that the \"Free\" Instance Type is selected, and click \"Create Web Service\" When the build completes, click on the link of the form *.onrender.com at the top of the page to view the deployment. Task 1B: Deploy on Google Cloud Platform \u00b6 First, you need to redeem your GCP credits using the following instructions. Fill out the this form link with your first/last name, and Andrew ID Go to your school email and click the link in an email from \"Google Cloud Notifications\" to verify your email address Go back to your email, click on the link (\"click here to redeem\") within a second email from \"Google Cloud Notifications,\" and copy the provided code into the field within the new link Once you submit, a $50 credit should be applied to your GCP billing account. Do not misuse! We've been awarded enough credits such that each student in 17-313 can redeem one coupon. We'll be closely monitoring coupon redemption. Any and all misuse including sharing redemption instructions, redeeming multiple times, etc. will be punished. Now that you've redeemed your coupon, use the following instructions to deploy on GCP. Create a project called \"Extreme Startup\" using the GCP Cloud Console (you can set the location to \"Students\") Visit the Cloud Run console and select the project you just created using the project selector drop down(top-left) Click on \"Create Service\" Select \"Continuously deploy new revisions from a source repository\" and click \"Set up with Cloud Build\" Set the Source repository to be your basic-web-app fork - you may need to click on \"Manage connected repositories\" and authenticate with GitHub if you don't see the repository. Set the Build Type to the \"Go, Node.js, Python, ...\" option Set the Entrypoint to be npm install; npm run build; npm start In the \"Authentication\" section select \"Allow unauthenticated invocations\" and hit \"Create\" Once the deployment is complete, click on the URL of the form *.run.app at the top of the page to view the deployment. With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed on both Render and GCP. Cool! Task 2: Implement \"What is your Andrew ID?\" \u00b6 To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented. Bonus Task: Continuous Integration \u00b6 While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 3 Quiz on Gradescope!","title":"Recitation 3: Deployment"},{"location":"recitations/archive/reci3-deployment/#recitation-3-deployment","text":"","title":"Recitation 3: Deployment"},{"location":"recitations/archive/reci3-deployment/#overview","text":"Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with multiple cloud providers - Render and Google Cloud Platform. Set up and get familiarized with the Extreme Startup web app for use in Tuesday's (9/19) lecture","title":"Overview"},{"location":"recitations/archive/reci3-deployment/#definitions","text":"Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here!","title":"Definitions"},{"location":"recitations/archive/reci3-deployment/#task-0-setting-up-your-repository","text":"For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the Extreme Startup game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run and test the development server locally. Once you have it running locally visit http://localhost:3000 and try different queries like \"Who was Shakespeare?\" and \"What is your Andrew ID?\" Also visit http://localhost:3000/api?q=shakespeare - this is the API endpoint that our game server will use at next week's lecture.","title":"Task 0: Setting up your repository"},{"location":"recitations/archive/reci3-deployment/#task-1-continuous-deployment","text":"To start off, you'll be deploying the app you just forked on two cloud platforms - Render and Google Cloud Platform. The goal here is to make your app accessible over the internet via two platforms. You'll also be setting up continuous deployment such that both of these deployments are updated with the latest version of the app, whenever you push code to the main branch of your repository.","title":"Task 1: Continuous Deployment"},{"location":"recitations/archive/reci3-deployment/#task-1a-deploy-on-render","text":"Create an account on Render Create a new Web Service Choose \"Build and deploy from a Git repository\" Click on Configure account under GitHub, to give Render access to your GitHub repositories - this is necessary to setup continuous deployment. Connect your basic-web-app fork to the Web Service you just created Name your web server <andrewID>-313 Set the Runtime to \"Node\", Build Command to npm install; npm run build and Start Command to npm start Make sure that the \"Free\" Instance Type is selected, and click \"Create Web Service\" When the build completes, click on the link of the form *.onrender.com at the top of the page to view the deployment.","title":"Task 1A: Deploy on Render"},{"location":"recitations/archive/reci3-deployment/#task-1b-deploy-on-google-cloud-platform","text":"First, you need to redeem your GCP credits using the following instructions. Fill out the this form link with your first/last name, and Andrew ID Go to your school email and click the link in an email from \"Google Cloud Notifications\" to verify your email address Go back to your email, click on the link (\"click here to redeem\") within a second email from \"Google Cloud Notifications,\" and copy the provided code into the field within the new link Once you submit, a $50 credit should be applied to your GCP billing account. Do not misuse! We've been awarded enough credits such that each student in 17-313 can redeem one coupon. We'll be closely monitoring coupon redemption. Any and all misuse including sharing redemption instructions, redeeming multiple times, etc. will be punished. Now that you've redeemed your coupon, use the following instructions to deploy on GCP. Create a project called \"Extreme Startup\" using the GCP Cloud Console (you can set the location to \"Students\") Visit the Cloud Run console and select the project you just created using the project selector drop down(top-left) Click on \"Create Service\" Select \"Continuously deploy new revisions from a source repository\" and click \"Set up with Cloud Build\" Set the Source repository to be your basic-web-app fork - you may need to click on \"Manage connected repositories\" and authenticate with GitHub if you don't see the repository. Set the Build Type to the \"Go, Node.js, Python, ...\" option Set the Entrypoint to be npm install; npm run build; npm start In the \"Authentication\" section select \"Allow unauthenticated invocations\" and hit \"Create\" Once the deployment is complete, click on the URL of the form *.run.app at the top of the page to view the deployment. With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed on both Render and GCP. Cool!","title":"Task 1B: Deploy on Google Cloud Platform"},{"location":"recitations/archive/reci3-deployment/#task-2-implement-what-is-your-andrew-id","text":"To test that the continuous deployments are working as expected, and familiarize yourself with the basic web app codebase, let's implement support for the query \"What is your Andrew ID?\" Extend the QueryProcessor function to support this question in utils/QueryProcessor.tsx - this is where all the Query Processing logic exists Verify that the implementation is correct by running the app locally and testing manually. Write a test for the query you just implemented in __tests__/utils/QueryProcess.test.ts Verify that the tests function correctly by running npm run test . Commit and push your changes Once pushed, verify that CD is functioning correctly by checking that a new deployment is triggered on the GCP and Render dashboards. Once the deployments are complete manually verify that both support the query you just implemented.","title":"Task 2: Implement \"What is your Andrew ID?\""},{"location":"recitations/archive/reci3-deployment/#bonus-task-continuous-integration","text":"While the steps above are all that is required for the Extreme Startup game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Conditional CD In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game next week. Good job and good luck! Remember to do Recitation 3 Quiz on Gradescope!","title":"Bonus Task: Continuous Integration"},{"location":"recitations/archive/reci6-midterm-review/","text":"Recitation 6: Midterm Review \u00b6 Overview \u00b6 As we have our midterm scheduled for Tuesday, October 10th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam. Exams \u00b6 Fall 2020 Fall 2021 Fall 2022","title":"Recitation 6 - Midterm Review"},{"location":"recitations/archive/reci6-midterm-review/#recitation-6-midterm-review","text":"","title":"Recitation 6: Midterm Review"},{"location":"recitations/archive/reci6-midterm-review/#overview","text":"As we have our midterm scheduled for Tuesday, October 10th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam.","title":"Overview"},{"location":"recitations/archive/reci6-midterm-review/#exams","text":"Fall 2020 Fall 2021 Fall 2022","title":"Exams"}]}
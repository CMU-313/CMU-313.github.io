{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"17-313 Foundations of Software Engineering \u00b6 This Week \u00b6 Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None! Class Calendar \u00b6 Weekly Schedule \u00b6 Date Lecture Reading Recitation Project Deadline Mon Jan 16 MLK Day [No Recitation] Project 1 Due Thurs Jan 26 @ 11:59pm description Handout Tue Jan 17 Intro Wed Jan 18 Thu Jan 19 Metrics and Measurement Team Formation Survey Fri Jan 20 Mon Jan 23 Recitation 1 - GitHub and TS description Handout equalizer Quiz Tue Jan 24 Boeing 737 Max Case Study Boeing 737 Max Wed Jan 25 Thu Jan 26 Milestones, Estimation, and Planning Fri Jan 27 Project 2A Due Thurs Feb 2 @ 11:59pm description Handout Mon Jan 30 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 31 Teams Wed Feb 01 Thu Feb 02 Communication Fri Feb 03 Project 2B Due Tues Feb 14 @ 11:59pm description Handout Mon Feb 06 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 07 Risk Wed Feb 08 Thu Feb 09 Software Quality Fri Feb 10 Mon Feb 13 In-Class Presentations Tue Feb 14 Intro to Architecture Wed Feb 15 Project 2C Due Thurs Mar 2 @ 11:59pm description Handout Thu Feb 16 Microservices Fri Feb 17 Mon Feb 20 Recitation 4 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 21 Advanced Testing Wed Feb 22 Thu Feb 23 Design Documents Fri Feb 24 Mon Feb 27 Recitation 5 - Midterm Review description Handout Tue Feb 28 Midterm Exam Wed Mar 01 Thu Mar 02 QA: Static and Dynamic Analysis Fri Mar 03 Spring Break - No HW Mon Mar 06 Spring Break [No Recitation] Tue Mar 07 Spring Break - No Lecture Wed Mar 08 Thu Mar 09 Spring Break - No Lecture Fri Mar 10 Mon Mar 13 Recitation 6 - Deployment description Handout equalizer Quiz Project 3 Checkpoint Due Thurs Mar 16 @ 11:59pm description Handout Tue Mar 14 Activity: Extreme Startup Wed Mar 15 Thu Mar 16 Software Engineering for Machine Learning Fri Mar 17 Project 3 Final Due Thurs Mar 23 @ 11:59pm description Handout Mon Mar 20 Recitation 7 - Docker and Containerization slideshow Slides description Handout equalizer Quiz Tue Mar 21 Guest Lecture: Nadia Nahar - SE for ML Wed Mar 22 Thu Mar 23 Guest Lecture: Kori Krueger - Delivering Effective Feedback Fri Mar 24 Project 4 Checkpoint Due Tues Apr 4 @ 11:59pm description Handout Mon Mar 27 Recitation 8 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Mar 28 Fairness Evaluation Wed Mar 29 Thu Mar 30 Dependency Management Fri Mar 31 Mon Apr 03 Recitation 9 - Machine Learning slideshow Slides description Handout equalizer Quiz Tue Apr 04 Ethics Wed Apr 05 Project 4 Final Due Tues Apr 11 @ 11:59pm description Handout Thu Apr 06 AI Tools Fri Apr 07 Mon Apr 10 Recitation 10 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Apr 11 Open Source Wed Apr 12 Project 5 Checkpoint Due Mon Apr 17 @ 11:59pm description Handout Thu Apr 13 No Class- Carnival Fri Apr 14 Mon Apr 17 Recitation 11 - Open Source Project and Task Selection Check In description Handout equalizer Quiz Tue Apr 18 Offers for Software Engineers Project 5 Final Due Mon May 8 @ 11:59pm description Handout Wed Apr 19 Thu Apr 20 Patents and more Fri Apr 21 Mon Apr 24 Tue Apr 25 Grad school Wed Apr 26 Thu Apr 27 Review Fri Apr 28 Mon May 01 Tue May 02 Wed May 03 Thu May 04 Fri May 05 Mon May 08 Staff \u00b6 Instructors \u00b6 Michael Hilton mail public Hyrum Wright mail Teaching Assistants \u00b6 Anuda Weerasinghe mail Mahima Pannala mail Tak-Ho Lee mail public Victor Andres Alfonzo mail Antara Pal mail","title":"Home"},{"location":"#17-313-foundations-of-software-engineering","text":"","title":"17-313 Foundations of Software Engineering"},{"location":"#this-week","text":"Lectures & Readings None! Recitation None! Office Hours Held on the first floor lobby of TCS. See class calendar below for exact times! Projects None!","title":"This Week"},{"location":"#class-calendar","text":"","title":"Class Calendar"},{"location":"#weekly-schedule","text":"Date Lecture Reading Recitation Project Deadline Mon Jan 16 MLK Day [No Recitation] Project 1 Due Thurs Jan 26 @ 11:59pm description Handout Tue Jan 17 Intro Wed Jan 18 Thu Jan 19 Metrics and Measurement Team Formation Survey Fri Jan 20 Mon Jan 23 Recitation 1 - GitHub and TS description Handout equalizer Quiz Tue Jan 24 Boeing 737 Max Case Study Boeing 737 Max Wed Jan 25 Thu Jan 26 Milestones, Estimation, and Planning Fri Jan 27 Project 2A Due Thurs Feb 2 @ 11:59pm description Handout Mon Jan 30 Recitation 2 - Team Contract Workshop slideshow Slides description Handout equalizer Quiz Tue Jan 31 Teams Wed Feb 01 Thu Feb 02 Communication Fri Feb 03 Project 2B Due Tues Feb 14 @ 11:59pm description Handout Mon Feb 06 Recitation 3 - Software Archaeology slideshow Slides description Handout equalizer Quiz Tue Feb 07 Risk Wed Feb 08 Thu Feb 09 Software Quality Fri Feb 10 Mon Feb 13 In-Class Presentations Tue Feb 14 Intro to Architecture Wed Feb 15 Project 2C Due Thurs Mar 2 @ 11:59pm description Handout Thu Feb 16 Microservices Fri Feb 17 Mon Feb 20 Recitation 4 - Team Dysfunction slideshow Slides description Handout equalizer Quiz Tue Feb 21 Advanced Testing Wed Feb 22 Thu Feb 23 Design Documents Fri Feb 24 Mon Feb 27 Recitation 5 - Midterm Review description Handout Tue Feb 28 Midterm Exam Wed Mar 01 Thu Mar 02 QA: Static and Dynamic Analysis Fri Mar 03 Spring Break - No HW Mon Mar 06 Spring Break [No Recitation] Tue Mar 07 Spring Break - No Lecture Wed Mar 08 Thu Mar 09 Spring Break - No Lecture Fri Mar 10 Mon Mar 13 Recitation 6 - Deployment description Handout equalizer Quiz Project 3 Checkpoint Due Thurs Mar 16 @ 11:59pm description Handout Tue Mar 14 Activity: Extreme Startup Wed Mar 15 Thu Mar 16 Software Engineering for Machine Learning Fri Mar 17 Project 3 Final Due Thurs Mar 23 @ 11:59pm description Handout Mon Mar 20 Recitation 7 - Docker and Containerization slideshow Slides description Handout equalizer Quiz Tue Mar 21 Guest Lecture: Nadia Nahar - SE for ML Wed Mar 22 Thu Mar 23 Guest Lecture: Kori Krueger - Delivering Effective Feedback Fri Mar 24 Project 4 Checkpoint Due Tues Apr 4 @ 11:59pm description Handout Mon Mar 27 Recitation 8 - Team Feedback slideshow Slides description Handout equalizer Quiz Tue Mar 28 Fairness Evaluation Wed Mar 29 Thu Mar 30 Dependency Management Fri Mar 31 Mon Apr 03 Recitation 9 - Machine Learning slideshow Slides description Handout equalizer Quiz Tue Apr 04 Ethics Wed Apr 05 Project 4 Final Due Tues Apr 11 @ 11:59pm description Handout Thu Apr 06 AI Tools Fri Apr 07 Mon Apr 10 Recitation 10 - Open Source Projects slideshow Slides description Handout equalizer Quiz Tue Apr 11 Open Source Wed Apr 12 Project 5 Checkpoint Due Mon Apr 17 @ 11:59pm description Handout Thu Apr 13 No Class- Carnival Fri Apr 14 Mon Apr 17 Recitation 11 - Open Source Project and Task Selection Check In description Handout equalizer Quiz Tue Apr 18 Offers for Software Engineers Project 5 Final Due Mon May 8 @ 11:59pm description Handout Wed Apr 19 Thu Apr 20 Patents and more Fri Apr 21 Mon Apr 24 Tue Apr 25 Grad school Wed Apr 26 Thu Apr 27 Review Fri Apr 28 Mon May 01 Tue May 02 Wed May 03 Thu May 04 Fri May 05 Mon May 08","title":"Weekly Schedule"},{"location":"#staff","text":"","title":"Staff"},{"location":"#instructors","text":"","title":"Instructors"},{"location":"#teaching-assistants","text":"","title":"Teaching Assistants"},{"location":"hall-of-fame/","text":"A list of student groups with links to their merged PRs in open source projects. 2023 Spring \u00b6 Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"Hall of Fame"},{"location":"hall-of-fame/#2023-spring","text":"Group Name Team Members Project Merged PRs C2 Doreen Valmyr, Ryan Lin, Steven Shou, Zhijie Gao Teammates #12406 , #12408 dave Bernard Sheng, Frank Sacco, Joanna Ge, Roshni Surpur, Sam Wang Pandas #52897 , #52943 A1 Brady Wales, Chloe Deng, Denise Kaur, Teresa Wan, Will Squibb MyPy #15184 hecl.io Colin May, E.j. Ezuma-Ngwu, Hye In Lee, Liam Gersten CPython #103974 team-up Amita Goyal, Ayla Wang, Frank Chen, Kunal Sharda, Rio Pacheco LAION-AI Open Assistant #2684 , #2794 , #3057","title":"2023 Spring"},{"location":"overview/","text":"Questions \u00b6 When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? How did Twitter eradicate the Fail Whale? And what does it have to do with Ruby? How do you get a patch accepted into an open-source project? You can write code. Can you build software? Overview \u00b6 Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project. Previous Course Iterations \u00b6 Fall 2020 | Fall 2021 | Fall 2022","title":"Course Overview"},{"location":"overview/#questions","text":"When is a program good enough to ship? Have you built what the customer wanted? Why (and how) does Netflix deliberately and randomly take down its own servers? What can we learn from the Boeing 737 disaster? How did Twitter eradicate the Fail Whale? And what does it have to do with Ruby? How do you get a patch accepted into an open-source project? You can write code. Can you build software?","title":"Questions"},{"location":"overview/#overview","text":"Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues while broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods...) Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? ...) Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? ...) Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis (What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? ...) Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? ...) Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? ...) Economics of software development (Business models, outsourcing, open source, ...) This course has a strong technical focus, and includes assignments with and without programming. Many assignments will also have written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: An introduction assignment where individual students will learn to engage with an existing code base. A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. An architecture assignment in which teams will train and deploy an ML model using microservices. A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project.","title":"Overview"},{"location":"overview/#previous-course-iterations","text":"Fall 2020 | Fall 2021 | Fall 2022","title":"Previous Course Iterations"},{"location":"syllabus/","text":"Course Syllabus and Policies \u00b6 The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link. Waitlist \u00b6 The class has a waitlist long enough that we don't expect to clear it all. However, we will add as many students as we can. Prerequisites \u00b6 There are no formal prerequisites, but we strongly recommend having a solid foundation in programming before taking this class (e.g. 15-121, 15-122). You will also get more out of the course if you have experience with some larger development projects, for example, through larger class projects (e.g. 17-214, 15-410), internships, or open-source contributions. If you have questions, please don't hesitate to reach out to the class instructors. Communication \u00b6 The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time. Teamwork \u00b6 Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues. Textbook \u00b6 Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time . Assessment \u00b6 Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown Project # Days Given Points % of total grade 1 10 100 5.77% 2 35 320 18.46% 3 10 120 6.92% 4 14 180 10.38% 5 27 320 18.46% TOTAL 1040 60.00% Regrades \u00b6 Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment. Late Work Policy \u00b6 Participation \u00b6 Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), at the end of the semester, we will drop the lowest 10% of scores to calculate your participation grade. In other words, acquiring 90% of the available points will give you 100% in this category . The amount of points available varies from semester to semester; generally, 10% would be equivalent to 3-4 lectures or recitations. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis. Projects \u00b6 Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf. Time Management \u00b6 This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you. Writing \u00b6 Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested. Professionalism \u00b6 Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.) Academic Honesty and Collaboration \u00b6 The usual policies apply, especially the University Policy on Academic Integrity. Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects . Although your solutions for individual parts will be based on the content produced for the group component (e.g. written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is taken from the policy used in 17-214, which we reuse almost directly (with minor modifications, and attribution). \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help. If any of your work contains any statement that was not written by you, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations. Accommodations \u00b6 If you wish to request an accommodation due to a documented disability, please inform the instructors as soon as possible and contact Disability Resources at 412-268-2013 or access@andrew.cmu.edu . Policy on Healthcare-Related Absence \u00b6 We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and come to any of the instructors' office hours to discuss the material. A Note on Self Care \u00b6 Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"Syllabus"},{"location":"syllabus/#course-syllabus-and-policies","text":"The course is currently planned to be entirely in person for lectures and recitations. Most office hours will be in person, but some may be held over Zoom as well. The course uses Canvas and Gradescope for homework submission, grading, discussions, questions, and supplementary documents; slides and handouts are posted here on the course website; GitHub is used to coordinate group work. We also use Slack for communication and group work: check your email during the first week of classes for the Slack sign up link.","title":"Course Syllabus and Policies"},{"location":"syllabus/#waitlist","text":"The class has a waitlist long enough that we don't expect to clear it all. However, we will add as many students as we can.","title":"Waitlist"},{"location":"syllabus/#prerequisites","text":"There are no formal prerequisites, but we strongly recommend having a solid foundation in programming before taking this class (e.g. 15-121, 15-122). You will also get more out of the course if you have experience with some larger development projects, for example, through larger class projects (e.g. 17-214, 15-410), internships, or open-source contributions. If you have questions, please don't hesitate to reach out to the class instructors.","title":"Prerequisites"},{"location":"syllabus/#communication","text":"The primary form of communication within this course is through Slack. We will make announcements through a dedicated channel in Slack, and also provide channels for homework clarifications and team-based communication. As such, we highly recommend that students install Slack on their phones / desktop with notifications enabled. The instructors and TAs will also hold weekly office hours to provide support with course materials and projects. You can find the office hours schedule updated weekly here on the course website. You can contact the course instructors and TAs via both Slack and email. Your team will also have assigned TAs as your primary point of contact for additional support with assignment or recitation-related questions. When contacting instructors or your designated TAs, please email/message all instructors/both TAs at the same time.","title":"Communication"},{"location":"syllabus/#teamwork","text":"Teamwork is an essential part of this course. Most projects are done in teams of 3-5 students. Teams will be assigned by the instructors and stay together for multiple projects. Most projects have a component that is graded for the entire group and a component that is graded individually. Being able to address team issues in software projects is one of the core learning objectives of this class. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. We expect significant efforts in attempting to address the team issues before asking instructors and teaching assistants to step in. However, we will always be available to provide advice on how to navigate these issues.","title":"Teamwork"},{"location":"syllabus/#textbook","text":"Various readings throughout the semester are available online or through the library; we do not have a single textbook but rather assemble readings from different sources. As optional supplementary reading consider the (freely available) Software Engineering at Google, Lessons Learned from Programming Over Time .","title":"Textbook"},{"location":"syllabus/#assessment","text":"Evaluation will be based on the following distribution: 60% projects, 20% midterm, 20% participation (including lecture exercises, pre-lecture reading quizzes, and recitation exercises). Project Points Breakdown Project # Days Given Points % of total grade 1 10 100 5.77% 2 35 320 18.46% 3 10 120 6.92% 4 14 180 10.38% 5 27 320 18.46% TOTAL 1040 60.00%","title":"Assessment"},{"location":"syllabus/#regrades","text":"Regrade requests can be submitted via Gradescope. The regrade period is open for one week after grades have been released for a particular assignment.","title":"Regrades"},{"location":"syllabus/#late-work-policy","text":"","title":"Late Work Policy"},{"location":"syllabus/#participation","text":"Participation points in this class are earned through a series of pre-lecture reading assignments, lecture activities, and recitations. To accommodate for life's uncertainties (e.g. health issues, scheduling conflicts), at the end of the semester, we will drop the lowest 10% of scores to calculate your participation grade. In other words, acquiring 90% of the available points will give you 100% in this category . The amount of points available varies from semester to semester; generally, 10% would be equivalent to 3-4 lectures or recitations. There will be no make-ups for participation points, but you are strongly encouraged to come to office hours to learn or review the materials that you may have missed. If you find yourself in a situation that calls for an extended absence, please have your academic advisor reach out to the instructors, and they will work to find a solution on a case by case basis.","title":"Participation"},{"location":"syllabus/#projects","text":"Late work will receive feedback but no credit. Due to heavy emphasis on planning & teamwork in this course there are no late days; we expect that you anticipate unexpected events in your planning , and coordinate with your teammates when they arise. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency, with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf.","title":"Projects"},{"location":"syllabus/#time-management","text":"This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in lectures & recitation and 8 hours on readings and projects. Notice that most projects are done in groups, so please account for the overhead and decreased time flexibility that comes with group work. Throughout the semester, please feel free to give the course staff feedback on how much time the course is taking for you.","title":"Time Management"},{"location":"syllabus/#writing","text":"Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most projects have a component that requires discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested.","title":"Writing"},{"location":"syllabus/#professionalism","text":"Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you're \"just joking!\"), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.)","title":"Professionalism"},{"location":"syllabus/#academic-honesty-and-collaboration","text":"The usual policies apply, especially the University Policy on Academic Integrity. Many of the projects will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honesty and collaboration for group work are the same as for individual work, substituting elevated to the level of \"group.\" The course includes both individual projects and individual components of group projects . Although your solutions for individual parts will be based on the content produced for the group component (e.g. written reflections on lessons learned), we treat individual components of group projects as equivalent to individual projects overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is taken from the policy used in 17-214, which we reuse almost directly (with minor modifications, and attribution). \"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others' access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help. If any of your work contains any statement that was not written by you, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.\" Note that the instructors respect honesty in these (and indeed most!) situations.","title":"Academic Honesty and Collaboration"},{"location":"syllabus/#accommodations","text":"If you wish to request an accommodation due to a documented disability, please inform the instructors as soon as possible and contact Disability Resources at 412-268-2013 or access@andrew.cmu.edu .","title":"Accommodations"},{"location":"syllabus/#policy-on-healthcare-related-absence","text":"We don't record our lectures, because they are highly interactive and tricky to record, but we do post slides at the end of the day. Please go over them and come to any of the instructors' office hours to discuss the material.","title":"Policy on Healthcare-Related Absence"},{"location":"syllabus/#a-note-on-self-care","text":"Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/ . Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help.","title":"A Note on Self Care"},{"location":"projects/","text":"Coming soon!","title":"Homework"},{"location":"projects/P1/","text":"Project 1: Hello, NodeBB! \u00b6 Learning Goals \u00b6 Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase Project Context \u00b6 Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project. Deliverables and Deadlines \u00b6 This is an individual assignment . There are four (4) deliverables and one (1) deadline for this homework. Onboarding \u2013 100 points \u2013 due Thursday, January 26th, 11:59pm Build Checkpoint (5 pts) GitHub Issue (20 pts) GitHub Pull Request (35 pts) Gradescope Written Assignment (40 pts) Prerequisites \u00b6 Onboarding Materials \u00b6 Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors. Git & GitHub \u00b6 In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete a short Github Exercise , as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed. Getting Started \u00b6 Repository Setup \u00b6 Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer. Analysis Tools \u00b6 When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! Follow the Development Tools section in the repository README to run both the linter and testing tools provided by NodeBB on your computer. Without any changes to the repository, both tools should pass. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report (added 1/19/23) As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code. Build Checkpoint (5 pts) \u00b6 Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope . Onboarding \u00b6 Now that you have explored the repository, the development team would like to give you an onboarding assignment. Types types types! Driven by their programming language enthusiast, the team is currently undertaking a major code overhaul and converting the repository from JavaScript to TypeScript . This language is a superset of JavaScript and comes with many advantages, including better support for code editors, compile time error-checking and, of course, types! As part of the efforts to integrate this new language into the repository, all future code will be written using TypeScript and the old files are translated as necessary. To prepare you for TypeScript development, the team would like you to contribute towards rewriting the codebase. GitHub Issue (20 pts) \u00b6 First, choose a single JavaScript file to translate and open a GitHub Issue in the class repository to declare which file you will be translating. There are some restrictions on the .js file that you can pick. Specifically, the file must: Be in the src/ folder Contain at least 50 lines of non-import statement code before you start translating it. Files like src/api/index.js and src/controllers/admin.js are not allowed Not be a file that someone else has already picked . We expect you to look through existing issues, if any, to avoid such duplication (thus, there is an incentive for you to start early!) Title the task appropriately, such as Converting <file name> from JS to TS , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more. GitHub Pull Request (35 pts) \u00b6 Back in your own fork , create a feature branch and implement the change. You should start with the following steps: Install TypeScript If you chose a file named xx.js , create a new file called xx.ts in the same directory Copy over the contents of the original file into this new file Make changes to xx.ts file as needed to translate the file into TypeScript Run npx tsc to generate a compiled JavaScript file from your changes Your changes must still pass both the linter and the test suite, so be sure to test your changes locally! Dependencies on Untranslated Files There will be some instances where your file may reference functions or variables from modules in other files that have not been translated yet. This may cause the linter to throw errors as these values will be of type any . In those situations, and only in those situations , you may add the following comments to suppress the linter warnings: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call We will check your files to make sure you are only suppressing these warnings when absolutely necessary. For examples and more details, see the Additional TypeScript Background section under \"Resources and Documentation\" below. As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705 Written Assignment (40 pts) \u00b6 After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope. Grading \u00b6 To receive full credit for this project, we expect: The correct usage of tools and technology, including Git, GitHub, and the repository-based tools A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages Appropriate usage of the eslint-ignore comment A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB Resources & Documentation \u00b6 Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours. Git & GitHub Documentation \u00b6 Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project. TypeScript Documentation \u00b6 The repository README contains links to different documentation material that you may find helpful in your development process. Particularly, you will want to focus on the documentation relating to JavaScript/TypeScript: TypeScript for New Programmers TypeScript for JavaScript Programmers JavaScript to TypeScript Translation You will also find some sample translated TypeScript files within the repository. You can use these as guidance for your translation process: src/social.ts src/controllers/composer.ts Additional TypeScript Background \u00b6 This section provides more context on how TypeScript is used for this project and when it is appropriate to suppress ESLint warnings in your translated TypeScript files. As native JavaScript does not have any typing, by default, all functions/values/classes/modules that are not typed will be automatically given the any type by TypeScript. Under default settings, this allows any valid JavaScript code to be run as TypeScript. Using the any type, however, will defeat the purpose of the various type-checking features TypeScript provides. As such, we\u2019ve set our linter to check for strict typing and disallow the use of the any type . For the most part, this should check that you explicitly type everything within your files and ensure that you are able to make the most out of TypeScript. A limitation of this strictness is that there will be errors thrown when using non-translated JavaScript imports, which TypeScript will assume to have type any . As an example from one of our sample translated files src/social.ts : src/social.ts // A module import from a non-translated JavaScript file database/index.js import db from './database' ; \u2026 const activated = await db . getSetMembers ( 'social:posts.activated' ); Running the linter will give the following errors: error Unsafe member access .getSetMembers on an ` any ` value @typescript-eslint/no-unsafe-member-access error Unsafe call of an ` any ` typed value @typescript-eslint/no-unsafe-call error Unsafe assignment of an ` any ` value @typescript-eslint/no-unsafe-assignment Let\u2019s take a look at each error: @typescript-eslint/no-unsafe-member-access - we don\u2019t know the typing of our imported module db , so it is treated as any . However, we don\u2019t know if something of type any has a function called getSetMembers , hence this is an unsafe member access @typescript-eslint/no-unsafe-call - we don\u2019t know the typing of the function db.getSetMembers , and so it is treated as any . We can not call a function of type any , so db.getSetMembers('social:posts.activated') is an unsafe call @typescript-eslint/no-unsafe-assignment - we don\u2019t know the return type of db.getSetMembers , and so it is treated as any . We can not assign something of type any to our variable activated The first two errors are dependent on us knowing the typing of db and db.getSetMembers . However, because we haven\u2019t translated the database/index.js file yet, we don\u2019t have access to their typing information. In this case, it is okay to suppress the ESLint errors as they only arise from a lack of translation. We can do this by adding the following comments: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call const activated = await db . getSetMembers ( 'social:posts.activated' ); For the last error, even though we don\u2019t have typing information provided by the db module, we still want to make sure future uses of the activated variable get properly typechecked. Checking the rest of the file reveals that activated should be a string[] type; we can also manually cross-reference the db.getSetMembers function to check that this is the correct typing. Hence, it\u2019s okay to cast the return value of this function call to string[] , and our full solution looks like this: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call const activated : string [] = await db . getSetMembers ( 'social:posts.activated' ) as string []; Installing Typing Packages \u00b6 In some cases, if your file imports an npm package (such as lodash , nconf , etc), you will need to install the typings for the package. To do this, run: % npm install @types/ [ packagename ] --save-dev You should then see the @types/[packagename] added to your package.json file. GitHub Actions Packages To make sure your GitHub Actions also install the correct packages, you should copy the package.json file to install/package.json .","title":"Project 1: Hello, NodeBB!"},{"location":"projects/P1/#project-1-hello-nodebb","text":"","title":"Project 1: Hello, NodeBB!"},{"location":"projects/P1/#learning-goals","text":"Familiarize yourself with an existing software project Download, install and run an existing software project Onboard on development tools and technologies Learn Git Flow and GitHub to support future collaborative development Run local analysis tools and use the output to evaluate a codebase","title":"Learning Goals"},{"location":"projects/P1/#project-context","text":"Welcome to the 17-313 development team! To get started, you will be going through our onboarding process to familiarize yourself with both the course and the project you will be working on. Eventually, you will be tasked with designing and developing new features, but the first step is to download, run, explore, and evaluate the existing software product. This semester, we will be building upon NodeBB, an open-source community forum software project that was started in 2014. You can learn more about this project from the original development team's website . For your own development, you will be forking your own repository off of a class-specific fork of NodeBB, which you can find at https://github.com/CMU-313/NodeBB . Our fork contains some tweaks to make the project easier to modify and debug. This will also allow you to create issues and pull requests that are visible to the instructors, which will be the primary way of submitting code deliverables for this project.","title":"Project Context"},{"location":"projects/P1/#deliverables-and-deadlines","text":"This is an individual assignment . There are four (4) deliverables and one (1) deadline for this homework. Onboarding \u2013 100 points \u2013 due Thursday, January 26th, 11:59pm Build Checkpoint (5 pts) GitHub Issue (20 pts) GitHub Pull Request (35 pts) Gradescope Written Assignment (40 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P1/#prerequisites","text":"","title":"Prerequisites"},{"location":"projects/P1/#onboarding-materials","text":"Before jumping into the codebase, please review the course syllabus and be sure you have access to each of the following: Course Slack - check your email for an invite link Canvas Gradescope If you run into any trouble accessing the above or have any questions, reach out to the instructors.","title":"Onboarding Materials"},{"location":"projects/P1/#git-github","text":"In this project and throughout the rest of this course, you will be expected to work extensively with Git and GitHub. Specifically for this project, you should be familiar with: Forking/cloning GitHub repositories Understanding general Git flow - pulling, branching, adding, committing, pushing, merging Creating GitHub Issues and using related features (labels, assignees, milestones) Creating GitHub Pull Requests and using related features (linking to issues) Creating GitHub Project Boards If you are not familiar with any of these steps, you are highly recommended to first complete a short Github Exercise , as it will cover the standards we are expecting in this class (which you will be graded upon). Refer to the Resources & Documentation section if needed.","title":"Git &amp; GitHub"},{"location":"projects/P1/#getting-started","text":"","title":"Getting Started"},{"location":"projects/P1/#repository-setup","text":"Fork the class-specific repository into your personal GitHub account. Warning Even though this project is based off of an active open source project, we have made significant changes to ensure its suitability for our class. As such, be sure you are forking off of CMU-313/NodeBB and direct any questions to course staff. Do not contact the maintainers of NodeBB for assistance with your homework questions. Ensure that GitHub Actions are enabled (click the green button under the \"Actions\" tab), then follow the below installation instructions based on your computer's operating system: Mac Windows Ubuntu (Linux) Once you have run NodeBB successfully, you should be able to navigate to http://localhost:4567 and see the main forum page. By default, NodeBB will be deployed to port 4567 on your machine. You may change this port number (e.g. to avoid conflict with another process running on your machine). Warning In this class, we do expect students to first try debugging errors on their own; this includes following stack traces, searching up error strings and unfamiliar outputs, etc. If you do get stuck, or if the process of installing and running NodeBB is taking you more than a few hours, stop and ask for help on Slack! Take some time to click through the pages and explore the different features that NodeBB has to offer.","title":"Repository Setup"},{"location":"projects/P1/#analysis-tools","text":"When working on an existing codebase, especially in a collaborative setting, we want to ensure that none of our changes introduce unexpected bugs or issues for other developers. To fulfill these goals, we often use different tools to help us evaluate our code. Luckily, NodeBB is already packaged with a number of neat tools! Follow the Development Tools section in the repository README to run both the linter and testing tools provided by NodeBB on your computer. Without any changes to the repository, both tools should pass. After the test suite finishes running, NodeBB will also generate a code coverage report . This report gives you measurements with regards to what percentage of the codebase is covered by the test suite. Open the index.html file in the coverage folder to see the full report. Coverage Report (added 1/19/23) As this is an existing codebase with a decently-sized test suite, you should expect to see a relatively high percentage of coverage , i.e. the majority of the bars/cells displayed should be green. If you are seeing a lot of red bars, it may mean that the test suite was not run properly. Double-check that all of the tests passed and that there were no failures. More on Analysis Tools A linter is a tool that directly analyzes your source code for common errors. A test suite is a set of test cases that you write for a software program to show that it has some specified set of behaviors; our testing tool provides a framework to structure our test cases, runs the test suite, and generates a report of which tests pass/fail. We will do a more in-depth exploration of analysis tools later in the course. For now, just know that these tools exist for you to use in evaluating your code.","title":"Analysis Tools"},{"location":"projects/P1/#build-checkpoint-5-pts","text":"Upon completing the above steps, take screenshots of the home page of NodeBB, and the coverage report generated by the coverage tool opened in your browser. Be sure the URL is clearly visible in both screenshots (i.e. localhost:4567 and the file path to your coverage file), so we can confirm that you have everything running locally. Submit the two screenshots to Gradescope .","title":"Build Checkpoint (5 pts)"},{"location":"projects/P1/#onboarding","text":"Now that you have explored the repository, the development team would like to give you an onboarding assignment. Types types types! Driven by their programming language enthusiast, the team is currently undertaking a major code overhaul and converting the repository from JavaScript to TypeScript . This language is a superset of JavaScript and comes with many advantages, including better support for code editors, compile time error-checking and, of course, types! As part of the efforts to integrate this new language into the repository, all future code will be written using TypeScript and the old files are translated as necessary. To prepare you for TypeScript development, the team would like you to contribute towards rewriting the codebase.","title":"Onboarding"},{"location":"projects/P1/#github-issue-20-pts","text":"First, choose a single JavaScript file to translate and open a GitHub Issue in the class repository to declare which file you will be translating. There are some restrictions on the .js file that you can pick. Specifically, the file must: Be in the src/ folder Contain at least 50 lines of non-import statement code before you start translating it. Files like src/api/index.js and src/controllers/admin.js are not allowed Not be a file that someone else has already picked . We expect you to look through existing issues, if any, to avoid such duplication (thus, there is an incentive for you to start early!) Title the task appropriately, such as Converting <file name> from JS to TS , and mention the file name in the description. To prevent ambiguities between similarly-named files, be sure to use the full file path ( src/../xx.js ) in the title and description. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Then, assign yourself to the Issue by leaving a comment that says \"I would like to work on this please!\" You should soon see another comment by the github-actions bot informing you that you have been successfully assigned to this issue. Why Bot Assignment? You might be curious as to why we are using a GitHub bot instead of directly assigning yourself to the issue. As you aren\u2019t officially recognized as a collaborator of CMU-313/NodeBB, GitHub adds some restrictions to your permissions for security purposes, including not being able to assign yourself to an issue. Hence, we are using a bot to work around these restrictions. This is similar to how you would request issues on an Open Source project! For future projects, you will have full control over these GitHub features such as managing assignees, adding labels, creating milestones, and more.","title":"GitHub Issue (20 pts)"},{"location":"projects/P1/#github-pull-request-35-pts","text":"Back in your own fork , create a feature branch and implement the change. You should start with the following steps: Install TypeScript If you chose a file named xx.js , create a new file called xx.ts in the same directory Copy over the contents of the original file into this new file Make changes to xx.ts file as needed to translate the file into TypeScript Run npx tsc to generate a compiled JavaScript file from your changes Your changes must still pass both the linter and the test suite, so be sure to test your changes locally! Dependencies on Untranslated Files There will be some instances where your file may reference functions or variables from modules in other files that have not been translated yet. This may cause the linter to throw errors as these values will be of type any . In those situations, and only in those situations , you may add the following comments to suppress the linter warnings: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call We will check your files to make sure you are only suppressing these warnings when absolutely necessary. For examples and more details, see the Additional TypeScript Background section under \"Resources and Documentation\" below. As you work, be sure to periodically commit your changes. Your commit message(s) must clearly describe what is changing. If you\u2019d like, you can also make use of branching and pull requests in your own repository to practice working with GitHub. Branch and Commit Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Once you are satisfied, open a pull request from your personal branch back to the class repository. Similar to the Issue, your PR title should mention the full path of the file you\u2019ve changed. The PR body should summarize the changes you made and use one of the linking keywords to link the issue that you previously opened (e.g. adding resolves #313 will signal to GitHub that this PR resolves issue number 313). Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. There will be automated checks that run on your pull request to ensure you meet the requirements of this assignment. Some of them take a while to run, so be sure to check on your pull request periodically to ensure that all these actions pass and everything is working properly! Test Suite Failures If the tests are failing on GitHub but work locally, it may be caused by server overload. Re-running the failing GitHub Action 1-2 times will resolve this. If all of the actions have passed, you will see a green checkmark next to your pull request. This signals that you have completed the implementation aspect of this assignment! \u2705","title":"GitHub Pull Request (35 pts)"},{"location":"projects/P1/#written-assignment-40-pts","text":"After you have completed all of the above tasks, we will ask you some questions relevant to the NodeBB project and the course syllabus . Fill out and submit the HW1 Written Assignment available on Gradescope.","title":"Written Assignment (40 pts)"},{"location":"projects/P1/#grading","text":"To receive full credit for this project, we expect: The correct usage of tools and technology, including Git, GitHub, and the repository-based tools A Gradescope submission of two screenshots showing a local running build of NodeBB and the coverage report within a browser A GitHub Issue with: A selected JavaScript file that follows our requirements above A meaningful title and description that includes the full path of the file A successful self-assignment as an assignee A GitHub Pull Request with: A meaningful title that includes the full path of the file A description body that describes the changes made and links the pull request to the issue Meaningful commit messages Appropriate usage of the eslint-ignore comment A green checkmark signaling that all checks have passed Answers to the Gradescope Written Assignment that demonstrate successful completion of the project and understanding of the benefits and limitations of software metrics in the context of NodeBB","title":"Grading"},{"location":"projects/P1/#resources-documentation","text":"Below are some common resources to assist you with your completion of this project. If you get stuck, start by consulting the following materials; if you have any additional questions, the course staff will be available to answer questions via Slack and Office Hours.","title":"Resources &amp; Documentation"},{"location":"projects/P1/#git-github-documentation","text":"Documentation for working with Git and GitHub: Git Documentation Git Flow GitHub Basics GitHub's Flow GitHub Cross-Referencing We also have a simple Git-based exercise that you are highly recommeneded to complete before proceeding with this project.","title":"Git &amp; GitHub Documentation"},{"location":"projects/P1/#typescript-documentation","text":"The repository README contains links to different documentation material that you may find helpful in your development process. Particularly, you will want to focus on the documentation relating to JavaScript/TypeScript: TypeScript for New Programmers TypeScript for JavaScript Programmers JavaScript to TypeScript Translation You will also find some sample translated TypeScript files within the repository. You can use these as guidance for your translation process: src/social.ts src/controllers/composer.ts","title":"TypeScript Documentation"},{"location":"projects/P1/#additional-typescript-background","text":"This section provides more context on how TypeScript is used for this project and when it is appropriate to suppress ESLint warnings in your translated TypeScript files. As native JavaScript does not have any typing, by default, all functions/values/classes/modules that are not typed will be automatically given the any type by TypeScript. Under default settings, this allows any valid JavaScript code to be run as TypeScript. Using the any type, however, will defeat the purpose of the various type-checking features TypeScript provides. As such, we\u2019ve set our linter to check for strict typing and disallow the use of the any type . For the most part, this should check that you explicitly type everything within your files and ensure that you are able to make the most out of TypeScript. A limitation of this strictness is that there will be errors thrown when using non-translated JavaScript imports, which TypeScript will assume to have type any . As an example from one of our sample translated files src/social.ts : src/social.ts // A module import from a non-translated JavaScript file database/index.js import db from './database' ; \u2026 const activated = await db . getSetMembers ( 'social:posts.activated' ); Running the linter will give the following errors: error Unsafe member access .getSetMembers on an ` any ` value @typescript-eslint/no-unsafe-member-access error Unsafe call of an ` any ` typed value @typescript-eslint/no-unsafe-call error Unsafe assignment of an ` any ` value @typescript-eslint/no-unsafe-assignment Let\u2019s take a look at each error: @typescript-eslint/no-unsafe-member-access - we don\u2019t know the typing of our imported module db , so it is treated as any . However, we don\u2019t know if something of type any has a function called getSetMembers , hence this is an unsafe member access @typescript-eslint/no-unsafe-call - we don\u2019t know the typing of the function db.getSetMembers , and so it is treated as any . We can not call a function of type any , so db.getSetMembers('social:posts.activated') is an unsafe call @typescript-eslint/no-unsafe-assignment - we don\u2019t know the return type of db.getSetMembers , and so it is treated as any . We can not assign something of type any to our variable activated The first two errors are dependent on us knowing the typing of db and db.getSetMembers . However, because we haven\u2019t translated the database/index.js file yet, we don\u2019t have access to their typing information. In this case, it is okay to suppress the ESLint errors as they only arise from a lack of translation. We can do this by adding the following comments: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call const activated = await db . getSetMembers ( 'social:posts.activated' ); For the last error, even though we don\u2019t have typing information provided by the db module, we still want to make sure future uses of the activated variable get properly typechecked. Checking the rest of the file reveals that activated should be a string[] type; we can also manually cross-reference the db.getSetMembers function to check that this is the correct typing. Hence, it\u2019s okay to cast the return value of this function call to string[] , and our full solution looks like this: // The next line calls a function in a module that has not been updated to TS yet // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call const activated : string [] = await db . getSetMembers ( 'social:posts.activated' ) as string [];","title":"Additional TypeScript Background"},{"location":"projects/P1/#installing-typing-packages","text":"In some cases, if your file imports an npm package (such as lodash , nconf , etc), you will need to install the typings for the package. To do this, run: % npm install @types/ [ packagename ] --save-dev You should then see the @types/[packagename] added to your package.json file. GitHub Actions Packages To make sure your GitHub Actions also install the correct packages, you should copy the package.json file to install/package.json .","title":"Installing Typing Packages"},{"location":"projects/P1/faq/","text":"Frequently Asked Questions \u00b6 This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released! Installation \u00b6 I'm running into errors about missing files when running ./nodebb start ! \u00b6 Be sure you've compiled a build by running the build command ./nodebb build first, then try running the start command again. Analysis Tools \u00b6 Running the test suite stops immediately and throws a bunch of errors! \u00b6 This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file. For redis, you won't have to do any additional setup; for mongodb, you may have to explicitly create another test database. You can reference the installation instructions to get the commands for setting this up. Ask in Slack if you need assistance! Other \u00b6 How do I reset my NodeBB configurations? \u00b6 Delete the config.json file and re-run the ./nodebb setup command. How do I reset my NodeBB database? \u00b6 Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"FAQ"},{"location":"projects/P1/faq/#frequently-asked-questions","text":"This section is meant to contain frequently asked questions about the homework. We will continue to update this throughout the period the assignment is released!","title":"Frequently Asked Questions"},{"location":"projects/P1/faq/#installation","text":"","title":"Installation"},{"location":"projects/P1/faq/#im-running-into-errors-about-missing-files-when-running-nodebb-start","text":"Be sure you've compiled a build by running the build command ./nodebb build first, then try running the start command again.","title":"I'm running into errors about missing files when running ./nodebb start!"},{"location":"projects/P1/faq/#analysis-tools","text":"","title":"Analysis Tools"},{"location":"projects/P1/faq/#running-the-test-suite-stops-immediately-and-throws-a-bunch-of-errors","text":"This usually happens if you don't have a test database configured correctly. Scroll up past the errors and copy over the test database configuration into the local config.json file. For redis, you won't have to do any additional setup; for mongodb, you may have to explicitly create another test database. You can reference the installation instructions to get the commands for setting this up. Ask in Slack if you need assistance!","title":"Running the test suite stops immediately and throws a bunch of errors!"},{"location":"projects/P1/faq/#other","text":"","title":"Other"},{"location":"projects/P1/faq/#how-do-i-reset-my-nodebb-configurations","text":"Delete the config.json file and re-run the ./nodebb setup command.","title":"How do I reset my NodeBB configurations?"},{"location":"projects/P1/faq/#how-do-i-reset-my-nodebb-database","text":"Depending on your database setup, you will need to find the commands to delete all data stored in your database. For redis, this involves using the redis-cli to enter the database and using the FLUSHALL command. Once you've cleared your database, delete your config.json file and re-run the ./nodebb setup command. You will need to reconfigure an admin account.","title":"How do I reset my NodeBB database?"},{"location":"projects/P1/github/","text":"GitHub Exercise \u00b6 Overview \u00b6 The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning. Prerequisites \u00b6 You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics Forking a Repository \u00b6 Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine. Running a GitHub Action Workflow \u00b6 On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product. Setting up a Project Board \u00b6 Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository. Creating Issues \u00b6 Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects! Branching, Committing, and Pushing \u00b6 On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name> Writing Pull Requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes. Check GitHub Actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"Github Exercise"},{"location":"projects/P1/github/#github-exercise","text":"","title":"GitHub Exercise"},{"location":"projects/P1/github/#overview","text":"The purpose of this exercise is to provide support for students who may be less familiar with Git and GitHub. After this exercise, students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the Git workflow and how to collaborate with other developers in their projects. Note This exercise is optional and is meant to provide a sandbox environment for students who want to practice using Git and GitHub tools. Students should use their own discretion on whether this exercise is helpful or necessary to support their learning.","title":"Overview"},{"location":"projects/P1/github/#prerequisites","text":"You have a GitHub account You have Git installed You have Python 3 installed You know Git Basics","title":"Prerequisites"},{"location":"projects/P1/github/#forking-a-repository","text":"Start by forking this repository to your personal account by clicking the Fork button at the top of the page. Then, under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository. Clone the repository onto your local machine.","title":"Forking a Repository"},{"location":"projects/P1/github/#running-a-github-action-workflow","text":"On GitHub, click the Actions tab, enable workflows by clicking the green button, then select the \"Python Application\" workflow. Click on the \"Run workflow\" dropdown. Double-check that the selected Branch is main , then click the \"Run workflow\" button. This manually will run the GitHub workflow that tests the Fibonacci function in fib.py using test_fib.py . Once the action has finished running, click into the workflow and select \"build\". You should notice the action failing, meaning the test cases failed and our main branch is broken! Let's walk through the process to fix these errors. Tip In practice, you should not merge code into the main branch that could cause it to fail. This way, we can ensure that all the code on the main branch represents our most recent fully-working product.","title":"Running a GitHub Action Workflow"},{"location":"projects/P1/github/#setting-up-a-project-board","text":"Project boards are a great way to track development. Although there are many nice external tools such as Trello or Jira, GitHub provides their own project boards for us to use with great integration support of their other features. Under the Projects tab, create a new project with the \"Board\" template. After the board has been created, go back to the Projects tab and link the project board to the repository.","title":"Setting up a Project Board"},{"location":"projects/P1/github/#creating-issues","text":"Check back on the build output in the Actions tab and take a look at which test cases are failing. Take note of the names of each test case - they should give you a hint as to what the bugs may be! Under the Issues tab, create an issue for each failing test case. Issue Guidelines Issues titles should provide a high-level overview of what the problem is (e.g. \"Navbar button UI bugs\" , \"Unexpected registration validation errors\" ). Sometimes, issues are used to propose new features (e.g. \"Add CSV export feature\" ). Issue descriptions should then elaborate on the title. For feature-level bugs, this may include providing information about how to reproduce the bug; for codebase-level changes, you can name specific files. Assign yourself to one of the issues and add the two issues to the project Kanban board under the \"Todo\" column. You may also want to experiment with adding labels and milestones to your issues. These are all features you will be using in future projects!","title":"Creating Issues"},{"location":"projects/P1/github/#branching-committing-and-pushing","text":"On your local machine, create a new branch with a relevant name to the issue you are addressing. Branch Guidelines Branch names should be short and provide a description of what you will be doing on that branch (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ). When working with others, you can also append your username to signal which branches are yours (e.g. \"313ta/add-sorting-feature\" ). Fix the issue that you were assigned to, then add and commit the changes. Commit Guidelines Commits should start with a verb and provide a description of what they are doing to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ). Push the branch to remote by running: % git push --set-upstream origin <your-branch-name>","title":"Branching, Committing, and Pushing"},{"location":"projects/P1/github/#writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch. Warning Make sure you are merging to the main of your own forked repository! By default, GitHub will select the original repository (CMU-313/...) instead of your own forked repository (your-username/...). Give your pull request an appropriate title and description. Pull Request Guidelines Pull request titles should describe what high-level changes were made to the codebase. Generally, they give a concise summary of all the commit messages. Pull request descriptions should describe what changes have been made in more detail and how the changes have been tested. Link the issue you created initially to the PR by using the linking keywords in the PR description, then click on the green \"Create pull request\" button. Notice that the GitHub action workflow runs automatically once you create the pull request! You should check that the relevant test case to your fix now passes.","title":"Writing Pull Requests"},{"location":"projects/P1/github/#check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests should now pass, and a green check should show.","title":"Check GitHub Actions"},{"location":"projects/P1/installation/mac/","text":"Installing NodeBB on MacOS \u00b6 Required Software \u00b6 First, install the following programs: http://nodejs.org/ http://brew.sh/ Installing Redis \u00b6 Install redis with homebrew: % brew install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, build the files: % ./nodebb build And start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Mac"},{"location":"projects/P1/installation/mac/#installing-nodebb-on-macos","text":"","title":"Installing NodeBB on MacOS"},{"location":"projects/P1/installation/mac/#required-software","text":"First, install the following programs: http://nodejs.org/ http://brew.sh/","title":"Required Software"},{"location":"projects/P1/installation/mac/#installing-redis","text":"Install redis with homebrew: % brew install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"projects/P1/installation/mac/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, build the files: % ./nodebb build And start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"projects/P1/installation/ubuntu/","text":"Installing on Ubuntu \u00b6 Required Software \u00b6 Installing Node.js \u00b6 Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash - Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs Verify installation of Node.js and npm. You should have version LTS of Node.js installed, and version 8 of npm installed: % node -v % npm -v # this should output \"8.11.0\" or similar Installing Redis \u00b6 The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : Add Redis repository to the apt index: % curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg % echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $( lsb_release -cs ) main\" | sudo tee /etc/apt/sources.list.d/redis.list Update the apt packages and install redis: % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server Installing NodeBB \u00b6 You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, build the files: % ./nodebb build And start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Linux (Ubuntu)"},{"location":"projects/P1/installation/ubuntu/#installing-on-ubuntu","text":"","title":"Installing on Ubuntu"},{"location":"projects/P1/installation/ubuntu/#required-software","text":"","title":"Required Software"},{"location":"projects/P1/installation/ubuntu/#installing-nodejs","text":"Node.js is available from the NodeSource Ubuntu binary distributions repository. Start by adding this repository to the apt index: % curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash - Then, update the apt packages and install nodejs: % sudo apt-get update % sudo apt-get install -y nodejs Verify installation of Node.js and npm. You should have version LTS of Node.js installed, and version 8 of npm installed: % node -v % npm -v # this should output \"8.11.0\" or similar","title":"Installing Node.js"},{"location":"projects/P1/installation/ubuntu/#installing-redis","text":"The original NodeBB installation guide suggests the use of MongoDB database, but for simplicity and consistency across the installation guides, we will be using Redis as our database. Here is an abbreviated version of the installation instructions provided by Redis : Add Redis repository to the apt index: % curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg % echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $( lsb_release -cs ) main\" | sudo tee /etc/apt/sources.list.d/redis.list Update the apt packages and install redis: % sudo apt-get update % sudo apt-get install redis Start the redis server: % redis-server","title":"Installing Redis"},{"location":"projects/P1/installation/ubuntu/#installing-nodebb","text":"You should have already forked the class-specific repository . Clone your forked repository onto your local machine. Windows WSL2 Warning For Windows WSL2 users, you should store your project files on the same operating system as the tools you plan to use . When it comes to cloning the NodeBB repository, it means that you should clone it in: the Linux file system root directory: \\\\wsl$\\Ubuntu\\home\\<user name>\\ NOT the Windows file system root directory: /mnt/c/Users/<user name>/$ or C:\\Users\\<user name>\\ You can use % cd ~ to access the Linux home directory, then clone the repository there. Enter the directory where you have cloned the repository: % cd NodeBB Run the interactive installation command: % ./nodebb setup You will then be presented with a series of setup questions. For each of the questions \u2014 except for \"Which database to use (mongo)\" , which you should answer with \"redis\" \u2014 you may accept the default answer by pressing Enter URL used to access this NodeBB (http://127.0.0.1:4567) Please enter a NodeBB secret (ee18b7c3-1d23-41c9-800f-78d74acc0861) Would you like to submit anonymous plugin usage to nbbpm? (yes) Which database to use (mongo) redis Now configuring redis database: Host IP or address of your Redis instance (127.0.0.1) Host port of your Redis instance (6379) Password of your Redis database Which database to use (0..n) (0) The first time you run the setup command, you will also be asked to configure a forum administrator. When prompted, enter the desired information for the admin account. Once everything has finished installing, a configuration file config.json will be created. This file can be modified if you need to make changes to the above settings, such as the database location or credentials used to access the database. After the installation, build the files: % ./nodebb build And start the NodeBB server: % ./nodebb start You can now visit your forum at http://localhost:4567/ .","title":"Installing NodeBB"},{"location":"projects/P1/installation/windows/","text":"Installing NodeBB on Windows \u00b6 17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation . Installing WSL2 on Windows \u00b6 Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation. Installing NodeBB \u00b6 If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Windows"},{"location":"projects/P1/installation/windows/#installing-nodebb-on-windows","text":"17-313 will only be supporting development using Windows Subsystem Linux 2 (WSL2) on Windows (Ubuntu variant). To support the use of WSL2, it is highly recommended that you develop using VSCode . To learn more, refer to Microsoft's official WSL Documentation .","title":"Installing NodeBB on Windows"},{"location":"projects/P1/installation/windows/#installing-wsl2-on-windows","text":"Follow the instructions on the official Microsoft Getting Started Guide and complete all the steps up to (and including) the Use Visual Studio Code section. By the end of these instructions, you should: Have Ubuntu WSL2 installed Have a root Linux username and password set up Have updated and upgraded your packages Be able to open Ubuntu WSL2 in Windows Terminal Understand that you should store your project files on the same operating system as the tools you plan to use . For example, in order to successfully run NodeBB in Ubuntu, you should run git clone in your Ubuntu file system, open the cloned directory in Ubuntu, and edit the code files in Ubuntu Be able to open a directory in Ubuntu in VSCode Note In all future projects of this course, we will expect you to develop using WSL2. Thus, it is very important that you set up WSL2 correctly. Please come to office hours or ask on Slack if you need any assistance with the installation.","title":"Installing WSL2 on Windows"},{"location":"projects/P1/installation/windows/#installing-nodebb","text":"If you do not already have Git installed, follow the Git Installation on Linux for Ubuntu. Then, follow the Ubuntu instructions to install required tools and NodeBB itself on WSL2.","title":"Installing NodeBB"},{"location":"projects/P2/","text":"Project 2: Collaborative Development \u00b6 Learning Goals \u00b6 Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams Project Context \u00b6 CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation. Deliverables and Deadlines \u00b6 This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Spring Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 80 points \u2013 due Thursday, February 2nd, 11:59pm Prerequisite: Team Setup Teamwork Contract (40 pts) Project Planning (40 pts) Extra Credit (8 pts) B) First Sprint \u2013 100 points \u2013 due Tuesday, February 14th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (50 pts) - Held in Recitation on Monday, February 13th C) Second Sprint \u2013 140 points \u2013 due Thursday, March 2nd, 11:59pm Process & Implementation Final Snapshot (60 pts) Team Reflection (50 pts) Individual Reflection (30 pts)","title":"Project 2: Collaborative Development"},{"location":"projects/P2/#project-2-collaborative-development","text":"","title":"Project 2: Collaborative Development"},{"location":"projects/P2/#learning-goals","text":"Translating requirements into actionable user stories Practice getting to know a pre-existing code base and developing new features for it using previously unfamiliar technology Practice version control and development best practices within the context of a group assignment Plan and schedule projects in terms of tasks, milestones, and time estimations, and re-plan as required Make initial decisions on a team process, and reflect on your experience with the process Effectively coordinate among team members and conduct team meetings Meaningfully reflect on the experience of working in teams","title":"Learning Goals"},{"location":"projects/P2/#project-context","text":"CMU has over 14,000 students and hundreds of courses every semester. Many of these courses use a combination of educational platforms to distribute course materials (handouts, lecture notes, etc), manage student information, assess student learning, and provide a means of communication between the students and course staff. Examples of such platforms include Canvas, Piazza, and Gradescope. However, the distributed nature of this system makes it difficult for instructors to synchronize information across each of the different platforms, and the lack of standardization across the university forces students to remember a different set of links for each class. Your manager has assigned you to a team and has tasked you with building a new course management system over the course of the semester to be used campus-wide. To help manage the scope of this project, they have specifically requested you to focus on implementing the Q&A portion of this overarching system , i.e. the component that enables communication between the faculty and students. Rather than creating a new Q&A system from scratch, management has decided that you and your team will repurpose and adapt the existing forum system provided by NodeBB . Beyond being a pretty decent forum platform, NodeBB provides complex features that you expect will be useful like user registration, permission settings, post creation, sorting and filtering capabilities, and more. Despite its considerable functionality, NodeBB is still missing many of the basic features that you would expect to find in a course-based Q&A system and needs changes to better fit this new purpose. You and your team will be responsible for coming up with an initial development plan and beginning implementation.","title":"Project Context"},{"location":"projects/P2/#deliverables-and-deadlines","text":"This will be the first assignment with your group. There are three (3) deadlines for this project. Each of the core deliverables are described below. This project is worth a total of 320 points. Detailed information for each of the deadlines has been split into its own subpage on the left. Tip This is a large assignment spanning from now until Spring Break. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. A) Team Process & Planning \u2013 80 points \u2013 due Thursday, February 2nd, 11:59pm Prerequisite: Team Setup Teamwork Contract (40 pts) Project Planning (40 pts) Extra Credit (8 pts) B) First Sprint \u2013 100 points \u2013 due Tuesday, February 14th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (50 pts) - Held in Recitation on Monday, February 13th C) Second Sprint \u2013 140 points \u2013 due Thursday, March 2nd, 11:59pm Process & Implementation Final Snapshot (60 pts) Team Reflection (50 pts) Individual Reflection (30 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P2/1_teamprocess/","text":"Project 2A: Collaborative Development \u00b6 Deliverables \u00b6 Team Process & Planning \u2013 80 points \u2013 due Thursday, February 2nd, 11:59pm Prerequisite: Team Setup Teamwork Contract (40 pts) Project Planning (40 pts) Extra Credit (8 pts) Team Setup \u00b6 Slack Channel \u00b6 On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester. GitHub Repository \u00b6 You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/h0Z9Kv-d Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the first recitation). You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope. Teamwork Self-Assessment \u00b6 As the course moves into team-based projects, we will be releasing weekly self-assessments on Canvas, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, January 27th and due the following Friday, February 3rd (both at 11:59pm). Main Deliverables \u00b6 Teamwork Contract (40 pts) \u00b6 When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel. Project Planning (40 pts) \u00b6 Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below. Functional Requirements - User Stories \u00b6 During this meeting, discuss potential functional requirements of this project. Consider what possible use cases may be for this system and what features it should have to fulfill those needs. Then, document these functional requirements in the form of user stories that follow the guidelines discussed in lecture. All of your user stories should be in the format of \"As a [role], I want [function], so that [value]\". You should come up with at least two user stories per student in your group. Formulating User Stories Consider what are the different types of users that will be interacting with your system (your stakeholders) and what features they would want to have that the current NodeBB does not provide. You may want to reference features in existing Q&A systems (e.g. Piazza, Diderot) that may be desirable, or conduct interviews with your peers who could be a potential users of this system. As a team, you should then come up with a prioritization ranking for each user story. The prioritization should be based on two factors Impact : how essential is this user story to the overall functionality of the application to your stakeholders, how beneficial it would be to your stakeholders, and Effort : how much time/effort is required to implement this user story Once you have your list of user stories, create a new GitHub Project board (click into Projects on your team repository). Then create two new columns to the left called \"User Stories\" and \"Backlog\" . At this point in time, you should have \"User Stories\", \"Backlog\", \"To-Do\", \"In Progress\" and \"Done\" , in that order from left to right. Feel free to add more columns if your teams decide that you need them during your development process Add your user stories into the \"User Stories\" column using the \u201c+ Add item\u201d button at the bottom, create draft issues for each of your user stories.In the body of each of these draft issues, provide a brief but concrete justification of its prioritization ranking that your team decided on. You should order all the user stories in this column from highest to lowest priority. Technical Requirements - Issues \u00b6 Now that you have your prioritized list, consider the technical requirements of the various user stories and collectively decide on which one(s) you will be focusing on over the next two sprints. In this project (as like most projects), your team is aiming to maximize the amount of value you are delivering to your stakeholders given your constraints. Your selected user stories should have relatively high priority based on your team's ranking, and you should actively take factors into consideration that may impact your development. Selecting Appropriate User Stories Given the amount of variations in each team's user stories, it's hard to give concrete guideline on the number of user stories that a team needs to tackle. Teams could tackle 1 user story that requires major effort, or a few user stories that each requires lesser effort. In general, we are expecting that user stories be selected given: 2 sprints of 2 weeks each number of team members on your team assumption of 8 hours/week available per individual The course staff is happy to discuss this with your team during OH and we highly recommend you do so if your team is unsure. We will also be providing you with feedback during your first sprint's checkpoint presentation . The feature(s) you plan to implement should not be purely cosmetic or arbitrary. We expect this to be a non-issue as most high priority features to make NodeBB usable in a course environment would require changes that span across the development stack. Note An example of what would not be accepted is a cosmetic feature that only modifies a frontend UI component (i.e. changing the color of the navbar), or just the renaming of a field in the database. You may want to look ahead into parts 2B and 2C to check our specific requirements for your implementation. Convert the feature(s) you decide to implement into technical requirements (i.e. what needs to be developed for this feature to work). Then, break these requirements down into manageable, assignable issues and document them on your Project board by adding them to \u201cBacklog\u201d column. At minimum, these issues should make use of GitHub features like milestones/labels/descriptions to denote: Estimated effort for each task Dependencies among tasks (if any) Initial assignments for team members Milestones to indicate which sprint the issue should be completed in (Sprint 1, Sprint 2, Stretch) Acceptance criteria that describes how you know this task is done - think about how you will test this feature You should actively assign and move these issues across your Kanban board as your team makes progress. A Note on Grading We will not assess how accurately you predicted your development process, nor will we be giving points based on the complexity or quality of your changes. The focus of our evaluations will be on how you decompose the problem, how you respond to unexpected circumstances, and how you analyze and reflect on your experience later on. We will check your development progress at the end of each sprint. Please be proactive in your planning to ensure that you make notable progress in both of your sprints. We highly recommend reading ahead on what our expectations are for the end of each sprint as you plan your milestone goals. Include a link to your GitHub board in your Gradescope submission. If you are unsure about your planned changes, you can ask for feedback from a member of the course staff! Extra Credit (8 pts) \u00b6 Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester! Grading \u00b6 To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"2A Team Process & Planning"},{"location":"projects/P2/1_teamprocess/#project-2a-collaborative-development","text":"","title":"Project 2A: Collaborative Development"},{"location":"projects/P2/1_teamprocess/#deliverables","text":"Team Process & Planning \u2013 80 points \u2013 due Thursday, February 2nd, 11:59pm Prerequisite: Team Setup Teamwork Contract (40 pts) Project Planning (40 pts) Extra Credit (8 pts)","title":"Deliverables"},{"location":"projects/P2/1_teamprocess/#team-setup","text":"","title":"Team Setup"},{"location":"projects/P2/1_teamprocess/#slack-channel","text":"On the 17-313 Slack workspace, create a new private Slack channel that includes all your team members and the two TAs who are your team mentors (these are the same TAs that run your recitation \u2014 if you are unsure of who they are, ask in #general ). Use this Slack channel to collectively decide on a team name . Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to #team-<teamname> . You can use this Slack channel for subsequent project-team related discussions or specialized Q&A with your TA mentors for the rest of the semester.","title":"Slack Channel"},{"location":"projects/P2/1_teamprocess/#github-repository","text":"You will be working on your team repository for this project. Once you have decided on a team name, go to the link below to set up your team: https://classroom.github.com/a/h0Z9Kv-d Warning After you join a team on GitHub, you cannot change teams! Make sure that only one of you creates the team, and make sure that the remaining teammates join the right team. Once you enter your team name, Github will automatically create a repository for your team. You should then create a Github Project board for your repository (you can follow the steps from the GitHub Exercise or the first recitation). You should use this team repository for all your development, and be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. The same resources mentioned above provide more details on our guidelines. We will be grading you on how well you follow the process we used for Project 1 and utilize this Project board: Create issues for feature improvements or bug-fixes When creating issue, assign team members and tag with appropriate labels Create a pull request and reference the issue it will be resolving Provide feedback to pull requests Use a Kanban board to track your workflow For this project, you will create issues or pull requests directly in your team repository . We will use your commit history and issue/pull request activity on Github to assess both your teamwork process and each member\u2019s individual contributions towards the project. It is not acceptable for one person to commit all the work after synchronizing through other means. For each code-based deliverable, we will look at a snapshot of your repository at the deadline. This will often be done by asking you for a screenshot or commit link submitted via Gradescope.","title":"GitHub Repository"},{"location":"projects/P2/1_teamprocess/#teamwork-self-assessment","text":"As the course moves into team-based projects, we will be releasing weekly self-assessments on Canvas, each worth one participation point. These are meant to be short surveys and should not take more than a few minutes. They are intended to help you reflect on your team's process and prompt you to think about how to improve it. The first one will be released on Friday, January 27th and due the following Friday, February 3rd (both at 11:59pm).","title":"Teamwork Self-Assessment"},{"location":"projects/P2/1_teamprocess/#main-deliverables","text":"","title":"Main Deliverables"},{"location":"projects/P2/1_teamprocess/#teamwork-contract-40-pts","text":"When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict. Team Conflict Example A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present . We recommend that you keep it to around 1 page, 2 page is a hard limit. Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document. You are free to include anything that your team deems necessary, but you should minimally address the following sections: Expectations How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do accommodate for the fact that project load can get heavier towards the end of the semester. Communication What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response? For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites. Meeting Schedule When and how will your team meet? What modality would it be? A strong recommendation would be to set up a recurring 1hr meeting blocked out for the rest of the semester, so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class. Responsibilities How will you divide responsibilities for each project? During meetings, who will be in charge of note taking, organizing & running those meetings? From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Drive folder). Equitable Contribution & Conflict Resolution What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues is if they have followed the steps on their team contract. Feel free to seek the assistance of TAs and instructors in drafting this document. Note We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions. Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel.","title":"Teamwork Contract (40 pts)"},{"location":"projects/P2/1_teamprocess/#project-planning-40-pts","text":"Before your team jumps into development, you must first determine what features to implement. Schedule and hold an initial project planning meeting with your team to complete the steps outlined below.","title":"Project Planning (40 pts)"},{"location":"projects/P2/1_teamprocess/#extra-credit-8-pts","text":"Getting to know your colleagues in a friendly context can often lead to more effective collaboration; for example, healthy teams often get lunch together. To incentivize this, we will give your team extra credit for this assignment if you meet for a team bonding experience outside of a working session. You might want to eat together, go out for boba, or hold a board game session. If someone on your team is not feeling well, you may also do a virtual activity such as an online gaming session (Drawphone, Skribbl.io, etc.) or social \"Zoom lunch\". To receive extra credit, share the photo or screenshot of your team activity with your TA mentors by sending it in your team Slack channel before the deadline. We encourage you to do these types of meetings often throughout the semester!","title":"Extra Credit (8 pts)"},{"location":"projects/P2/1_teamprocess/#grading","text":"To receive full credit for the teamwork contract, we expect: All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates All group members\u2019 signatures at the end of the document To receive full credit for the project planning, we expect: A GitHub project board linked to your team repository with: A User Story column containing at least two user stories per group member that satisfy the guidelines outlined in the sections above and in lecture A Backlog column containing a series of GitHub issues describing the feature(s) that the team will tackle. Each issue makes use of GitHub features to denote all of the required information listed above","title":"Grading"},{"location":"projects/P2/2_firstsprint/","text":"Project 2B: Collaborative Development \u00b6 Deliverables \u00b6 First Sprint \u2013 100 points \u2013 due Tuesday, February 14th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (50 pts) - Held in Recitation on Monday, February 13th Process & Implementation Interim (50 pts) \u00b6 Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. You may also delete the hw1.yaml workflow found in .github/workflows . Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. What if I did not successfully translate my file in Project 1? If you do not need to modify that file in order to implement your team's feature, then you do not need to merge your file into your repository. You will not be penalized for not merging in your Project 1 file. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. To fit with the translation efforts described in Project 1, any new code introduced to the codebase should be in TypeScript . This does mean that you may need to translate existing files to fulfill this requirement. Using Translations from Project 1 Most of the existing files should have been translated by your classmates in Project 1! Feel free to reference their translations for your own uses - for citation purposes, include a short comment at the top of your file that cites the original translator and a link to where you found the translation, for example: // Referenced @student\u2019s TypeScript translation from P1: [PR link] Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Checkpoint Presentation (50 pts) \u00b6 During the Week 5 recitation slot ( Monday February 13th ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline. Grading \u00b6 To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback Resources & Documentation \u00b6 NodeBB Development \u00b6 We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"2B First Sprint"},{"location":"projects/P2/2_firstsprint/#project-2b-collaborative-development","text":"","title":"Project 2B: Collaborative Development"},{"location":"projects/P2/2_firstsprint/#deliverables","text":"First Sprint \u2013 100 points \u2013 due Tuesday, February 14th, 11:59pm Process & Implementation Interim Snapshot (50 pts) Checkpoint Presentation (50 pts) - Held in Recitation on Monday, February 13th","title":"Deliverables"},{"location":"projects/P2/2_firstsprint/#process-implementation-interim-50-pts","text":"Start by cloning the team repository and merging your individual changes from Project 1 into your team repository using proper git flow. You may also delete the hw1.yaml workflow found in .github/workflows . Once everyone has properly set up the repository on their local machines and committed their changes, you can now start development. What if I did not successfully translate my file in Project 1? If you do not need to modify that file in order to implement your team's feature, then you do not need to merge your file into your repository. You will not be penalized for not merging in your Project 1 file. You should follow best practices for collaborative development such as using feature branches, pull requests, and code review. Individual changes should be committed to properly named branches for each core feature being implemented and make use of pull requests to merge changes together. Be sure to review each other\u2019s code - both from a quality assurance standpoint, but also so you have a better understanding of the codebase. Although code reviews can be done asynchronously, we encourage the first few to be done synchronously so you can discuss the changes with your teammates and learn more about the codebase. To fit with the translation efforts described in Project 1, any new code introduced to the codebase should be in TypeScript . This does mean that you may need to translate existing files to fulfill this requirement. Using Translations from Project 1 Most of the existing files should have been translated by your classmates in Project 1! Feel free to reference their translations for your own uses - for citation purposes, include a short comment at the top of your file that cites the original translator and a link to where you found the translation, for example: // Referenced @student\u2019s TypeScript translation from P1: [PR link] Every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process &amp; Implementation Interim (50 pts)"},{"location":"projects/P2/2_firstsprint/#checkpoint-presentation-50-pts","text":"During the Week 5 recitation slot ( Monday February 13th ), your group will give a 10-minute presentation describing your current progress, followed by a short 1-2 minute Q&A session where you can get feedback from the TAs and your peers. Your slides should include the following information (the recommended slides amount is in parentheses): Title Slide (1 slide) Include your team name & the names of each team member Project Planning (~1-2 slides) What user stories did your team choose to focus on? What feature(s) did you plan on implementing to fulfill them? Development Progress (~1-2 slides per person) What have you changed so far? How did you test your changes? What have you learned about the codebase? How does this compare with your original milestone goals? If your team did not meet your goals, why? Each team member should describe the contributions they made. In this section, you must include a video demo of your current progress; if you were not able to make a working build, include screenshots that show your current progress and clearly explain what factors impeded your progress. Process Overview (~1-2 slides) What process strategies (i.e. meeting frequency, code reviews) did your team use for the first sprint? Was it effective? Did you encounter any difficulties or have to make any changes? Looking Ahead (~2-4 slides) What are some current risks and/or questions that your team has after completing the first sprint? Has your experience with the first sprint affected your planning of the second sprint? Do you need to rescope? Do you need to reevaluate your process? If you did not meet your development goals, you should outline what you plan to proactively change for this upcoming sprint. A Note on Participation Participation from all team members during the presentation is required. If you are unable to attend in-person, send a Slack message to your recitation TAs with justifications at least 24 hours before the start of your recitation . You will then be permitted to present by submitting a recording of your segment of the presentation, which your teammate will play during the presentation. The presentation slides should be exported into a PDF and submitted to Gradescope by the Tuesday deadline.","title":"Checkpoint Presentation (50 pts)"},{"location":"projects/P2/2_firstsprint/#grading","text":"To receive full credit for the implementation, we expect: Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the current progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits To receive full credit for the presentation, we expect: All team members to be present for the presentation (or have contacted their TAs ahead of time to request an absence) and to contribute towards presenting their team\u2019s progress All of the material described above covered in the presentation PDF Slides uploaded to Gradescope for grading & feedback","title":"Grading"},{"location":"projects/P2/2_firstsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P2/2_firstsprint/#nodebb-development","text":"We highly recommend that, before starting development, you take the time to analyze the codebase with your team using the code archaeology techniques you have learned. One good place to start is determining where the MVC (or frontend/middleware/backend) split is and trying to make a small change in each section. You will find some resources to help you with development in the README of the NodeBB repository. Here are a few specific links to get you started: NodeBB Documentation Frontend Development: Benchpress Documentation Bootstrap 3 Documentation Server Development: Node.js Documentation Database/Backend: Redis Documentation Redis CLI","title":"NodeBB Development"},{"location":"projects/P2/3_secondsprint/","text":"Project 2C: Collaborative Development \u00b6 Deliverables \u00b6 Second Sprint \u2013 140 points \u2013 due Thursday, March 2nd, 11:59pm Process & Implementation Final Snapshot (60 pts) Process & Team Reflection (50 pts) Individual Reflection (30 pts) Process & Implementation Final (60 pts) \u00b6 Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there. Process & Team Reflection (50 pts) \u00b6 After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims. Individual Reflection (30 pts) \u00b6 In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection. Grading \u00b6 To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence Resources & Documentation \u00b6 NodeBB Development \u00b6 By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"2C Second Sprint"},{"location":"projects/P2/3_secondsprint/#project-2c-collaborative-development","text":"","title":"Project 2C: Collaborative Development"},{"location":"projects/P2/3_secondsprint/#deliverables","text":"Second Sprint \u2013 140 points \u2013 due Thursday, March 2nd, 11:59pm Process & Implementation Final Snapshot (60 pts) Process & Team Reflection (50 pts) Individual Reflection (30 pts)","title":"Deliverables"},{"location":"projects/P2/3_secondsprint/#process-implementation-final-60-pts","text":"Continue working on the implementation of your feature(s). Be sure to continue following best practices for collaborative development similar to the previous sprint. As you become more familiar with the codebase, we have higher expectations for the final deliverables of this sprint. Specifically, along with your feature changes, we expect to see: Automated Tests Add tests to the test suite that demonstrate the functionalities you implemented These should follow the acceptance criteria you set from the initial planning User Documentation Create a new file UserGuide.md in the root directory of your repository In this file, provide a detailed outline of how to use and user test your new feature(s) You should also provide a link/description of where your added automated tests can be found, along with a description of what is being tested and why you believe the tests are sufficient for covering the changes that you have made GitHub Actions GitHub Actions should be enabled. It is reasonable to have failures in feature branches, but you should do your best to make your main branch build consistently pass. As with the first sprint, every member of your team must contribute to the implementation. One way we will evaluate this is that each team member must have at least one commit as a part of the solution. Failure to do so will result in a significant penalty to your grade. You must commit all of your changes to the main branch of your team repository before the homework deadline. Unlike the previous assignment, you should not submit your changes to the parent NodeBB repository. Submit a link to your repository and your Github Project board onto Gradescope. For grading, we will take a snapshot of your repository and board right at the deadline and grade based on your progress there.","title":"Process &amp; Implementation Final (60 pts)"},{"location":"projects/P2/3_secondsprint/#process-team-reflection-50-pts","text":"After coding is complete, reflect on your experience as a team. Again, we look for honest reflection, which will likely include reflection on failures. We will not grade whether you predicted the effort correctly, but rather what you have learned . You will see the following groups of questions on Gradescope. We recommend that your team use collaborative text editing tools like Google Docs to draft your answers, then submit your final answers to Gradescope. Actual Schedule: Document the actual schedule of your development process into either an organized list or table. You should include all of the tasks that each team member actually performed and the approximate amount of time each took. Your commit history and other documentation should help you with this. Schedule Deviations: Reflect on the differences between your planned and actual schedule, and answer the following questions: Which milestones were predicted correctly and what was re-planned? Was there anything you did not plan for initially or that you had to drop in the end? What were the reasons for the above changes and could they have been foreseen with better planning? Development Process: Reflect on the process (specifically, the steps each team member took to contribute to the codebase) you followed during the project, and answer the following questions: What was the process you initially planned to follow? What was the process you actually followed? Was the process effective? Why or why not? Did you skip steps or adopt additional techniques during the project? What were they and why did you do so? Meeting Minutes: Attach all meeting minutes kept throughout the project, which should include information about the agenda/topics discussed, decisions made, and work assignments. Team Experience: Reflect on your experience working as a team. You should discuss as a team on the aspects of communication, scheduling, responsibilities and equitable contributions. Answer the following points by providing at least three actions that your team will take to improve in the future (feel free to have more than one in category and zero in another, they should just add up to three): What should your team keep doing? What worked well, and why? What should your team start doing? What didn't work so well, and why? What will you do differently? What should your team stop doing? What are some bad habits that your team should avoid in the future and why? Support your claims You should reference your meeting minutes to support your claims and provide examples. A weakly supported statement would be as follows: \u201cWe will communicate better, because miscommunication caused issues\" You should support your statements with examples from the development experience. For example: \"In the future, we will try to use [such-and-such a process] for clearly documenting and communicating such design decisions, rather than [the process we did follow/failed to follow]. One of our [main challenges/development slowdown/quality problems] was the integration of components A and B, because the API for A was not well-understood by the developer of B. \" Teamwork Contract: Based on the process and team reflection above, update your teamwork contract. Did you encounter any issues or unexpected experiences that your original contract did not foresee? Feel free to add in any other clauses if necessary to your team contract. Upload your new teamwork contract (be sure to sign and date it), and highlight the changes you made in yellow. Being able to communicate effectively is an important software engineering skill. As such, your reflection should be well-written and easy to read. Be sure to leave time after writing for revision and proofreading. Reflection Grading One of the main purposes of this project is to encourage in-depth analysis of the reasons for good or bad time estimation, scheduling, and teamwork coordination. Doing poorly in these is not unusual (as numerous reports from real-life projects show). We will not evaluate how well (or badly) the project went, but instead how well you understood the reasons why the project went as it did, and what lessons you drew from your experience to inform your future work. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support the claims.","title":"Process &amp; Team Reflection (50 pts)"},{"location":"projects/P2/3_secondsprint/#individual-reflection-30-pts","text":"In addition to the team reflection, you will also be submitting an individual reflection on Gradescope. We want you to connect this project's experience with your previous experience with collaborative development. Your previous experience may be from an academic or non-academic setting, such as internships, hackathons, or personal projects. Your reflection should address the following questions (and sub-questions): What previous collaborative projects have you done before? How does this project experience compare with your previous experience? What was similar and what was different? What did you personally learn from this project\u2019s development process? Process here refers to the steps you took to contribute to the codebase. What did you think worked well? What did you think did not work well? Was there anything unexpected? What did you learn about working in a team? What did you learn about yourself? What did you learn about working with others? What are you planning to do differently or improve upon in your future projects? What would you like to keep doing? Provide at least one concrete action that you plan on acting upon in the next project. Similar to the team reflection task, we will grade the quality and depth of your reflection.","title":"Individual Reflection (30 pts)"},{"location":"projects/P2/3_secondsprint/#grading","text":"To receive full credit for the implementation, we expect: Progress from Interim Snapshot Fulfillment of implementation goals as outlined by the planned milestones, or a clearly written justification in the milestone description of why elements fell through An updated Project Board for the final progress Reasonable code structure and style, including documentation where appropriate Coherent commits of reasonable size with meaningful commit messages by all team members High quality usage of Git/GitHub tools, such as issues, milestones, pull requests, and commits Additional Requirements for Final Submission Automated test cases for the implemented functionalities GitHub Actions running on the repository and passing on the main branch Created UserGuide.md file containing user documentation of the new feature that fulfills the guidelines given above A functional new feature that works when following the steps in UserGuide.md . Note that we aren't expecting the feature to be bug free, but it should work under general expected usage. To receive full credit for the process and team reflections, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between the planned and the actual schedule An analysis beyond mere descriptions and superficial statements, including supporting evidence for claims, that reflects on the causes of deviations, conflicts, and so forth, or your own experience Inclusion of meeting minutes(s) that adequately demonstrate your team\u2019s meeting process At least three concrete actions with that your team will either start, stop, or keep doing in the future, with proper justification and supporting evidence To receive full credit for the individual reflection, we expect: A detailed, well written, and well structured reflection on each of the provided guiding questions A comparison between current and previous experience A reflection on the development process, including what worked well and what did not work well A reflection on working in a team, with learnings about self and working with others At least one concrete action that you will act upon in the future, with proper justification and supporting evidence","title":"Grading"},{"location":"projects/P2/3_secondsprint/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P2/3_secondsprint/#nodebb-development","text":"By now, you should be familiar enough with the codebase to finish making the remainder of your changes. The additional focus of this second sprint is on testing your code; hence, documentation related to the testing framework will be very helpful. As with before, you will find some resources to help you with development in the README of the NodeBB repository. You will now want to check the testing section for resources on the Mocha test framework: Mocha Documentation Everything from the \"Getting Started\" section and below is documentation on how the framework works. You can also reference existing tests!","title":"NodeBB Development"},{"location":"projects/P3/","text":"Project 3: Continuous Integration + Deployment \u00b6 Learning Goals \u00b6 Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice Project Context \u00b6 Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process. Deliverables and Deadlines \u00b6 There are two (2) deadlines for this project. This project is worth a total of 120 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, March 16th Friday, March 17th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 85 points \u2013 due Thursday, March 23rd, 11:59pm CD Implementation (10 pts) Tool Analysis Design Doc (60 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, March 23rd, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the SRE for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration. Checkpoint Deliverables \u00b6 Deployed Application (25 pts) \u00b6 Your team will be using the website fly.io for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit. Tools Checkpoint (10 pts) \u00b6 Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools Final Deliverables \u00b6 CD Implementation (10 pts) \u00b6 Now that you have successfully deployed your application manually for the checkpoint deadline, add a workflow to your team repository that will automatically deploy your application. In doing so, consider how often you would want to deploy, and if you would need to make changes to your repository to ensure best development practices. GitHub Secrets You may have sensitive or secret values that will be required by your workflow in order to successfully deploy your application. As your team repository is public, be sure to follow best GitHub practice in creating secrets to prevent such values from being leaked. Submit a link to a successful deployment GitHub Action run along with a brief description/justification of how you set up the workflow to Gradescope. Tool Analysis Design Doc (60 pts) \u00b6 Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections. Tool Evaluations (~N pages) \u00b6 For each of the N-1 tools explored by your team, you must provide: Name and high-level description of what the tool does and a link to its documentation/source Whether the tool is used for static or dynamic analysis A link to the pull request made from the testing branch for this tool A pro/con analysis of the tool and appropriate evidence in the form of screenshots to support your claims. You can use the questions provided in the research you did for the checkpoint to shape your analysis. Each of these sections should take up approximately 1 page (including screenshots) and no more than 2 pages. Justification (~Half a page) \u00b6 After going through each of the tools, you should explicitly state the tool(s) you are choosing to integrate for this project and provide a justification for why you are selecting this tool. You should refer to the pro/con analysis done in the prior sections and how they align with the goals of your team and the project overall. You must recommend at least one tool , even if it\u2019s with reservations. Integration (<1 page) \u00b6 This section should address the different factors to take into consideration when integrating a new tool. At minimum, you should address the following: Technical Questions How are you integrating the tool (high-level)? At what point in the development/deployment process shall it be integrated? What sorts of customization or configuration will you be using? If you added any specific configuration to allow the main branch of your repository to pass its status checks, add the justification for those decisions in this section. Social Integration Questions How do you foresee the team using the tool during their development process? Consider the incentives & deterrents to the developers when it comes to using the tool, and their personal motivation to use it. Your answers should be based on your experiences running the tools on your team repository and be grounded in data from your research on different factors such as tool usability, output, and customizability. Keep this section updated as you work on implementing the integration. Conclusion (<1 page) \u00b6 In this section, provide a brief summary of your findings along with items that were not addressed in the previous sections. Are there any open questions? Are there any issues you consider to be out of scope? What drawbacks of the proposed process/tooling are you accepting for some (good) reason? This section should be used to wrap everything up and ensure you have a good/complete design document! Submit the Design Document as a single PDF to Gradescope. Tool Integration (15 pts) \u00b6 Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have not completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs. Extra Credit \u00b6 Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project. Feature Review (6 pts) \u00b6 For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing. Grading \u00b6 To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described. Resources & Documentation \u00b6 Starter List of Tools \u00b6 NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find! Static Tools \u00b6 flow : Static type checker for JavaScript JScent : Program analyzer for detecting \u201ccode smells\u201d JSHint : Used to flag suspicious usage in JavaScript programs StandardJS / ts-standard : Static analysis tool for code quality within JavaScript/TypeScript projects Retire.js : Finds library/node module vulnerabilities within your project Dynamic Tools \u00b6 Iroh : Runtime code tracking and visualization Jalangi : Framework for dynamic analyses in JavaScript Fast-Fuzz : Fuzzing framework for TypeScript Stryker Mutator : Mutation testing tool for JavaScript","title":"Project 3: Continuous Integration + Deployment"},{"location":"projects/P3/#project-3-continuous-integration-deployment","text":"","title":"Project 3: Continuous Integration + Deployment"},{"location":"projects/P3/#learning-goals","text":"Learn how to deploy a full-stack application Gain hands-on experience with analysis tools, including setting up, customizing, and using them Practically assess and compare the costs and benefits of existing static and dynamic bug-finding tools Integrate CI/CD tools into development practice","title":"Learning Goals"},{"location":"projects/P3/#project-context","text":"Adding continuous integration for quality assurance is a critical part of software development. Although you have been testing your new system this whole time, you are now setting out to establish sustained practices that can be used moving forward as you iterate over and continue to improve your system. Your manager has assigned you two major tasks. Firstly, establishing a deployment pipeline to create a test version of the website that can be sent to beta testers who have little to no experience with code development (and therefore can not set up the developer environment by themselves). Secondly, evaluating existing tools and practices beyond simple linting or unit testing, then producing a report on the cost/benefit tradeoffs and risks of them. You will also select and integrate one (or more!) of these tools into your development process.","title":"Project Context"},{"location":"projects/P3/#deliverables-and-deadlines","text":"There are two (2) deadlines for this project. This project is worth a total of 120 points. Checkpoint Deliverables \u2013 35 points \u2013 due Thursday, March 16th Friday, March 17th, 11:59pm Deployed Application (25 pts) Tools Checkpoint (10 pts) Final Deliverables \u2013 85 points \u2013 due Thursday, March 23rd, 11:59pm CD Implementation (10 pts) Tool Analysis Design Doc (60 pts) Tool Integration (15 pts) Extra Credit (Individual) - 6 points - due Thursday, March 23rd, 11:59pm Feature Review (6 pts) Work Distribution There are two main focuses in this project: deployment and static/dynamic analysis. For the purposes of equitable distribution of labor, we recommend that you nominate one of your members to act as the SRE for this assignment who will be primarily responsible for deployment, and have all other teammates focus on tool research and integration.","title":"Deliverables and Deadlines"},{"location":"projects/P3/#checkpoint-deliverables","text":"","title":"Checkpoint Deliverables"},{"location":"projects/P3/#deployed-application-25-pts","text":"Your team will be using the website fly.io for the deployment of the NodeBB application. Further instructions on how to deploy can be found here . Once you have successfully deployed your website, make sure to test within your team to ensure that your added feature(s) from Project 2 are properly integrated. By the checkpoint deadline you should Submit a link to the deployed site onto Gradescope Add your deployed site to this public spreadsheet , alongside your team name & UserGuide.md that your team submitted for Project 2. This will be used in Feature Review for extra credit.","title":"Deployed Application (25 pts)"},{"location":"projects/P3/#tools-checkpoint-10-pts","text":"Before jumping into tool integration, your manager would like you to research what existing analysis tools are out there that can be used with NodeBB. You will evaluate the tools, and eventually document your findings in a design document for your final deliverable. First, identify and experiment with at least N-1 potential static and dynamic analysis tools that are applicable to your system, where N is the number of people in your team. We provide a starter list of tools in the resources section below to help you get started, but you are not limited to these tools. In your selection of tools, you should have at least one static analysis tool have at least one dynamic analysis tool have at least one tool that is not from our starter list not use any of the existing tools within NodeBB as part of your analysis (mocha/ESLint/TSLint) For each tool that you assess Create a separate testing branch in your repository (named appropriately for the tool you\u2019re testing) to integrate the tool into your project and test out its capabilities Create a pull request to the main branch from each of these testing branches. The PR should have Concrete evidence that you had successfully installed the tool through trackable file changes demonstrating that extra files/NPM packages were installed. Artifacts that demonstrate that you have successfully run the tool on your repository. Acceptable artifacts include output files generated by the tool, or a text file containing the terminal output from the tool; you may also attach screenshots as additional pieces of evidence. They can be attached to the Pull Request in either the description or follow-up comments. Grading Note We will not be grading the quality or quantity of any code you put into these testing branches/PRs, just the evidence that you have successfully installed and run the tool. In your evaluations, consider & experiment with the types of customization that are appropriate or necessary for this tool, both a priori (before they can be used in your project) and over time. Assess the strengths and weaknesses of each tool/technique, both quantitatively and qualitatively. Consider some of the following questions: What types of problems are you hoping your tooling will catch? What types of problems does this particular tool catch? What types of customization are possible or necessary? How can/should this tool be integrated into a development process? Are there many false positives? False negatives? True positive reports about things you don\u2019t care about? Tool Evaluation There are a lot of different factors to consider when evaluating a tool. We recommend discussing with your teammates and deciding on a group of metrics to focus on when performing evaluations. Time Management Don\u2019t spend too long for this checkpoint. Set deadlines within your team to ensure that you have enough time for both the design document and integration deliverables described below for the final deadline. By the checkpoint deadline, your team will submit your initial list of the N-1 tools that your team plans on exploring, and links to the PRs that demonstrate that you have successfully installed and run each of these tools","title":"Tools Checkpoint (10 pts)"},{"location":"projects/P3/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"projects/P3/#cd-implementation-10-pts","text":"Now that you have successfully deployed your application manually for the checkpoint deadline, add a workflow to your team repository that will automatically deploy your application. In doing so, consider how often you would want to deploy, and if you would need to make changes to your repository to ensure best development practices. GitHub Secrets You may have sensitive or secret values that will be required by your workflow in order to successfully deploy your application. As your team repository is public, be sure to follow best GitHub practice in creating secrets to prevent such values from being leaked. Submit a link to a successful deployment GitHub Action run along with a brief description/justification of how you set up the workflow to Gradescope.","title":"CD Implementation (10 pts)"},{"location":"projects/P3/#tool-analysis-design-doc-60-pts","text":"Create a Design Document/RFC that includes: A tools evaluations section detailing your team\u2019s analysis on each of the tools you experimented with A justification section explaining which tool(s) you think the project should use moving forward An integration section describing how the selected tool(s) shall be integrated into your process A conclusion section summarizing your work Below, we provide more detailed instructions and page limit recommendations for each of the sections.","title":"Tool Analysis Design Doc (60 pts)"},{"location":"projects/P3/#tool-integration-15-pts","text":"Once you have a tool selected along with a general integration plan, you should fully integrate one of the tools into your project\u2019s workflow. For your checkpoint research, you should have successfully run this tool locally; you should then create a new workflow within the project to run it as part of the development cycle. Your team should discuss: How often should this new integration be run (on each pull request? on commits to main?) What level of customization is needed for this tool? How should the integration of this tool be enforced? This configuration must have been justified in your design document under the Integration section. To be considered successfully integrated, the tool must: Be merged into your main branch Have been run at least once in the Git flow cycle (i.e. either during the pull request, merge, or commit stage). Pass when run on your codebase. This is indicated by having a green checkmark. Ensuring Passing Checks In order to ensure your checks pass successfully, you may have to make additional changes to your repository, such as fixing reported issues or tweaking tool configuration. These changes should be documented and addressed in your design document. Continually failing builds show you have not completely integrated the tool into your workflow. On Gradescope, submit a link to your repository and a link to one of the successful GitHub Action runs.","title":"Tool Integration (15 pts)"},{"location":"projects/P3/#extra-credit","text":"Now that you and your classmates have deployed your applications, you will be able to test out each other\u2019s features and provide constructive feedback on your experience and how to improve them! Take this as an opportunity to learn about what your classmates have been working on for the past few weeks. Note that this is an individual task, unlike the rest of project.","title":"Extra Credit"},{"location":"projects/P3/#feature-review-6-pts","text":"For extra credit, you will conduct reviews of features developed by three other teams' project. Pick three teams's deployment from the public spreadsheet to review, 1 from your own section, and 2 from other sections. For each team, you will submit a review of their feature(s). You will need to test the feature(s) as described in their UserGuide and provide feedback on the following: How was the experience of using the feature(s), would this be something you think would help enable better communication between faculty and students and why? How do you think the feature can be improved? and/or What do you think the feature did well in? Did you discover any bugs using the feature(s)? To qualify for extra credit, you will have to submit your review: on Gradescope in the appropriate sheet in the public spreadsheet . There should be one sheet per team, and you should add your review to the sheet for the team you are reviewing.","title":"Feature Review (6 pts)"},{"location":"projects/P3/#grading","text":"To receive full credit for the checkpoint, we expect: A link to your successfully deployed web application for your team repository A list of N-1 different static and dynamic analysis tools, where N is the number of members on your team. This list must satisfy all the following criteria: Contain at least one static analysis tool Contain at least one dynamic analysis tool Contain at least one tool not on our starter list of tools Links to N-1 pull requests for each of the selected tools containing evidence of the tool being run at least once on your repository To receive full credit for the final deadline, we expect: A link to your successfully run CD GitHub action that deploys the website while following proper GitHub practices in handling deployment secrets A design document describing your research into each of the potential tools, justification for your selection of integrated tool(s), and your final integration plan A link to a succuessful run of a GitHub Action that demonstrates your integration of your selected tool(s) into your team workflow To receive full credit for the extra credit, we expect: Your review of three different teams' features on Gradescope and on the public spreadsheet , addressing the three questions described.","title":"Grading"},{"location":"projects/P3/#resources-documentation","text":"","title":"Resources &amp; Documentation"},{"location":"projects/P3/#starter-list-of-tools","text":"NodeBB is built in Javascript/Typescript using Node.js and uses Benchpress for its frontend templating. Below are non-exhaustive lists of analysis tools that are available. For other resources, Awesome Static Analysis page and Awesome Dynamic Analysis page have extensive listings of available static and dynamic analysis tools for a pretty hefty list of programming languages. Some of the tools already have existing GitHub Actions workflows on GitHub Marketplace; use your Googling skills, and see what you find!","title":"Starter List of Tools"},{"location":"projects/P3/deployment/","text":"Deploying NodeBB to Fly.io \u00b6 This document will provide instructions to deploy NodeBB on Fly.io. We recommend following this tutorial with a clean install of NodeBB to ensure it works. Once you successfully deploy, you can add your changes. The steps are as follows: Install Fly.io command line tools \u00b6 First, you should install and log into Fly.io\u2019s command line utility. Follow these guides! https://fly.io/docs/hands-on/install-flyctl/ https://fly.io/docs/getting-started/log-in-to-fly/ Edit database connection file \u00b6 In src/database/redis/connection.js . Add family : 6 , to whenever a new Redis object is created. ~ lines 20, 28, 37. i.e. new Redis ({ sentinels : options . sentinels , ... options . options , family : 6 , }); The Redis database that Fly.io creates connects via IPv6, so we must change our connection config to account for this. Initial Launch \u00b6 In your NodeBB directory, run flyctl launch For the following prompts, answer as follows: Name -> Anything reasonable you\u2019d like for your app name Region -> Ashburn, Virginia (or any reasonable US ones) Setup a Postgres DB? -> No Setup a Redis DB? -> Yes Choose the free 100MB data plan It\u2019ll output something along these lines Your Upstash Redis database nodebb-redis is ready. Apps in the personal org can connect to at redis://default:a2b2e64367fa4b7c8a14f8f8d558f3dc@fly-nodebb-redis.upstash.io Keep this URL handy! Create a .dockerignore? -> No Deploy now? -> No We still need to update some config files Edit fly.toml Change internal_port to 4567. This is the port that NodeBB uses as default. Warning Make sure to delete your local config.json file before proceeding to the next step This will be generated by NodeBB when it runs ./nodebb setup remotely. Run flyctl deploy This will build the image. Click the monitoring link, which will open your app\u2019s dashboard on Fly.io Remote Setup \u00b6 On the monitoring page, click Overview on the left navbar, and click the purple hostname link. You should now see the NodeBB installer page Enter admin username, email, and password, as usual For database type, select Redis Populate database form. Remember that URL from the initial launch? Host IP or address: the fly-XXXX-redis.upstash.io part of the link above Host port: 6379 Password: the string between the : and @ of the link Example URL: redis://default: a2b2e64367fa4b7c8a14f8f8d558f3dc @ fly-nodebb-redis.upstash.io The underlined text is your host, and highlighted text is your password. Click Install NodeBB Monitor deployment back on Fly.io page It will run, and eventually attempt to build the TypeScript files. Here, it will fail. This is okay! The free Fly.io instances don\u2019t have enough memory to fully build NodeBB. To get around this, we\u2019ll build NodeBB locally and deploy the compiled files. The steps we\u2019ve completed thus far just served to set up our database correctly. Local Setup \u00b6 Run ./nodebb setup and set it up like usual. No need to run ./nodebb start The above command will build NodeBB and generate a config.json file. We\u2019ll need to edit this so that it matches the config.json of our deployed app. Edit config.json a. Run flyctl ssh console to SSH into your app. b. Run cd usr/src/app c. Run cat config.json d. Copy the output from the console into your local config.json file Next, we\u2019ll update the Dockerfile (which are the instructions Fly.io uses to deploy your app) a. Open the Dockerfile file in your local NodeBB directory b. Update line 25 as follows. We remove the build command from the deployment instructions. This way, we use the build artifacts from our local build. -CMD test -n \" ${ SETUP } \" && ./nodebb setup || node ./nodebb build ; node ./nodebb start +CMD test -n \" ${ SETUP } \" && ./nodebb setup || node ./nodebb start Deploy \u00b6 Run flyctl deploy Click the monitoring link, which will open your app\u2019s dashboard on Fly.io. Wait until the log output shows that NodeBB was initialized. Click the overview again and open your app! Congratulations, you have now successfully deployed NodeBB! Be sure to share the application link with your teammates to ensure they can also access the application and test that all your added features from Project 2 have been successfully applied.","title":"Deployment Instructions"},{"location":"projects/P3/deployment/#deploying-nodebb-to-flyio","text":"This document will provide instructions to deploy NodeBB on Fly.io. We recommend following this tutorial with a clean install of NodeBB to ensure it works. Once you successfully deploy, you can add your changes. The steps are as follows:","title":"Deploying NodeBB to Fly.io"},{"location":"projects/P3/deployment/#install-flyio-command-line-tools","text":"First, you should install and log into Fly.io\u2019s command line utility. Follow these guides! https://fly.io/docs/hands-on/install-flyctl/ https://fly.io/docs/getting-started/log-in-to-fly/","title":"Install Fly.io command line tools"},{"location":"projects/P3/deployment/#edit-database-connection-file","text":"In src/database/redis/connection.js . Add family : 6 , to whenever a new Redis object is created. ~ lines 20, 28, 37. i.e. new Redis ({ sentinels : options . sentinels , ... options . options , family : 6 , }); The Redis database that Fly.io creates connects via IPv6, so we must change our connection config to account for this.","title":"Edit database connection file"},{"location":"projects/P3/deployment/#initial-launch","text":"In your NodeBB directory, run flyctl launch For the following prompts, answer as follows: Name -> Anything reasonable you\u2019d like for your app name Region -> Ashburn, Virginia (or any reasonable US ones) Setup a Postgres DB? -> No Setup a Redis DB? -> Yes Choose the free 100MB data plan It\u2019ll output something along these lines Your Upstash Redis database nodebb-redis is ready. Apps in the personal org can connect to at redis://default:a2b2e64367fa4b7c8a14f8f8d558f3dc@fly-nodebb-redis.upstash.io Keep this URL handy! Create a .dockerignore? -> No Deploy now? -> No We still need to update some config files Edit fly.toml Change internal_port to 4567. This is the port that NodeBB uses as default. Warning Make sure to delete your local config.json file before proceeding to the next step This will be generated by NodeBB when it runs ./nodebb setup remotely. Run flyctl deploy This will build the image. Click the monitoring link, which will open your app\u2019s dashboard on Fly.io","title":"Initial Launch"},{"location":"projects/P3/deployment/#remote-setup","text":"On the monitoring page, click Overview on the left navbar, and click the purple hostname link. You should now see the NodeBB installer page Enter admin username, email, and password, as usual For database type, select Redis Populate database form. Remember that URL from the initial launch? Host IP or address: the fly-XXXX-redis.upstash.io part of the link above Host port: 6379 Password: the string between the : and @ of the link Example URL: redis://default: a2b2e64367fa4b7c8a14f8f8d558f3dc @ fly-nodebb-redis.upstash.io The underlined text is your host, and highlighted text is your password. Click Install NodeBB Monitor deployment back on Fly.io page It will run, and eventually attempt to build the TypeScript files. Here, it will fail. This is okay! The free Fly.io instances don\u2019t have enough memory to fully build NodeBB. To get around this, we\u2019ll build NodeBB locally and deploy the compiled files. The steps we\u2019ve completed thus far just served to set up our database correctly.","title":"Remote Setup"},{"location":"projects/P3/deployment/#local-setup","text":"Run ./nodebb setup and set it up like usual. No need to run ./nodebb start The above command will build NodeBB and generate a config.json file. We\u2019ll need to edit this so that it matches the config.json of our deployed app. Edit config.json a. Run flyctl ssh console to SSH into your app. b. Run cd usr/src/app c. Run cat config.json d. Copy the output from the console into your local config.json file Next, we\u2019ll update the Dockerfile (which are the instructions Fly.io uses to deploy your app) a. Open the Dockerfile file in your local NodeBB directory b. Update line 25 as follows. We remove the build command from the deployment instructions. This way, we use the build artifacts from our local build. -CMD test -n \" ${ SETUP } \" && ./nodebb setup || node ./nodebb build ; node ./nodebb start +CMD test -n \" ${ SETUP } \" && ./nodebb setup || node ./nodebb start","title":"Local Setup"},{"location":"projects/P3/deployment/#deploy","text":"Run flyctl deploy Click the monitoring link, which will open your app\u2019s dashboard on Fly.io. Wait until the log output shows that NodeBB was initialized. Click the overview again and open your app! Congratulations, you have now successfully deployed NodeBB! Be sure to share the application link with your teammates to ensure they can also access the application and test that all your added features from Project 2 have been successfully applied.","title":"Deploy"},{"location":"projects/P4/","text":"Project 4: Software Architecture + ML Evaluation \u00b6 Learning Goals \u00b6 Design a software architecture for software system that incorporates machine learning Decide the appropriate architecture for a given problem Assess and describe the tradeoffs of different architectures Integration of machine learning into a software system and reason about their implications Evaluate the performance and fairness of machine learning models Engage meaningfully with engineering ethics Project Context \u00b6 As you and your team continue developing the new system, your CMU contact suddenly bursts into the room shouting, \u201cCareers! Hiring! Machine learning!\u201d Your manager follows closely behind and provides an explanation: a significant number of job recruiters have taken interest in your project and would like to use the platform as a means to reach out to students for career opportunities. However, the population of students is too large, and increasing annually. They are concerned by the sheer number of students to review for job applications, and recruiters want a simpler way to narrow the applicant pool. While your team had been working on deployment, your buzzword-enamored clients had hired another engineer to work on an extra ML-based feature to take in student performance data and provide a prediction of which applicants are more likely to succeed in industry. Specifically, the new career feature would: adds a new recruiter user type adds a new career tab on NodeBB, that leads to a new career page the new career page will allow students to submit relevant information about themselves for recruiters to see allow recruiters to see a list of students who have submitted their information, together with the prediction of their success in industry However, the engineer left shortly after and the project was abandoned. They have left an unfinished draft pull request on the repository, and you have been tasked with completing the project. Your manager wants you to: Assess the current architecture , and decide what would be the best way to incorporate the work done by the previous engineer Reason about, document and select an appropriate architecture for the project Finish integrating the feature made by the previous engineer based on your team's new design Along with architectural issues, as the feature will be evaluating student information, you are also concerned about the fairness of the model. You have been tasked with: Evaluating the pre-trained model's performance and fairness Writing a report on the evaluation of the model Provide a decision on whether the model should be used in production Deliverables and Deadlines \u00b6 There are two (2) deadlines for this project. This project is worth a total of 180 points. Checkpoint Deliverables \u2013 80 points - due Tuesday, April 4th, 11:59pm Architectural Design Document (60 pts) Jupyter Notebook Setup (20 pts) Final Deliverables \u2013 100 points - due Tuesday, April 11th, 11:59pm Feature Integration Implementation (60 pts) Evaluation Report (40 pts) Checkpoint Deliverables \u00b6 Architectural Design Document (60 points) \u00b6 To start off, your manager has requested a concrete design document on how you plan on integrating the new ML-based career feature into the existing codebase. One of your manager's requirements is that the career feature should work on a deployed site . You will later follow this design document in order to fully integrate this feature into NodeBB. Your team should start by evaluating what components of the feature have been implemented for you by the previous engineer as detailed in their draft pull request , then consider potential architectural solutions. It is highly recommended that at least one team member does a fresh clone and run the draft pull request locally to get a better understanding of the feature before proceeding. (Note: You can clone template repositories without forking them.) Some initial solutions to consider include: Rewriting the all aspects of the feature in Typescript and incorporating it into the monolith Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Implementation Efforts Keep in mind that your team will have to integrate the feature as part of the final deliverable . This should be a factor that affects your final decision on which architecture to pursue. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the career feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture and the current state of the new career feature (i.e. unintegrated with the rest of the codebase). Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider at least two different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Within your justification, you should explicitly include a timeline demonstrating how you plan on dividing development work within your team to ensure you finish implementation before the final deadline. . On Diagrams Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Drawing Diagrams Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF. Jupyter Notebook Setup (20 points) \u00b6 As the previous engineer left in a hurry, the model that was provided to you is pre-trained and you do not have any information on how it was trained. You are tasked with evaluating the model's performance and fairness. When it comes to training the model itself, the ML engineer who worked on the project before you had the following assumptions: The model is used to predict whether a student will be a good candidate for a software engineering job. It is a binary classifier, where 1 means the student is a good candidate, and 0 means the student is not a good candidate. The model is trained on a dataset of students who have graduated from CMU, and have been working in the industry for at least 1 year. In order to prevent bias, they assumed that removing Gender (M, F) and Student ID from the dataset would be sufficient when it comes to training the model. They claimed that it is now Group Unaware , thus the model would be fair. The model specification is as follows: X variable (input parameters) - Age (18 - 25) - Major (Computer Science, Information Systems, Business, Math, Electrical and Computer Engineering, Statistics and Machine Learning) - GPA (0 - 4.0) - Extra Curricular Activities (Student Theatre, Buggy, Teaching Assistant, Student Government, Society of Women Engineers, Women in CS, Volleyball, Sorority, Men's Basketball, American Football, Men's Golf, Fraternity) - Number of Programming Languages (1, 2, 3, 4, 5) - Number of Past Internships (0, 1, 2, 3, 4) Y variable (output) - Good Candidate (0, 1) The previous engineer has provided some examples on the usage of the model in the draft pull request . You are provided with a test dataset , which contains a similar set of features and output (whether the student is a good candidate or not). This test dataset is a different set of students from the training dataset, and the evaluation of whether the student is a good candidate is done by a fair panel of recruiters, so it can be considered to be unbiased. Additionally, the panel of recruiters have provided you with additional context on the extracurricular activities in comments (marked with #). Your test dataset is provided to you in the following format: X variable - Student ID - Gender (M, F) - Age (18 - 25) - Major (Computer Science, Information Systems, Business, Math, Electrical and Computer Engineering, Statistics and Machine Learning) - GPA (0 - 4.0) - Extra Curricular Activities (Student Theatre, Buggy, Teaching Assistant, Student Government, Society of Women Engineers, Women in CS, Volleyball, Sorority, Men's Basketball, American Football, Men's Golf, Fraternity) # Likely Co-Ed (Student Theatre, Buggy, Teaching Assistant, Student Government) # Likely Majority Female (Society of Women Engineers, Women in CS, Volleyball, Sorority) # Likely Majority Male (Men's Basketball, American Football, Men's Golf, Fraternity) - Number of Programming Languages (1, 2, 3, 4, 5) - Number of Past Internships (0, 1, 2, 3, 4) Y variable - Good Candidate (0, 1) Before doing a thorough evaluation of the fairness of the model, you will start by doing preliminary analysis on the test dataset , and run the model on the test dataset to get the accuracy of the model. To do so, you will need to set up a Jupyter notebook to do this, you can either: Use Google Colab to run the notebook in the cloud. (Recommended if you do not have experience with Jupyter notebooks) Alternatively, set up a JupyterLab on your local machine. Additionally, you can use VSCode to run the notebook as well. (Recommended if you are experienced) It is recommended that you use Python 3.9 or above when setting up the notebook. After you have set up the notebook, you should: Load the model and test dataset Plot the distribution of the test dataset across all features (except Student ID) using any visualization library of your choice (e.g. pandas, matplotlib, seaborn, plotly, etc.). You should choose the appropriate visualization for each feature. Predict the output of the test dataset using the model Report the accuracy of the model, and the confusion matrix Refer to the Resources & Documentation section if you need help with any of the above steps. By the checkpoint deadline, your team will commit the Jupyter notebook to your repository, and submit a link to the Jupyter notebook with the basic analysis and usage of the model done. Final Deliverables \u00b6 Feature Integration Implementation (60 points) \u00b6 Complete the integration of the ML-based candidate recommendation feature into your team repository for NodeBB. Your implementation should follow your selected design from your checkpoint design document. Revisiting the project context , the feature: adds a new recruiter user type adds a new career tab on NodeBB, that leads to a new career page the new career page will allow students to submit relevant information about themselves for recruiters to see allow recruiters to see a list of students who have submitted their information, together with the prediction of their success in industry You may freely use any and/or all of the development progress made available in the draft pull request in your implementation. In fact, if the draft pull request matches your proposed design, you are highly encouraged to directly integrate all code from the draft pull request as a starting point for your implementation. On Gradescope, you should: Submit a link to your deployed site that has the career features successfully integrated Answer the discussion questions regarding your implementation and any additional design decisions made by your team Partial Credit For partial credit, you may instead submit your repository with a locally working integration of the career feature. You should then answer the presented questions on Gradescope for how to get your feature working locally. A Note on CD While we encourage CD workflows, your deployment does not have to be automated for this assignment. In other words, it is acceptable to manually deploy your site without modifying your workflow from the previous project. Evaluation Report (40 points) \u00b6 Now you have to decide whether the model should be used in production. You will need to evaluate the performance and the fairness of the model. You should do all your work in the Jupyter notebook that you set up in the checkpoint deliverables. Performance Evaluation \u00b6 You should have already evaluated the performance of the model in the checkpoint deliverables. You should now do a more thorough evaluation of the model's performance. You should: Evaluate the model's performance on the test dataset, and report the accuracy and confusion matrix Fairness Evaluation \u00b6 When evaluating the fairness of the model, you should Revisit the assumptions made by the previous engineer Revisit the fairness discussion we had in class, and also in ML Discrimination Consider the fairness strategies and corresponding metrics that can be used to evaluate the fairness of the model Report \u00b6 After evaluating the performance and fairness of the model, you should now write a report on your findings. You will also need to provide a decision on whether the model should be used in production. Your report should include the following sections with clear headings: Introduction (< 0.5 page) Provide a brief introduction to the model that you are evaluating, and the test dataset that you are using, and the context of use of the model. Description of the test data (< 1 page) Provide descriptive statistics of the test dataset (e.g. mean, median, mode, standard deviation, etc.) for each feature, preferably in a table. You should also provide a brief discussion on the distribution of the features. Model Performance (< 0.5 page) Provide the accuracy and confusion matrix of the model on the test dataset and a brief discussion on the performance of the model. Feature Exploration (< 1 page) Identify features that you think are important when it comes to evaluating the fairness of the model, and explain why. Fairness Evaluation (~ 1.5 page) Consider three fairness strategies that were discussed in class and then: Provide the corresponding fairness metrics for the model (if applicable) based on the features you selected in step 4. Determine whether the model is fair under each fairness strategy, and provide a brief discussion on why. Determine which fairness strategy is the most appropriate for the model, given the context of what the model is used for. Provide a brief discussion on why. Recommendation (< 0.5 page) Make a recommendation on whether the model should be used in production, and provide a brief discussion on why. On Gradescope submit the following: A link to your Jupyter notebook that contains your code and analysis that is committed to your GitHub repository. A PDF of your report Grading \u00b6 To receive full credit for the checkpoint, we expect: A design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to a Jupyter notebook completing all of the setup steps outlined by the previous section To receive full credit for the final deadline, we expect: A link to your successfully deployed web application for your team repository which demonstrates the integration of the ML-based career feature A link to a Jupyter notebook containing all research/data gathered during your evaluation of the ML model An uploaded PDF report discussing the fairness of the model addressing all the sections outlined above Everyone in the team has contributed to a pull request to the team repository (Note: Either for the Jupyter notebook or the career feature integration) Resource & Documentation \u00b6 Design Documents \u00b6 The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation. Integration \u00b6 Making HTTP Requests FastAPI Deploying with Docker Model Analysis \u00b6 Jupyter Notebooks \u00b6 How to Use Jupyter Notebooks How to Use Jupyter Notebooks on Google Colab Pandas \u00b6 How to Use Pandas Reading CSV Files Dataframe Data Analysis \u00b6 Descriptive Statistics What is Accuracy of a Model? Accuracy What is a Confusion Matrix? Confusion Matrix Visualization \u00b6 Plotting with Pandas Matplotlib Seaborn Plotly","title":"Project 4: Software Architecture + ML Evaluation"},{"location":"projects/P4/#project-4-software-architecture-ml-evaluation","text":"","title":"Project 4: Software Architecture + ML Evaluation"},{"location":"projects/P4/#learning-goals","text":"Design a software architecture for software system that incorporates machine learning Decide the appropriate architecture for a given problem Assess and describe the tradeoffs of different architectures Integration of machine learning into a software system and reason about their implications Evaluate the performance and fairness of machine learning models Engage meaningfully with engineering ethics","title":"Learning Goals"},{"location":"projects/P4/#project-context","text":"As you and your team continue developing the new system, your CMU contact suddenly bursts into the room shouting, \u201cCareers! Hiring! Machine learning!\u201d Your manager follows closely behind and provides an explanation: a significant number of job recruiters have taken interest in your project and would like to use the platform as a means to reach out to students for career opportunities. However, the population of students is too large, and increasing annually. They are concerned by the sheer number of students to review for job applications, and recruiters want a simpler way to narrow the applicant pool. While your team had been working on deployment, your buzzword-enamored clients had hired another engineer to work on an extra ML-based feature to take in student performance data and provide a prediction of which applicants are more likely to succeed in industry. Specifically, the new career feature would: adds a new recruiter user type adds a new career tab on NodeBB, that leads to a new career page the new career page will allow students to submit relevant information about themselves for recruiters to see allow recruiters to see a list of students who have submitted their information, together with the prediction of their success in industry However, the engineer left shortly after and the project was abandoned. They have left an unfinished draft pull request on the repository, and you have been tasked with completing the project. Your manager wants you to: Assess the current architecture , and decide what would be the best way to incorporate the work done by the previous engineer Reason about, document and select an appropriate architecture for the project Finish integrating the feature made by the previous engineer based on your team's new design Along with architectural issues, as the feature will be evaluating student information, you are also concerned about the fairness of the model. You have been tasked with: Evaluating the pre-trained model's performance and fairness Writing a report on the evaluation of the model Provide a decision on whether the model should be used in production","title":"Project Context"},{"location":"projects/P4/#deliverables-and-deadlines","text":"There are two (2) deadlines for this project. This project is worth a total of 180 points. Checkpoint Deliverables \u2013 80 points - due Tuesday, April 4th, 11:59pm Architectural Design Document (60 pts) Jupyter Notebook Setup (20 pts) Final Deliverables \u2013 100 points - due Tuesday, April 11th, 11:59pm Feature Integration Implementation (60 pts) Evaluation Report (40 pts)","title":"Deliverables and Deadlines"},{"location":"projects/P4/#checkpoint-deliverables","text":"","title":"Checkpoint Deliverables"},{"location":"projects/P4/#architectural-design-document-60-points","text":"To start off, your manager has requested a concrete design document on how you plan on integrating the new ML-based career feature into the existing codebase. One of your manager's requirements is that the career feature should work on a deployed site . You will later follow this design document in order to fully integrate this feature into NodeBB. Your team should start by evaluating what components of the feature have been implemented for you by the previous engineer as detailed in their draft pull request , then consider potential architectural solutions. It is highly recommended that at least one team member does a fresh clone and run the draft pull request locally to get a better understanding of the feature before proceeding. (Note: You can clone template repositories without forking them.) Some initial solutions to consider include: Rewriting the all aspects of the feature in Typescript and incorporating it into the monolith Implementing a Python-based microservice and deploying it as a separate service; then, integrating the service with your existing monolith via a REST API Refactoring part or all of the existing monolith into a microservices-based architecture Implementation Efforts Keep in mind that your team will have to integrate the feature as part of the final deliverable . This should be a factor that affects your final decision on which architecture to pursue. Once you have finished evaluating the codebase, create the design document highlighting your findings and decisions. Below is a sample outline for your design document along with recommended page lengths. Feature Overview (<1 pages) Describe concisely how the career feature works and how it will be used by the relevant stakeholders, with screenshots if necessary. Current Architecture (<1 page) Provide a brief description of the current NodeBB architecture and the current state of the new career feature (i.e. unintegrated with the rest of the codebase). Include an architectural diagram to support your description. Quality Requirements (<1 page) Provide a concise, prioritized list of the overall quality requirements you considered in arguing for the integration of the feature into the system and a short justification for each. Your team should decide on at least three requirements to focus on. Rank your requirements in decreasing order of importance. This allows readers to quickly understand what you were designing for. Potential Solutions (~1 page each) Your team should consider at least two different potential solutions for integrating the new feature. For each, provide at least one architectural diagram, a brief description of the solution's architectural design, and a discussion of the design's tradeoffs. Tradeoffs must involve (but are not limited to) the quality attributes described in the previous section. Justify such arguments with reference to appropriate diagrams and concrete examples, as appropriate. Selected Architecture + Justification (<1 page) Describe which design your team decided to proceed with in architecturally integrating the feature into existing codebase. Justify your design decisions, including why your design is adequate for the quality attributes important to this system, and what assumptions you made in your design (if any). Within your justification, you should explicitly include a timeline demonstrating how you plan on dividing development work within your team to ensure you finish implementation before the final deadline. . On Diagrams Diagrams should involve suitable architectural views ; must include a legend ; and should involve appropriate levels of abstraction for the components in the diagram. If necessary, use color/shape/text to differentiate between types of components and connectors. You may find it appropriate to merge more than one view into a single diagram. If you do this, you must be explicit about what views you are merging , and why. Otherwise, diagrams should clearly represent legitimate architectural views. Make sure that multiple views of the architecture are consistent with each other and the links are clear; if necessary provide a mapping in additional text. Drawing Diagrams Drawing diagrams is much easier with the right software. Consider tools like draw.io (free, online, and collaborative), Dia , OmniGraffle , MS Visio , or even just the drawing editor of Google Docs . Google Slides will also likely work for this purpose. Pictures of whiteboard drawings are also acceptable, if clearly readable. More resources to assist you with creating your design document can be found in the Resources & Documentation section below. By the checkpoint deadline, your team will submit your design document to Gradescope as a PDF.","title":"Architectural Design Document (60 points)"},{"location":"projects/P4/#jupyter-notebook-setup-20-points","text":"As the previous engineer left in a hurry, the model that was provided to you is pre-trained and you do not have any information on how it was trained. You are tasked with evaluating the model's performance and fairness. When it comes to training the model itself, the ML engineer who worked on the project before you had the following assumptions: The model is used to predict whether a student will be a good candidate for a software engineering job. It is a binary classifier, where 1 means the student is a good candidate, and 0 means the student is not a good candidate. The model is trained on a dataset of students who have graduated from CMU, and have been working in the industry for at least 1 year. In order to prevent bias, they assumed that removing Gender (M, F) and Student ID from the dataset would be sufficient when it comes to training the model. They claimed that it is now Group Unaware , thus the model would be fair. The model specification is as follows: X variable (input parameters) - Age (18 - 25) - Major (Computer Science, Information Systems, Business, Math, Electrical and Computer Engineering, Statistics and Machine Learning) - GPA (0 - 4.0) - Extra Curricular Activities (Student Theatre, Buggy, Teaching Assistant, Student Government, Society of Women Engineers, Women in CS, Volleyball, Sorority, Men's Basketball, American Football, Men's Golf, Fraternity) - Number of Programming Languages (1, 2, 3, 4, 5) - Number of Past Internships (0, 1, 2, 3, 4) Y variable (output) - Good Candidate (0, 1) The previous engineer has provided some examples on the usage of the model in the draft pull request . You are provided with a test dataset , which contains a similar set of features and output (whether the student is a good candidate or not). This test dataset is a different set of students from the training dataset, and the evaluation of whether the student is a good candidate is done by a fair panel of recruiters, so it can be considered to be unbiased. Additionally, the panel of recruiters have provided you with additional context on the extracurricular activities in comments (marked with #). Your test dataset is provided to you in the following format: X variable - Student ID - Gender (M, F) - Age (18 - 25) - Major (Computer Science, Information Systems, Business, Math, Electrical and Computer Engineering, Statistics and Machine Learning) - GPA (0 - 4.0) - Extra Curricular Activities (Student Theatre, Buggy, Teaching Assistant, Student Government, Society of Women Engineers, Women in CS, Volleyball, Sorority, Men's Basketball, American Football, Men's Golf, Fraternity) # Likely Co-Ed (Student Theatre, Buggy, Teaching Assistant, Student Government) # Likely Majority Female (Society of Women Engineers, Women in CS, Volleyball, Sorority) # Likely Majority Male (Men's Basketball, American Football, Men's Golf, Fraternity) - Number of Programming Languages (1, 2, 3, 4, 5) - Number of Past Internships (0, 1, 2, 3, 4) Y variable - Good Candidate (0, 1) Before doing a thorough evaluation of the fairness of the model, you will start by doing preliminary analysis on the test dataset , and run the model on the test dataset to get the accuracy of the model. To do so, you will need to set up a Jupyter notebook to do this, you can either: Use Google Colab to run the notebook in the cloud. (Recommended if you do not have experience with Jupyter notebooks) Alternatively, set up a JupyterLab on your local machine. Additionally, you can use VSCode to run the notebook as well. (Recommended if you are experienced) It is recommended that you use Python 3.9 or above when setting up the notebook. After you have set up the notebook, you should: Load the model and test dataset Plot the distribution of the test dataset across all features (except Student ID) using any visualization library of your choice (e.g. pandas, matplotlib, seaborn, plotly, etc.). You should choose the appropriate visualization for each feature. Predict the output of the test dataset using the model Report the accuracy of the model, and the confusion matrix Refer to the Resources & Documentation section if you need help with any of the above steps. By the checkpoint deadline, your team will commit the Jupyter notebook to your repository, and submit a link to the Jupyter notebook with the basic analysis and usage of the model done.","title":"Jupyter Notebook Setup (20 points)"},{"location":"projects/P4/#final-deliverables","text":"","title":"Final Deliverables"},{"location":"projects/P4/#feature-integration-implementation-60-points","text":"Complete the integration of the ML-based candidate recommendation feature into your team repository for NodeBB. Your implementation should follow your selected design from your checkpoint design document. Revisiting the project context , the feature: adds a new recruiter user type adds a new career tab on NodeBB, that leads to a new career page the new career page will allow students to submit relevant information about themselves for recruiters to see allow recruiters to see a list of students who have submitted their information, together with the prediction of their success in industry You may freely use any and/or all of the development progress made available in the draft pull request in your implementation. In fact, if the draft pull request matches your proposed design, you are highly encouraged to directly integrate all code from the draft pull request as a starting point for your implementation. On Gradescope, you should: Submit a link to your deployed site that has the career features successfully integrated Answer the discussion questions regarding your implementation and any additional design decisions made by your team Partial Credit For partial credit, you may instead submit your repository with a locally working integration of the career feature. You should then answer the presented questions on Gradescope for how to get your feature working locally. A Note on CD While we encourage CD workflows, your deployment does not have to be automated for this assignment. In other words, it is acceptable to manually deploy your site without modifying your workflow from the previous project.","title":"Feature Integration Implementation (60 points)"},{"location":"projects/P4/#evaluation-report-40-points","text":"Now you have to decide whether the model should be used in production. You will need to evaluate the performance and the fairness of the model. You should do all your work in the Jupyter notebook that you set up in the checkpoint deliverables.","title":"Evaluation Report (40 points)"},{"location":"projects/P4/#grading","text":"To receive full credit for the checkpoint, we expect: A design document outlining your research into the existing codebase architecture, the quality requirements considered by your team, alternative solutions, and a final justification & timeline for your selected integration plan A link to a Jupyter notebook completing all of the setup steps outlined by the previous section To receive full credit for the final deadline, we expect: A link to your successfully deployed web application for your team repository which demonstrates the integration of the ML-based career feature A link to a Jupyter notebook containing all research/data gathered during your evaluation of the ML model An uploaded PDF report discussing the fairness of the model addressing all the sections outlined above Everyone in the team has contributed to a pull request to the team repository (Note: Either for the Jupyter notebook or the career feature integration)","title":"Grading"},{"location":"projects/P4/#resource-documentation","text":"","title":"Resource &amp; Documentation"},{"location":"projects/P4/#design-documents","text":"The design document task is easy to underestimate both in terms of time needed and in terms of difficulty designing meaningful and useful descriptions. While it is easy to create a superficial solution, a good solution will likely require significant thinking, discussion, and iteration. Feel free to seek feedback from the course staff on your solution before submission! We recommend that you appoint someone in your team to track the accuracy and completeness of architectural representations throughout this assignment. Do not just divide up the views among your team members and assume they show everything needed. You only need to submit the final designs/documents, not intermediate steps on the process of getting there. There are a few additional reference materials available in the CMU library that your team may want to consult. We do not recommend reading through all of it; instead, skip around to sections that are relevant to you. Software Architecture in Practice, Third Edition : You may wish to review appropriate sections within Part Two to help find appropriate tactics, techniques you can use in your design to promote particular quality attributes. Documenting Software Architectures: Views and Beyond, Second Edition : useful book to generally reference for creating architecture documentation.","title":"Design Documents"},{"location":"projects/P4/#integration","text":"Making HTTP Requests FastAPI Deploying with Docker","title":"Integration"},{"location":"projects/P4/#model-analysis","text":"","title":"Model Analysis"},{"location":"projects/P5/","text":"Project 5: Open Source Excursion \u00b6 Learning Goals \u00b6 Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development Project Description \u00b6 Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience. Deliverables and Deadlines \u00b6 This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 320 points (~18% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Monday, April 17th, 11:59pm Check-In Presentation (80 pts) - Held in Recitation on Monday, April 17th B) Project Final Report & Presentations \u2013 220 points \u2013 due Sunday, May 7th, 11:59pm Project Report (120 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, May 8th, 5-8:30pm C) Individual Reflections \u2013 20 points \u2013 due Monday, May 8th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Project 5: Open Source Excursion"},{"location":"projects/P5/#project-5-open-source-excursion","text":"","title":"Project 5: Open Source Excursion"},{"location":"projects/P5/#learning-goals","text":"Holistically apply software engineering methods in the context of a real-world problem, including process, requirements, architecture, measurement, and quality assurance Gain broad and deep exposure to the culture and practices of open-source communities Understand commonly used infrastructure used in open-source, and how to choose infrastructure when starting a new open-source project Engage with an open-source community Identify process issues and suggest improvements in real-world projects, including communication, collaboration, tooling, quality assurance, formal and informal rules and policies Coordinate within a team and adopt practices for efficient teams Understand a project\u2019s architecture and design and make a decision about the feasibility of a proposed task Divide and schedule work within a project Discuss how agile practices affect development Discuss business concerns and business models of software development","title":"Learning Goals"},{"location":"projects/P5/#project-description","text":"Your high-level goal is to produce and submit a non-trivial modification or extension to an open-source project in a way that maximizes the chances that the project maintainers accept it. If you demonstrate to us that your change has been accepted and integrated into the project\u2019s code base, you will get 20 bonus points . Your team will select an open source project, select a change to implement, actually contribute to the project, and present your insights to the class. You will individually reflect on your teamwork and open source experience.","title":"Project Description"},{"location":"projects/P5/#deliverables-and-deadlines","text":"This will is your final project with your group. There are 3 deadlines for this project. The project is worth a total of 320 points (~18% of your final grade). A) Project & Task Selection \u2013 80 points \u2013 due Monday, April 17th, 11:59pm Check-In Presentation (80 pts) - Held in Recitation on Monday, April 17th B) Project Final Report & Presentations \u2013 220 points \u2013 due Sunday, May 7th, 11:59pm Project Report (120 pts) Extra Credit (20 pts) Project Presentation (100 points) - Held during exam timeslot on Monday, May 8th, 5-8:30pm C) Individual Reflections \u2013 20 points \u2013 due Monday, May 8th, 11:59pm Reflections & Peer Review (20 pts) Tip This is a large assignment spanning from now until your final exam timeslot. We estimate that this project will take each student on the team on average 8 hours/week over the next 5 weeks, for a total of 40 hours. We highly recommend reading through the entire assignment before starting so you are aware of our expectations for the later deliverables. To manage all of the write-ups, we recommend saving the pages as a PDF to print or annotate on as you work through the assignment with your team. Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of P5 will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. If severe teamwork issues arise please contact the course staff.","title":"Deliverables and Deadlines"},{"location":"projects/P5/1_projectcheck/","text":"Project 5A: Project and Task Selection \u00b6 Deliverables \u00b6 Project & Task Selection \u2013 80 points \u2013 due Monday, April 17th, 11:59pm Check-In Presentation Slides \u2013 due Monday, April 17th, 11:59pm Presentation Date \u2013 Monday, April 17th, during your recitation time Open Source Project Selection \u00b6 You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet . Task Selection \u00b6 For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff. Task Planning \u00b6 Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the check-in presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule. Check-In Presentation (80 pts) \u00b6 The recitation after Spring Carnival will be dedicated to an in-person group presentation about your project and task selection. Presentations are 7 minutes long, with 3 minutes of feedback and Q&A The order of presentations will be randomly determined Participation from all team members during the presentation is required Presentation Attendance For full credit, you would have to be on time for the presentation session (within 5 minutes of recitation start time). If you are unable to attend in-person, you must Send a Slack message to your TA with justifications at least 24 hours before the start of your recitation , else you will receive no credit for this part of the assignment, and Pre-record your segment of the presentation, which your teammate will play during the presentation Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute check-in presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope . You will be presenting this in the recitation after Spring Carnival.","title":"5A Project and Task Selection"},{"location":"projects/P5/1_projectcheck/#project-5a-project-and-task-selection","text":"","title":"Project 5A: Project and Task Selection"},{"location":"projects/P5/1_projectcheck/#deliverables","text":"Project & Task Selection \u2013 80 points \u2013 due Monday, April 17th, 11:59pm Check-In Presentation Slides \u2013 due Monday, April 17th, 11:59pm Presentation Date \u2013 Monday, April 17th, during your recitation time","title":"Deliverables"},{"location":"projects/P5/1_projectcheck/#open-source-project-selection","text":"You may select any active open source project in any language, as long as it's not already being selected on by another team. You can find a list of open source projects selected by other teams on the Public Project Selection Spreadsheet . Here are some helpful resources for finding open source projects: Trending on Github Software Quality Awards Issues that are labeled \u201cup-for-grabs\u201d goodfirstissue.dev A list of beginner friendly projects Apache projects Mozilla projects You may want to consider any open-source projects you have used before, or are interested in using in the future! The open source project you pick should be active and have multiple contributors . Generally you want to pick projects that are quick at reviewing and accepting PRs from external contributors for a better chance of getting your bonus. Previous students have lamented choosing dead or maintenance projects without sufficient community support. Do not make this mistake. If you have questions on if we would consider a project active, contact the course staff. Once you have selected a project, add it to the Public Project Selection Spreadsheet .","title":"Open Source Project Selection"},{"location":"projects/P5/1_projectcheck/#task-selection","text":"For the rest of this assignment, we will refer to bug fixes and feature extensions as tasks. You are free to chose any task(s) to complete for this assignment, as long as they: Are taken from a bug report or feature request in a public database or message board. Do not invent a task. Address a documented project need. Make changes to the project\u2019s source code. Pure documentation or design tasks are not appropriate Benefit from teamwork and are appropriate for your team size (i.e. do not select one small independent task per team member). You may choose one large task or several smaller, related tasks. The tasks should be scoped such that each team member spends one week of development effort We expect students to actively communicate with the project owners the task you are trying to do via the owners' preferred methods of communication (GitHub comments, Discord server, etc) and follow the repository's issue assignment process(es). This will also ensure that they are more likely to accept your pull request(s) in the future. If you have questions on these criteria, contact the course staff.","title":"Task Selection"},{"location":"projects/P5/1_projectcheck/#task-planning","text":"Once you have selected a project and task(s), break them down into subtasks, consider their priority and assign them to each team member. Identify a set of tasks as your core goal for this project, and another set of tasks as stretch goals. You are expected to achieve your core goal for this project , and stretch goals as much as possible. We will work with you to adjust your goals during the check-in presentation to ensure that they are appropriate your team size and timeframe. As per previous project, plan before you start coding . You should identify risks and requirements, and develop a collaboration plan and schedule.","title":"Task Planning"},{"location":"projects/P5/1_projectcheck/#check-in-presentation-80-pts","text":"The recitation after Spring Carnival will be dedicated to an in-person group presentation about your project and task selection. Presentations are 7 minutes long, with 3 minutes of feedback and Q&A The order of presentations will be randomly determined Participation from all team members during the presentation is required Presentation Attendance For full credit, you would have to be on time for the presentation session (within 5 minutes of recitation start time). If you are unable to attend in-person, you must Send a Slack message to your TA with justifications at least 24 hours before the start of your recitation , else you will receive no credit for this part of the assignment, and Pre-record your segment of the presentation, which your teammate will play during the presentation Your group presentation will serve as a check-in to determine if the open source project and task(s) chosen were reasonable Your 7-minute check-in presentation should include (the recommended slides amount is in parenthesis): Overview and Justification (~1 slide) An overview on the project you selected, summarizing the relevant characteristics you considered when making your selection. Beyond whatever additional information you collect in your research, include at least a name, a website link, and a brief description of the project (what it does, who uses it, etc). Successful Build (~1 slide) Evidence that you can build and run the software (e.g., a screenshot or text output from a successful build, a screenshot of the running program). Getting an open-source project to build/run can be a huge effort, and we want to mitigate this risk. Task(s) Description (~2-3 slides) A brief textual description of your proposed change(s). In addition to your core task(s), you may choose to include a stretch task, depending on how difficult the changes end up being, you may not need to implement it. Note that if your actual changes deviate from the plan, we expect a short explanation with the final submission. A justification as to why the task(s) benefit(s) from teamwork and are appropriate for your team size. Task Requests(s) (~1 slide) Evidence that the task(s) is/are requested by the community (links suffices). Evidence of communication with the project owners (e.g., a link to a discussion thread, a screenshot of a chat, etc). Subtasks & Assignments (~1 slide) A table to summarize for each subtask: A description of each subtask The priorities & justification of priorities of the subtasks (and if it's part of core goals or stretch goals) An initial assignment of subtasks to team members. Schedule (~1 slide) A table to summarize the schedule for each team member, including: The start and end date of each subtask The number of hours each team member will spend on each subtask The number of hours each team member will spend on the project in total Risk & Mitigation Strategies (~1 slide) A list of at least two relevant risks when it comes to working on the tasks in your selected open source project and corresponding mitigation strategies. We expect you to identify risks that are specific to your project and team. For example, if you are working on a project that is written in a language that none of your team members have used before, you should identify this as a risk and discuss how you will mitigate it. We will not accept risks that are generic to all open source projects (e.g., \"the project may be abandoned\"), or risks that are generic to all software development projects (e.g., \"the project may have bugs\"). Submit the presentation deck listed above as a single PDF file per team to Gradescope . You will be presenting this in the recitation after Spring Carnival.","title":"Check-In Presentation (80 pts)"},{"location":"projects/P5/2_projectfinal/","text":"Project 5B & C: Project Presentations, Final Report, and Reflections \u00b6 Deliverables \u00b6 Project Report and Presentation \u2013 due Sunday, May 7th, 11:59pm Project Report (120 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, May 8th, 5.00pm - 8:30pm, during exam timeslot Reflection \u2013 due Monday, May 8th, 11:59pm Reflections & Peer Review (20 pts) Contributing to Open Source \u00b6 You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (6%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff. Report, Presentation and Reflection \u00b6 You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class. Project Presentations (100 pts) \u00b6 The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 7 minutes long, with 3 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. Project Processes and Communication (~2 slides) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Your Experiences (~2 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the two or three most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Sunday, May 7th at 11:59pm . Project Report (120 pts) \u00b6 After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link via Slack to Michael Hilton by 10th May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope . Individual Reflection & Peer Evaluations (20 pts) \u00b6 Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"5B Project Presentations, Final Report, and Reflections"},{"location":"projects/P5/2_projectfinal/#project-5b-c-project-presentations-final-report-and-reflections","text":"","title":"Project 5B &amp; C: Project Presentations, Final Report, and Reflections"},{"location":"projects/P5/2_projectfinal/#deliverables","text":"Project Report and Presentation \u2013 due Sunday, May 7th, 11:59pm Project Report (120 pts) Extra Credit (20 pts) Project Presentation Slides (100 points, graded based on presentation) Presentation Date \u2013 Monday, May 8th, 5.00pm - 8:30pm, during exam timeslot Reflection \u2013 due Monday, May 8th, 11:59pm Reflections & Peer Review (20 pts)","title":"Deliverables"},{"location":"projects/P5/2_projectfinal/#contributing-to-open-source","text":"You should perform adequate quality assurance activities when writing code. Take further steps to understand the project\u2019s code You might find it useful to engage in intra-team discussions using static or dynamic diagrams. You might also find it useful to elicit feedback on your ideas by communicating with members of the open-source community. Submit your changes to the project Create any necessary documentation to enable acceptance of your code. Common contribution mechanisms include pull requests, emails to a project lead, or discussion board posts. You may also need to update the bug database. The project owners will review and evaluate your pull request, and you might need more work to get it approved. You are required to submit your work to the open-source project BONUS: Get your changes accepted You will get a bonus 20 (6%) bonus points upon acceptance. If your code is accepted after the homework deadline but before final grades are released, inform the course staff.","title":"Contributing to Open Source"},{"location":"projects/P5/2_projectfinal/#report-presentation-and-reflection","text":"You will report on your project and task selection, work, and experience in several ways (see below). This will include a group presentation to the class.","title":"Report, Presentation and Reflection"},{"location":"projects/P5/2_projectfinal/#project-presentations-100-pts","text":"The Final Exam time is dedicated to group presentations (in-person) about your open source contributions. Presentations are 7 minutes long, with 3 minutes Q&A . The order of presentations is randomly determined. Participation from all team members during the presentation is required . Every individual will be asked to provide constructive feedback for other presentations in class via an paper form (which we will provide day-of). Presentation Attendance For full credit, you would have to be on time for the presentation session (within 10 minutes of start time). If you are unable to attend in-person, you have to send an email with justification to all instructors and cc your recitation TAs at least a week before your final exam timeslot so that appropriate arrangements can be made. Exceptions to notification deadline will only be made for unforseeable circumstances. The goal of the presentation is primarily to share with the class the project to which you contributed, and your experiences. Your presentation should cover the following topics (the recommended slides amount is in parenthesis): High-level Project Overview (~1 slide) Describe the project in terms of its high-level goals and the context in which it operates. This may include a brief history and the business context. E.g. it may be interesting to note that a project was spawned from a closed-source operation, or that it competes primarily with a closed-source counterpart. Brief Task Description(s) (~2 slides) Brief description of the task(s) you performed, such that the audience has sufficient context to understand your explanation of your experiences. A table that briefly summarizes the contribution(s) each team member made towards completing the task(s). We do not expect you to include, for example, any code or diagrams from your report , unless they\u2019re helpful for supporting a point about your interactions with the project. Include a demo of your contribution(s), if applicable. Please do a screen recording of your demo instead of a live demo. Project Processes and Communication (~2 slides) Describe the processes and tools the project uses to coordinate among contributors. For example: Are these processes formal or informal? Provide an explicit description (possibly with a diagram) of the acceptance process used for efforts like the task you completed. If applicable, include standards or expectations regarding software engineering activities including requirements, architecture, and quality assurance; alternatively mention that no such standards exist. Your Experiences (~2 slides) Summarize your experiences (and what you learned!) interacting with this community of open source developers, focusing on any surprising or unusual aspects of the process or interaction. For example Did you run into any trouble understanding, changing, or contributing to a large, pre-existing project? Were there unanticipated challenges in either implementing your change, or in getting the change submitted to and accepted by the project maintainers? Did the project collaboration process or culture help or hinder your effort in any way? Characterize any interaction you had with the team leadership and community, highlighting especially any useful/useless input you received. You may (but are not required to) also relate the experience from this homework assignment with relevant experience from internships or other projects. Your summary of your experiences can be at whatever level of detail you think is interesting or informative. Given the time limit, selecting and highlighting the two or three most important or interesting observations is likely more useful than trying to be complete. You must upload your slides as a single PDF document to Gradescope by Sunday, May 7th at 11:59pm .","title":"Project Presentations (100 pts)"},{"location":"projects/P5/2_projectfinal/#project-report-120-pts","text":"After completing and submitting the modification, write a report about the tasks you have performed. Your report should include: Selected Project (1 paragraph) A brief description of the open source system to which you contributed. You may reuse text from Part A. Project Context and Business Model (<0.5 page) An analysis of the open-source project\u2019s context and business model. This may include a short history of the project, competing open- and closed-source projects, or a discussion of the developers\u2019 motivations to build this system. Essentially, we want to know why this project exists and why it is important. Task Description (per task) (<0.5 page) A description of the tasks you have implemented and a high-level description of how you implemented them. Submitted Artifacts (per task) Evidence of the code, documentation, or other artifacts you produced for the task, and evidence that you submitted them to the project. This would likely be links to publicly available resources (repository, email, pull request, etc). QA Strategy (<1 page) Describe which QA activities you performed and justify why you selected these QA activities over others. Describe metrics if appropriate. The justification will likely refer to relevant requirements as well as to the project\u2019s practices. QA Evidence Evidence of your quality assurance activities described above. For example, provide source code or links to source code of tests, provide test protocols, comments or protocols from code reviews, reports from static analysis tools, links to or screenshots from a continuous integration platform, and so forth. Plan Updates (<1 page) A description and justification of deviations between your initial plans and your performed activities (as in Homework 2). Changes are expected, but they should be tracked and explained. Describe changes in scope (e.g., fewer tasks) and in the schedule and work allocation. Provide an updated schedule and note differences. Explain the causes of the changes, such as unanticipated risks. Extra Credit Evidence that your changes have been accepted into the code base of the open source project in forms of links or screenshots. Note: You can also send the merged PR link via Slack to Michael Hilton by 10th May 1pm to claim this bonus as well Page limits are provided for guidance; we will not enforce them. Collect all parts in a single PDF document with clear subsections and the names of all team members and submit that file to Gradescope .","title":"Project Report (120 pts)"},{"location":"projects/P5/2_projectfinal/#individual-reflection-peer-evaluations-20-pts","text":"Contributions We want to ensure that everyone is participating fully in the final project. For this project, we will be assessing participation in a variety of ways, including: artifact evaluation, self & peer evaluation. Credit due for the team components of this project will be awarded based on evidence of full participation in the team. Partial participation will receive partial credit. Your individual reflection should include: Self Evaluation Describe the work you have done in this project (e.g. code artifacts, documentation) as well as efforts towards helping your team towards completing this project (e.g. research, organizing meetings, running meetings). Peer Evaluations Describe the specific work each of your team members have contributed towards this project. Describe both tangible (e.g. code artifacts, report & slides making, documentation) and intangible (e.g. organizing & running meetings, communicating expectations) contributions. Do point out teammates that you think are exceptional to work with in this project as well. Teamwork You have been in the same team over the course of this semester (Projects 2-5). Look back on the entire semester and reflect on your team experiences. The following questions may guide you: What has worked, what hasn\u2019t? If you could start 313 or another course over with the same team, what would you change? What have you learned about teamwork and your role in teamwork? (Optional) Do you have any feedback on what we can do next year to help students work more effectively in teams? Bear in mind that the instructor-assigned heterogeneous teams of 3-5 students is non-negotiable. We anticipate problems as part of the learning experience, but would like to avoid unduly frustrating situations. A good reflection document will include concrete statements about lessons learned, with clear supporting evidence, such as examples, to support them. Submit your reflection on Gradescope .","title":"Individual Reflection &amp; Peer Evaluations (20 pts)"},{"location":"recitations/","text":"Coming soon!","title":"Index"},{"location":"recitations/reci1-github/","text":"Recitation 1: Using Git & Github for Collaborative Development \u00b6 Overview \u00b6 After this recitation, the students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects. Prerequisites \u00b6 You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people. Activity 1a: Forking a repo and adding a collaborator \u00b6 Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine Activity 1b: Run a GitHub Action Workflow \u00b6 On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product Activity 2: Setting up Kanban board and creating issues \u00b6 Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! On GitHub, under the Project tab, have one person create a new project with the \"Board\" template. Make sure to set the project to public and invite your partner as a collaborator Go back to the Project tab on the repository page and add the project board Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person Add the two issues to the project Kanban board under the Todo column Activity 3: Branching, committing, and pushing \u00b6 In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Push the branch to remote git push --set-upstream origin <your-branch-name> Activity 4: Writing pull requests \u00b6 On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that the file you translated passes the eslint check and that the correctness tests still pass Assign the issue you created to the pull request Request your partner for a code review Activity 5a: Doing code reviews and resolving merge conflicts \u00b6 Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column Activity 5b: Check GitHub actions \u00b6 Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Recitation 1 - Git & GitHub"},{"location":"recitations/reci1-github/#recitation-1-using-git-github-for-collaborative-development","text":"","title":"Recitation 1: Using Git &amp; Github for Collaborative Development"},{"location":"recitations/reci1-github/#overview","text":"After this recitation, the students should be able to use Git and GitHub for their teamwork in this course and other projects. Students should know about the GitFlow workflow and how to collaborate with other developers in their projects.","title":"Overview"},{"location":"recitations/reci1-github/#prerequisites","text":"You have a GitHub account You have Git installed You have TypeScript installed You know Git Basics You will be doing the activities as pairs, so be sure to find a partner! Unless specified, each step is to be done by both people.","title":"Prerequisites"},{"location":"recitations/reci1-github/#activity-1a-forking-a-repo-and-adding-a-collaborator","text":"Have either you or your partner fork this repository , then add the other person as a collaborator on GitHub. You can do so by clicking on Settings , then Collaborators Under the General tab in Settings , check the \"Issues\" checkbox in the \"Features\" section to enable the issues pane for your repository Clone the repository onto your local machine","title":"Activity 1a: Forking a repo and adding a collaborator"},{"location":"recitations/reci1-github/#activity-1b-run-a-github-action-workflow","text":"On Github, click the Actions tab, enable the workflows and select the \u201cLint and Test\u201d workflow Click on the \"Run workflow\" dropdown, then the \"Run workflow\" button (leave Branch to be main ). This runs the GitHub workflow that runs the linter and tests on the project Our GH actions pipeline suggests that the main branch is broken! Let\u2019s walk through the process to fix these errors. Merging to main In practice, you should not merge a branch into the main branch that could cause main to fail. This way, we can ensure that all the code on main is our most recent working product","title":"Activity 1b: Run a GitHub Action Workflow"},{"location":"recitations/reci1-github/#activity-2-setting-up-kanban-board-and-creating-issues","text":"Click through the build output and take a look at why eslint is failing. Take note of the names of each file - you should use these when naming your issues! On GitHub, under the Project tab, have one person create a new project with the \"Board\" template. Make sure to set the project to public and invite your partner as a collaborator Go back to the Project tab on the repository page and add the project board Under the Issues tab, have the other person create an issue for for correctly translating each typescript file that fails the eslint workflow Assign yourselves to both issues, one for each person Add the two issues to the project Kanban board under the Todo column","title":"Activity 2: Setting up Kanban board and creating issues"},{"location":"recitations/reci1-github/#activity-3-branching-committing-and-pushing","text":"In your local machine, create a new branch with a relevant name to the issue you are addressing (e.g. \"fix-header-sizing-issue\" , \"fix-multiple-dialog-bug\" , \"add-sorting-feature\" ) Fix the issue that you were assigned to, then add and commit the changes Commits should start with a verb, and what it does to the codebase (e.g. \"Remove faulty condition from getCustomerDetails\" , \"Fix failing CompositeTestCase\" , \"Fix issue #21\" ) Push the branch to remote git push --set-upstream origin <your-branch-name>","title":"Activity 3: Branching, committing, and pushing"},{"location":"recitations/reci1-github/#activity-4-writing-pull-requests","text":"On GitHub, create a pull request to merge the changes from the branch you have just pushed to the main branch Make sure it is to the main of your own forked repository! By default, Github selects the original repository instead of your own forked repository. Name your pull request appropriately In the description, describe what changes has been made to address the issue, and how has the changes been tested Notice that the GitHub action workflow runs automatically when you create the pull request! You should check that the file you translated passes the eslint check and that the correctness tests still pass Assign the issue you created to the pull request Request your partner for a code review","title":"Activity 4: Writing pull requests"},{"location":"recitations/reci1-github/#activity-5a-doing-code-reviews-and-resolving-merge-conflicts","text":"Review your partner\u2019s code (use the review change button). Approve changes if it looks good Once your PR has been reviewed, merge your changes! Resolve any merge conflicts that arises accordingly Return to the Kanban board. If everything was set up correctly, the issue should automatically move into the Done column","title":"Activity 5a: Doing code reviews and resolving merge conflicts"},{"location":"recitations/reci1-github/#activity-5b-check-github-actions","text":"Click on the Actions tab. If you have resolved all the issues correctly, the tests and linter should now pass, and a green check should show Remember to do Recitation Quiz 1 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 5b: Check GitHub actions"},{"location":"recitations/reci10-open-source/","text":"Recitation 10: Open Source Projects \u00b6 Overview \u00b6 This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5. Context \u00b6 Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license Scavenger Hunt (30 min) \u00b6 Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5. Reflection (10 min) \u00b6 With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5. Public Project Selection \u00b6 Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet . Resources \u00b6 A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Recitation 10 - Open Source Projects"},{"location":"recitations/reci10-open-source/#recitation-10-open-source-projects","text":"","title":"Recitation 10: Open Source Projects"},{"location":"recitations/reci10-open-source/#overview","text":"This recitation will give you the opportunity to familiarize yourself with various open source projects and help your team with finding a project to work on for Project 5.","title":"Overview"},{"location":"recitations/reci10-open-source/#context","text":"Open source software refers to software where the code is openly available, allowing contributors to freely run, modify, contribute, and redistribute the code. These projects provide a great learning experience of working with large codebases to beginner programmers, and give you the opportunity to contribute to software that\u2019s used by a large number of community members. The general criteria for an open source project: - Repository must be public & open to outside contributors - Repository must have an open source license","title":"Context"},{"location":"recitations/reci10-open-source/#scavenger-hunt-30-min","text":"Join the slide deck made by your TA for your class and make a copy of the slide for your team. Then, search for open source projects to fill each square in the Scavenger Hunt table. Each project can only count for one square. The goal is to have as many squares filled as possible! While learning about different open source projects, think about what type of projects you would be interested in working on for Project 5.","title":"Scavenger Hunt (30 min)"},{"location":"recitations/reci10-open-source/#reflection-10-min","text":"With your team, discuss the following questions: - Which attributes make a good open source project? A bad open source project? - Which projects did you find that you would most like to work on? Which would you least like to work on? Why? Pick 3 projects that you are interested in pursing for Project 5.","title":"Reflection (10 min)"},{"location":"recitations/reci10-open-source/#public-project-selection","text":"Once your team has decided on an open source project, add it to the Public Project Selection Spreadsheet .","title":"Public Project Selection"},{"location":"recitations/reci10-open-source/#resources","text":"A list of beginner friendly projects: https://github.com/MunGell/awesome-for-beginners Github Showcase for new contributors: https://github.com/showcases/great-for-new-contributors Issues that are labeled \u201cup-for-grabs\u201d: https://up-for-grabs.net Apache projects: http://www.apache.org/ Mozilla projects: https://developer.mozilla.org/en-US/docs/MDN/Community/Contributing Mozilla has a number of Open Source projects (including Firefox and Thunderbird) that are actively being developed and they recommend bugs for new contributors","title":"Resources"},{"location":"recitations/reci11-p5-checkin/","text":"Recitation 11: Open Source Project and Task Selection Check In \u00b6 This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope before you present. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11 - Open Source Project and Task Selection Check In"},{"location":"recitations/reci11-p5-checkin/#recitation-11-open-source-project-and-task-selection-check-in","text":"This recitation is dedicated to an in-person group presentation about your project and task selection. See P5A: Project and Task Selection for more details. Make sure to submit your slides on Gradescope before you present. Use this form to provide feedback on all peer presentation. Participation credit will be provided based on the feedback you provide.","title":"Recitation 11: Open Source Project and Task Selection Check In"},{"location":"recitations/reci2-teamcontract/","text":"Recitation 2: Team Contract Workshop \u00b6 Overview \u00b6 After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility. Prerequisites \u00b6 None! You will be doing the activities in your teams. Sit with them! Activity 1: Get to know your team! \u00b6 See team assignments here . Do some quick intros, then get ready for.. Activity 1a: Similarities! \u00b6 In your group, spend 5 minutes finding things that every group member has in common. If your team has n people, find n such similarities. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026 Activity 1b: Team Name \u00b6 As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d Activity 2: Team Contract \u00b6 In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc) and try to anticipate what might come up over the course of the semester. After each section, we'll discuss as a class and see what you came up with! Activity 2a: Expectations \u00b6 Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on projects? How will you deal with unforeseen circumstances affecting team members (sickness, interviews, competitions)? Activity 2b: Communication and Scheduling \u00b6 Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time to have recurring meetings is an important marker of team success. What platform (s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or through Zoom? What will / will you not accommodate? If a deadline is approaching and there is still work to be done, how will you meet / communicate? Activity 2c: Responsibilities and Conflict Resolution \u00b6 Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will you divide responsibilities and tasks between team members? Who will be in charge of organizing, running, and taking notes during meetings ? How will you rotate this responsibility? How will you address any teamwork issues that may come up? What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above.","title":"Recitation 2 - Team Contract Workshop"},{"location":"recitations/reci2-teamcontract/#recitation-2-team-contract-workshop","text":"","title":"Recitation 2: Team Contract Workshop"},{"location":"recitations/reci2-teamcontract/#overview","text":"After this recitation, students will have met their teams and completed a rough draft of the teamwork contract they'll submit for Project 2. Students will meet their teams and discuss important aspects of team work such as setting expectations, managing communication, and distributing responsibility.","title":"Overview"},{"location":"recitations/reci2-teamcontract/#prerequisites","text":"None! You will be doing the activities in your teams. Sit with them!","title":"Prerequisites"},{"location":"recitations/reci2-teamcontract/#activity-1-get-to-know-your-team","text":"See team assignments here . Do some quick intros, then get ready for..","title":"Activity 1: Get to know your team!"},{"location":"recitations/reci2-teamcontract/#activity-1a-similarities","text":"In your group, spend 5 minutes finding things that every group member has in common. If your team has n people, find n such similarities. Try to avoid simple things like: everyone is a CMU student, everyone is enrolled in 313, everyone loves 313, etc\u2026","title":"Activity 1a: Similarities!"},{"location":"recitations/reci2-teamcontract/#activity-1b-team-name","text":"As part of Project 2, you\u2019ll need to come up with a name for your team. Do so now! As per the project handout, your name should be \u201cunique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children.\u201d","title":"Activity 1b: Team Name"},{"location":"recitations/reci2-teamcontract/#activity-2-team-contract","text":"In Project 2, we'll ask you to write up and submit a team contract, which will be a written record of how your team will work together. In this activity, we'll create a rough outline of the team contract and start the discussions around important team building and teamwork topics. First, determine where you'll write your contract and how you'll keep track of the talking points you discuss today. We suggest creating a shared Google Drive folder and doc for easy access and editing. Next, you'll work through each of the following sections with your team and as a class. Think about your prior experience working in other teams (work, school, sports, etc) and try to anticipate what might come up over the course of the semester. After each section, we'll discuss as a class and see what you came up with!","title":"Activity 2: Team Contract"},{"location":"recitations/reci2-teamcontract/#activity-2a-expectations","text":"Here are some of the important questions to consider regarding setting expectations: How much time is each team member expected to be putting into working on projects? How will you deal with unforeseen circumstances affecting team members (sickness, interviews, competitions)?","title":"Activity 2a: Expectations"},{"location":"recitations/reci2-teamcontract/#activity-2b-communication-and-scheduling","text":"Here are some important questions to consider regarding team communication: When will your team meet? Setting aside a day and time to have recurring meetings is an important marker of team success. What platform (s) will your team be using to communicate? How quickly should team members respond? Will you meet in person or through Zoom? What will / will you not accommodate? If a deadline is approaching and there is still work to be done, how will you meet / communicate?","title":"Activity 2b: Communication and Scheduling"},{"location":"recitations/reci2-teamcontract/#activity-2c-responsibilities-and-conflict-resolution","text":"Here are some important questions to consider regarding distributing responsibilities and what your team might do in the case of any conflict: How will you divide responsibilities and tasks between team members? Who will be in charge of organizing, running, and taking notes during meetings ? How will you rotate this responsibility? How will you address any teamwork issues that may come up? What are the steps the team would take to address teammates who are contributing too little, and when will the team bring this up to the instructors? Remember to do Recitation Quiz 2 on Gradescope! Please only open it after you have completed all the steps above.","title":"Activity 2c: Responsibilities and Conflict Resolution"},{"location":"recitations/reci3-archaeology/","text":"Recitation 3: Software Archaeology \u00b6 Overview \u00b6 In today\u2019s recitation, we will practice getting to know an unknown codebase specifically in the context of a bug in a python-clone of Instagram, Albumy. Let's fix some bugs! Check out this issue of the bug. Currently, comments can\u2019t be deleted. Even if we click on the delete button, it does not work. Task 0: Clone the repo \u00b6 Fork this repository and clone it. Follow the README to install the necessary modules and run Albumy. Task 1: Reproduce the bug \u00b6 After you've successfully ran the program, go through it to reproduce the bug. Task 2: Diving into the code and fixing the bug \u00b6 Let\u2019s learn more about this bug! Your high-level goal is to identify the code producing the bug and remember more about the bug en route to fix it. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the buggy code. Try some or all of the following tasks: Explore the albumy directory Can you find functions that look like the same buggy code you\u2019ve found? Use your IDE to jump to a definition implicated in the code you\u2019re debugging Try making a change! It will reflect in the UI. Can you fix the bug? Task 3: Making a Pull Request \u00b6 If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue.","title":"Recitation 3 - Software Archaeology"},{"location":"recitations/reci3-archaeology/#recitation-3-software-archaeology","text":"","title":"Recitation 3: Software Archaeology"},{"location":"recitations/reci3-archaeology/#overview","text":"In today\u2019s recitation, we will practice getting to know an unknown codebase specifically in the context of a bug in a python-clone of Instagram, Albumy. Let's fix some bugs! Check out this issue of the bug. Currently, comments can\u2019t be deleted. Even if we click on the delete button, it does not work.","title":"Overview"},{"location":"recitations/reci3-archaeology/#task-0-clone-the-repo","text":"Fork this repository and clone it. Follow the README to install the necessary modules and run Albumy.","title":"Task 0: Clone the repo"},{"location":"recitations/reci3-archaeology/#task-1-reproduce-the-bug","text":"After you've successfully ran the program, go through it to reproduce the bug.","title":"Task 1: Reproduce the bug"},{"location":"recitations/reci3-archaeology/#task-2-diving-into-the-code-and-fixing-the-bug","text":"Let\u2019s learn more about this bug! Your high-level goal is to identify the code producing the bug and remember more about the bug en route to fix it. We\u2019d like you to dive into the codebase and \u201cexcavate\u201d the buggy code. Try some or all of the following tasks: Explore the albumy directory Can you find functions that look like the same buggy code you\u2019ve found? Use your IDE to jump to a definition implicated in the code you\u2019re debugging Try making a change! It will reflect in the UI. Can you fix the bug?","title":"Task 2: Diving into the code and fixing the bug"},{"location":"recitations/reci3-archaeology/#task-3-making-a-pull-request","text":"If you\u2019ve finished all that, Add and commit your changes Push the code to your forked repository. Create a pull request that links the issue.","title":"Task 3: Making a Pull Request"},{"location":"recitations/reci4-dysfunction/","text":"Recitation 4: Team Dysfunction \u00b6 Overview \u00b6 This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies. Context \u00b6 All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better. Part 0: Preparation \u00b6 We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class. Part 1: Task Planning Meeting Rehearsal (5 min) \u00b6 Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system. Team 1 \u00b6 For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications. Team 2 \u00b6 For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students. Team 3 \u00b6 For your first assignment, you've been asked to develop a better system for students to log in to their application portal. Team 4 \u00b6 For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2. Part 2: Presentations! (15 min) \u00b6 Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize! Part 3: Class Discussion (15 min) \u00b6 As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems? Appendix A: Role Descriptions \u00b6 Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Recitation 4 - Team Dysfunction"},{"location":"recitations/reci4-dysfunction/#recitation-4-team-dysfunction","text":"","title":"Recitation 4: Team Dysfunction"},{"location":"recitations/reci4-dysfunction/#overview","text":"This recitation will give you the opportunity to practice and reflect on the roles you play within a team. We'll be going over common team dysfunction issues and discuss mitigation strategies.","title":"Overview"},{"location":"recitations/reci4-dysfunction/#context","text":"All teams are inherently dysfunctional in some sense. This is inevitable as they are made up of fallible, imperfect human beings, each with different goals and intentions. Thankfully, the causes of dysfunction are both identifiable and curable, but definitely not easy to resolve. Making a team functional and cohesive requires courage, good communication, and a strong resolve to making the team better.","title":"Context"},{"location":"recitations/reci4-dysfunction/#part-0-preparation","text":"We have pre-assigned each team to a set of roles. Have each member of the team choose a role from the options we give you. Keep your role secret from the other groups! We will have the audience guess your roles when your team presents to the class.","title":"Part 0: Preparation"},{"location":"recitations/reci4-dysfunction/#part-1-task-planning-meeting-rehearsal-5-min","text":"Congratulations! Your team has been hired as software developers to work on CMU's graduate school application system. We have assigned each team to a specifc task. Each group's tasks are below. You only have to roleplay your assigned task. As a team, research and find tools that can be used to improve your assigned system. Compare the strengths and weaknesses of the tools. At the end of this activity, your group should have agreed on a tool to use. Be sure to also assign each member a task in order to integrate the tool into your assigned system.","title":"Part 1: Task Planning Meeting Rehearsal (5 min)"},{"location":"recitations/reci4-dysfunction/#team-1","text":"For your first assignment, you've been asked to develop a better system for handling online payments made by graduate students for their applications.","title":"Team 1"},{"location":"recitations/reci4-dysfunction/#team-2","text":"For your first assignment, you've been asked to develop a better system for sending acceptances to accepted students.","title":"Team 2"},{"location":"recitations/reci4-dysfunction/#team-3","text":"For your first assignment, you've been asked to develop a better system for students to log in to their application portal.","title":"Team 3"},{"location":"recitations/reci4-dysfunction/#team-4","text":"For your first assignment, you've been asked to develop a better system for students to upload documents to their application. Activity Notes: Each member should act as their role during the meeting. Try to fix the dysfunction presented in this meeting and reflect on how you would fix similar issues if they come up in Project 2.","title":"Team 4"},{"location":"recitations/reci4-dysfunction/#part-2-presentations-15-min","text":"Each group will present their meeting to the class (~2 minutes per presentation). The audience will then guess the roles of each of the members of the presenting group. Best group will win a prize!","title":"Part 2: Presentations! (15 min)"},{"location":"recitations/reci4-dysfunction/#part-3-class-discussion-15-min","text":"As a class, discuss the following questions: Were you able to identify the roles played by the other groups? What problems were caused by their behavior? How would you handle these dysfunctional characteristics in future situations? Can you think of mitigation strategies and solutions to avoid these problems?","title":"Part 3: Class Discussion (15 min)"},{"location":"recitations/reci4-dysfunction/#appendix-a-role-descriptions","text":"Below a description of the roles for each number 1-7 and the behavior of each one: The Contributor: You are aiming for general team success. Ask for your team members' opinions often, actively discuss solutions with your team, and demonstrate engagement throughout the activity. The Know-It-All: You think you are extremely experienced and know how to solve all problems on your own. Act like you don't need any help and just tell your team to watch while you search for the tool. Be pushy in telling other members how to search for information about the tool and shoot other members' ideas down. The Silent One: You assume your team members know everything and don\u2019t feel you need to say much. Pay attention to the meeting, but simply do not suggest anything. Remain passive but friendly. The Agreer: You are afraid of raising conflicts and hence decided to just go along with whatever your team decides. Agree with everything during the activity and do not question the decisions of your team. The Hitchhiker: Your goal is to do as little work as possible. Be friendly but not productive. Try to end the meeting as quickly as possible so you can slack off. Get other people to step in for you and take over your tasks. Make fake attempts to make it look like you tried to figure out the task, then pass off the work to someone else. The Flaker: You're interested in the project, but don't want to contribute more time than necessary. Actively contribute to group discussions until tasks are being assigned, then begin giving reasons why you can't contribute more (i.e. busy with interview prep, midterm, or other assignments). If asked to do something else, continue finding other excuses on why you can\u2019t contribute. The Perfectionist: You want this project to be absolutely perfect in even the most minor details. To you, it's most important that the tool\u2019s source code is fully readable, perfectly documented, has a large test suite, and is aesthetically pleasing , and you will argue for or against the tool based on these minor details.","title":"Appendix A: Role Descriptions"},{"location":"recitations/reci5-midterm-review/","text":"Recitation 5: Midterm Review \u00b6 Overview \u00b6 As we have our midterm scheduled for Tuesday, February 28th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam. Exams \u00b6 Fall 2020 Fall 2021 Fall 2022","title":"Recitation 5 - Midterm Review"},{"location":"recitations/reci5-midterm-review/#recitation-5-midterm-review","text":"","title":"Recitation 5: Midterm Review"},{"location":"recitations/reci5-midterm-review/#overview","text":"As we have our midterm scheduled for Tuesday, February 28th, this recitation slot will be used for a midterm review. Complete the exams from past years listed below and come to recitation with any questions! Note: As we have not yet covered software engineering for ML this semester, please ignore those questions. The SE4ML material will not appear on the exam.","title":"Overview"},{"location":"recitations/reci5-midterm-review/#exams","text":"Fall 2020 Fall 2021 Fall 2022","title":"Exams"},{"location":"recitations/reci6-deployment/","text":"Recitation 6: Deployment \u00b6 Overview \u00b6 Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with Fly.io (or Vercel as a backup) Set up the Extreme Startup web app for use in Tuesday's (3/14) lecture Definitions \u00b6 Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here! Task 0: Prep \u00b6 For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the ~Extreme Startup~ game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run the development server locally. Install the Fly.io CLI and set up the Fly.io account that you'll use to host your app. Complete steps 1-3 of the instructions here . In your local basic-web-app repo, run fly launch followed by fly open Now check your fly.io dashboard to monitor your app deployment. This has already been a lot of instructions, so good job for getting this far!!! Note: Fly.io offers a free tier and you should not be required to enter any credit card info for the purposes of this recitation. If you get a message saying that a credit card is required, you can complete the recitation using Vercel instead. See the backup instructions below. Task 1: Continuous Deployment \u00b6 Next, we'll setup CD. Our goal is to set up a GitHub action that links to our Fly.io account and automatically redeploys a new version of our app whenever a new change is pushed into the main branch. The steps to do this are as follows: Get a Fly API token with flyctl auth token . Go to your fork on GitHub and click Settings. Go to Secrets and Variables > Actions and create a repository secret called FLY_API_TOKEN with the value of the token from the previous step. This is how GitHub will link to your Fly.io account. Double check that fly.toml (the config file fly.io uses for deployment) is not listed in your .gitignore . Create a new file .github/workflows/fly.yml .This is the file that will outline instructions for the GitHub action. Fill the file with the contents listed under step 8 here . Commit and push your changes! Now let's take a step back and understand what we've done. First, we generated an authorization token and used it to connect Fly.io to our GitHub repo. Then, we created a fly.yml file setting up a GitHub action that automatically runs the deployment commands whenever a push is made to the main branch. See if you can figure out which lines do what in the code above! Now, look through the codebase and try to change the header on your app's frontend while testing with the local development server. Once you have made your changes, commit and push them. Back on GitHub, you should see the Action trigger and your app will redeploy! With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed. Cool! Bonus Task: Continuous Integration \u00b6 While the steps above are all that is required for the ~Extreme Startup~ game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Note: In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game tomorrow. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope! Vercel Backup Instructions \u00b6 Task 0 \u00b6 See the instructions here to setup a Vercel deployment. Task 1 \u00b6 To learn how to setup a deployment GitHub action for Vercel, see here . Task 2 \u00b6 Same as above!","title":"Recitation 6 - Deployment"},{"location":"recitations/reci6-deployment/#recitation-6-deployment","text":"","title":"Recitation 6: Deployment"},{"location":"recitations/reci6-deployment/#overview","text":"Throughout this recitation, students will: Understand the fundamental steps involved in deployment Learn about CI/CD and the basics of how to set it up in a Github repo Get hands on experience deploying with Fly.io (or Vercel as a backup) Set up the Extreme Startup web app for use in Tuesday's (3/14) lecture","title":"Overview"},{"location":"recitations/reci6-deployment/#definitions","text":"Before we begin, we have to understand our goals with CI/CD. It is a software development approach that utilizes frequent, automated testing and deployment to ensure that changes to the codebase can be rapidly and safely incorporated into the production environment. Continuous Integration (CI) refers to the practice of automatically building and testing the codebase whenever new changes are introduced. This involves integrating code changes from multiple developers into a shared repository and running automated tests to ensure that the changes do not break the existing functionality. Continuous Deployment/Delivery (CD) refers to the practice of automatically deploying code changes to the production environment after they have been tested and approved. Continuous Deployment involves automatically deploying changes to the production environment as soon as they pass automated tests, while Continuous Delivery involves deploying changes to a staging environment for further testing and approval before being deployed to production. Together, CI/CD enables software teams to rapidly and safely develop, test, and deploy changes to the codebase, improving the speed and quality of software delivery while reducing the risk of errors and downtime. There's quite a lot to learn about CI/CD. If you're interested in learning more, click here!","title":"Definitions"},{"location":"recitations/reci6-deployment/#task-0-prep","text":"For this recitation, we'll be working with a basic web app built on Next.js that responds to HTTP requests. Your job on Tuesday during the ~Extreme Startup~ game will be to parse these requests and figure out what the correct response is. Today we'll focus on setting up the app so that everything is in place for the game. The steps to do this are as follows: Warning Do not use codespaces for this task, and the rest of the recitation. Everything must be done locally. Fork this repo: https://github.com/CMU-313/basic-web-app . Follow the instructions in the readme to run the development server locally. Install the Fly.io CLI and set up the Fly.io account that you'll use to host your app. Complete steps 1-3 of the instructions here . In your local basic-web-app repo, run fly launch followed by fly open Now check your fly.io dashboard to monitor your app deployment. This has already been a lot of instructions, so good job for getting this far!!! Note: Fly.io offers a free tier and you should not be required to enter any credit card info for the purposes of this recitation. If you get a message saying that a credit card is required, you can complete the recitation using Vercel instead. See the backup instructions below.","title":"Task 0: Prep"},{"location":"recitations/reci6-deployment/#task-1-continuous-deployment","text":"Next, we'll setup CD. Our goal is to set up a GitHub action that links to our Fly.io account and automatically redeploys a new version of our app whenever a new change is pushed into the main branch. The steps to do this are as follows: Get a Fly API token with flyctl auth token . Go to your fork on GitHub and click Settings. Go to Secrets and Variables > Actions and create a repository secret called FLY_API_TOKEN with the value of the token from the previous step. This is how GitHub will link to your Fly.io account. Double check that fly.toml (the config file fly.io uses for deployment) is not listed in your .gitignore . Create a new file .github/workflows/fly.yml .This is the file that will outline instructions for the GitHub action. Fill the file with the contents listed under step 8 here . Commit and push your changes! Now let's take a step back and understand what we've done. First, we generated an authorization token and used it to connect Fly.io to our GitHub repo. Then, we created a fly.yml file setting up a GitHub action that automatically runs the deployment commands whenever a push is made to the main branch. See if you can figure out which lines do what in the code above! Now, look through the codebase and try to change the header on your app's frontend while testing with the local development server. Once you have made your changes, commit and push them. Back on GitHub, you should see the Action trigger and your app will redeploy! With this complete, you'll be able to quickly iterate and any changes you make and push to your fork will be automatically deployed. Cool!","title":"Task 1: Continuous Deployment"},{"location":"recitations/reci6-deployment/#bonus-task-continuous-integration","text":"While the steps above are all that is required for the ~Extreme Startup~ game, we'll spend the rest of the recitation setting up CI for our repo as well. For our purposes, we'll set up an action that runs ESLint and our Jest tests whenever we push to the repo. The process will be similar to above. Create a new .github/workflows/test.yml Copy the following into the files and fill in the blanks appropriately! name: __BLANK 1__ on: push: branches: - main jobs: __BLANK 2__: runs-on: ubuntu-latest name: __BLANK 3__ steps: - uses: actions/checkout@v3 - uses: bahmutov/npm-install@v1 - run: npm run __BLANK 4__ (Run ESLint) - run: __BLANK 5__ (Run Jest) Hint: Look at the readme of the basic-web-app repo! Note: In an ideal world, you would condition the deployment action on this action, such that your app is only deployed if the linter and tests pass. Sadly, our world is not ideal :(, but if you want to learn more, click here and here ! Once this is complete, you will be ready for the game tomorrow. Good job and good luck! Remember to do Recitation 6 Quiz on Gradescope!","title":"Bonus Task: Continuous Integration"},{"location":"recitations/reci6-deployment/#vercel-backup-instructions","text":"","title":"Vercel Backup Instructions"},{"location":"recitations/reci6-deployment/#task-0","text":"See the instructions here to setup a Vercel deployment.","title":"Task 0"},{"location":"recitations/reci6-deployment/#task-1","text":"To learn how to setup a deployment GitHub action for Vercel, see here .","title":"Task 1"},{"location":"recitations/reci6-deployment/#task-2","text":"Same as above!","title":"Task 2"},{"location":"recitations/reci7-docker/","text":"Recitation 7: Microservices and Docker \u00b6 Prerequisites \u00b6 You should have downloaded Docker. If you haven't follow the installation instructions here Setup Instructions (10 min): \u00b6 Fork this repo and clone it. Also start the docker engine. Overview \u00b6 During this recitation, students will create a simple FastAPI app, containerize it and deploy it. Context \u00b6 Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] } Activity \u00b6 Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml . Bonus \u00b6 Try deploying your container using instructions from here .","title":"Recitation 7 - Docker and Containerization"},{"location":"recitations/reci7-docker/#recitation-7-microservices-and-docker","text":"","title":"Recitation 7: Microservices and Docker"},{"location":"recitations/reci7-docker/#prerequisites","text":"You should have downloaded Docker. If you haven't follow the installation instructions here","title":"Prerequisites"},{"location":"recitations/reci7-docker/#setup-instructions-10-min","text":"Fork this repo and clone it. Also start the docker engine.","title":"Setup Instructions (10 min):"},{"location":"recitations/reci7-docker/#overview","text":"During this recitation, students will create a simple FastAPI app, containerize it and deploy it.","title":"Overview"},{"location":"recitations/reci7-docker/#context","text":"Sadly, you still are unsure when your recitation time is AND who your TAs are. There exist a microservice that tells you which TA's are responsible for each section. Try it out using this link: https://whos-my-ta.fly.dev/section_id/a All you have to do is build a new service that builds on top of this microservice by including the time of the recitation as well. The endpoint has to return a JSON object in the following form: { \"section\" : \"section_name\" , \"start_time\" : \"HH:MM\" , \"end_time\" : \"HH:MM\" , \"ta\" : [ \"taName1\" , \"taName2\" ] }","title":"Context"},{"location":"recitations/reci7-docker/#activity","text":"Implement the section_info endpoint according to the specifications. You can edit app/main.py to do so. Test it by running the app locally. To install necessary files: pip install -r requirements.txt To run the app locally use the following command. Change the port number if you need to: uvicorn app.main:app --host 0.0.0.0 --port 8080 Implement ./Dockerfile . You can use the slides and this link as resources. Create the docker image using the command below, and check that the image has been created. docker build -t YOUR_IMAGE_NAME . Implement ./docker-compose.yml . You can use the slides for reference. Create a container using the docker image using the command below. docker-compose up -d Check that your container is running correctly by locally invoking the endpoint. You can try http://localhost:8080/section_id/a . Change the port number (8080) according to your docker-compose.yml .","title":"Activity"},{"location":"recitations/reci7-docker/#bonus","text":"Try deploying your container using instructions from here .","title":"Bonus"},{"location":"recitations/reci8-team-feedback/","text":"Recitation 8: Team Feedback \u00b6 Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8 - Team Feedback"},{"location":"recitations/reci8-team-feedback/#recitation-8-team-feedback","text":"Review the feedback provided by your teammates, and work with your team to identify and address issues on your team. Do so by following the instructions on the handout provided during recitation. You can also access the handout here. Turn in your action plan Make sure to submit your completed action plan on gradescope to receive participation credit for this recitation.","title":"Recitation 8: Team Feedback"},{"location":"recitations/reci9-ml/","text":"Recitation 9: Machine Learning \u00b6 Setup Instructions: \u00b6 Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup Overview \u00b6 During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students! Context \u00b6 You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb. Activity 1: Examine the Titanic Dataset (10 mins) \u00b6 The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it? Activity 2: Import and Analyze Models (5 min) \u00b6 We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section. Activity 3: Fairness Metrics Evaluation (15 mins) \u00b6 An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates. Activity 4: Recommendation (10 mins) \u00b6 Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Recitation 9 - Machine Learning"},{"location":"recitations/reci9-ml/#recitation-9-machine-learning","text":"","title":"Recitation 9:  Machine Learning"},{"location":"recitations/reci9-ml/#setup-instructions","text":"Go to this repo and clone it Make sure you can run the jupyter notebooks Google Colab is one option to do this (NOTE: you should be able to do this by adding tocolab to the github url for the model_testing notebook) Make sure to connect to google drive and upload the titanic data set folder, double check the file paths in the notebook to make sure they match You can also run it locally if you have jupyter setup","title":"Setup Instructions:"},{"location":"recitations/reci9-ml/#overview","text":"During this recitation, students will have the opportunity to play with various machine learning frameworks and tools and justify a recommendation argument for using a machine learning model in practice. This is an individual activity so everyone should be running the notebook; however, feel free to discuss the activity and your approach with other students!","title":"Overview"},{"location":"recitations/reci9-ml/#context","text":"You're working as a software engineer at a cruise line company. Your company wants to train a ML model that helps the crew decide who should be given priority to board a lifeboat in the situation of emergency. Your ML engineer decided to train it on titanic dataset, because it's a widely available dataset. He create a model that predicts if a person would have survived in titanic, and if they do, they should be prioritized in the event of emergency. After all, the emergency handling protocol on titanic, the greatest liner of all times, must be fair and effective right? We can use the Titanic dataset to make predictions on whether or not passengers would survive given features in the dataset. We trained two models on the data: one that uses sex as a feature and one that does not. You\u2019ll be working with the starter code in model_testing.ipynb.","title":"Context"},{"location":"recitations/reci9-ml/#activity-1-examine-the-titanic-dataset-10-mins","text":"The dataset contains detailed information on the passengers aboard the Titanic. Go through the first part of the testing notebook. Then choose one feature and plot its distribution. Is the distribution what you expected it to be? Was there anything surprising about it?","title":"Activity 1: Examine the Titanic Dataset (10 mins)"},{"location":"recitations/reci9-ml/#activity-2-import-and-analyze-models-5-min","text":"We pre-trained two models based on the Titanic training dataset. Let's import these models and review their accuracy. Note that the difference between the models is one uses sex as a feature and one does not. Run the cells in this section.","title":"Activity 2: Import and Analyze Models (5 min)"},{"location":"recitations/reci9-ml/#activity-3-fairness-metrics-evaluation-15-mins","text":"An important part of evaluating an ML model is assessing its fairness. In this activity, evaluate the fairness metrics that we discussed in class with respect to sex and pclass. 1. Fill in the notebook to compute the demographic parity metric 2. Fill in the notebook to compute the equal opportunity metric 3. Feel free to evaluate and compute any other metrics that you think would be helpful to evaluate the model. One to consider is true and false positive rates and/or true and false negative rates.","title":"Activity 3: Fairness Metrics Evaluation (15 mins)"},{"location":"recitations/reci9-ml/#activity-4-recommendation-10-mins","text":"Based on the analysis and evaluations we've done above (both fairness and accuracy), would you recommend that one of these models is used in practice by the cruise line company? Justify your choice with evidence that you produced in previous activities. Feel free to write directly in the jupyter notebook and then add your answer to the gradescope quiz.","title":"Activity 4: Recommendation (10 mins)"},{"location":"recitations/archive/reci2-angularjs/","text":"Recitation 2: Crash Course in Angular.js \u00b6 Overview \u00b6 This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment. Pre-requisites \u00b6 Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge Task 0: Fork the repl \u00b6 Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js Task 1: Setup Angular.js \u00b6 Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app> Task 2: Data Binding Basics \u00b6 Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time Task 3: Setting up the controller \u00b6 Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias Task 4: Rendering the list of todo items \u00b6 Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered Task 5: Adding new todo items \u00b6 Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\"> Task 6: Special styling for completed todo items \u00b6 Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Recitation 2 - Angular.js and MVC"},{"location":"recitations/archive/reci2-angularjs/#recitation-2-crash-course-in-angularjs","text":"","title":"Recitation 2: Crash Course in Angular.js"},{"location":"recitations/archive/reci2-angularjs/#overview","text":"This recitation aims to highlight the basics of Angular.js by walking students through the implementation of a basic To-Do list app. Students will be expected to use this knowledge to make changes to the Angular.js components of the Teedy project in a future assignment.","title":"Overview"},{"location":"recitations/archive/reci2-angularjs/#pre-requisites","text":"Basic understanding of how the web works Basic HTML/CSS knowledge Basic JavaScript knowledge","title":"Pre-requisites"},{"location":"recitations/archive/reci2-angularjs/#task-0-fork-the-repl","text":"Create an account on repl.it Fork this repl - you\u2019ll be using this to work through this exercise and see your changes When you run the app you should see something like the below screenshot. At this point, all the static HTML for the todo list has been set up. You\u2019ll be working on making the todo list app function properly using Angular.js","title":"Task 0: Fork the repl"},{"location":"recitations/archive/reci2-angularjs/#task-1-setup-angularjs","text":"Goal: Convert the basic HTML skeleton in the repl to an Angular.js app Steps: Import the Angular.js library by adding the following script tag to the head component of index.html < script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\" ></ script > Add the ng-app directive to the main <html> tag to specify the root of your app This involves changing the <html> tag at the top of index.html to <html ng-app>","title":"Task 1: Setup Angular.js"},{"location":"recitations/archive/reci2-angularjs/#task-2-data-binding-basics","text":"Goal: Display a dynamic title based on user input Steps: Use the ng-model directive to tie the value in the name text input field to a variable in the Angular.js app\u2019s model. Add ng-model=\"varName\" to the name text input tag Include {{varName}} in the Hello here's your todo list string to bind the data in the model to the title in the view Changing the value in the name text field should now change the title in real-time","title":"Task 2: Data Binding Basics"},{"location":"recitations/archive/reci2-angularjs/#task-3-setting-up-the-controller","text":"Goal: A boiler-plate controller called TodoListController has been set up in app.js. We want to connect our app with this controller so we can get more control over our todo list Steps: Import app.js by adding the following script tag to the head component of index.html < script src = \"app.js\" ></ script > Change the ng-app directive to bind to todoApp Change <html ng-app> at the top of index.html to <html ng-app=\"todoApp\"> Add the ng-controller directive to bind the TodoListController Change the opening <body> tag to <body ng-controller=\"TodoListController as todoList\"> Now we can access the controller within the body tag using the todoList alias","title":"Task 3: Setting up the controller"},{"location":"recitations/archive/reci2-angularjs/#task-4-rendering-the-list-of-todo-items","text":"Goal: There\u2019s a list called todos in our controller that we\u2019ll use to store our todo list items. We want to replace the static todo list item with the todo items in this list Steps: Use the ng-repeat directive to render items in the list Change the <li> tag that renders a list item to <li ng-repeat=\"todo in todoList.todos\"> Add the ng-model=\"todo.done\" directive to the checkbox input tag so the checkbox reflects the value in the done field of a given todo list item Replace the static todo list item text with {{todo.text}} to render the text associated with a given todo item in the list Changing the data in the todos list in app.js should now change the contents of the todo list rendered","title":"Task 4: Rendering the list of todo items"},{"location":"recitations/archive/reci2-angularjs/#task-5-adding-new-todo-items","text":"Goal: Allow users to add new todos to the list using the form in the app Steps: Use the ng-model directive to tie the value in the new todo text input field to a variable in the angular.js app\u2019s model Add ng-model=\"todoList.todoText\" to the add new todo here text input tag Implement the todoList.addTodo function in app.js Add a new todo item to the list using the data in todoList.todoText Clear the text input field by setting todoList.todoText to the empty string Add the ng-submit directive to the form to call this addTodo function on submit by changing the opening <form> tag to <form ng-submit=\"todoList.addTodo()\">","title":"Task 5: Adding new todo items"},{"location":"recitations/archive/reci2-angularjs/#task-6-special-styling-for-completed-todo-items","text":"Goal: We want to apply custom styling for completed todo items, so they appear crossed out Steps: A CSS class called done-true for completed todo items has been implemented in style.css . Make any changes you\u2019d like to this CSS class Apply this class to the todo text item Change the <span> tag used to render {{todo.text}} to <span class=\"done-{{todo.done}}\"> Checking a given todo item should lead to the custom css class being applied to that item","title":"Task 6: Special styling for completed todo items"}]}
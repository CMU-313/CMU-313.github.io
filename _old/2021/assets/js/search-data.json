{"0": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"1": {
    "doc": "Announcements",
    "title": "Week 1 Announcement",
    "content": "Apr 8 &middot; 0 min read . | Create a new repository based on Just the Class. | Configure a publishing source for GitHub Pages. Your course website is now live! | Update _config.yml with your course information. | Edit and create .md Markdown files to add your content. | . ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"2": {
    "doc": "Announcements",
    "title": "Week 0 Announcement",
    "content": "Apr 1 &middot; 0 min read Hello world! . ",
    "url": "/announcements/",
    "relUrl": "/announcements/"
  },"3": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "/assignments/",
    "relUrl": "/assignments/"
  },"4": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": "|   | Date | Topic | Reading | Homework Due | . | Lecture | Aug-31 | Intro |   |   | . | Recitation | Sep-1/3 | Docker |   |   | . | Lecture | Sep-2 | Metrics and Measurement |   |   | . | Lecture | Sep-7 | Case Study 737MAX |   |   | . | Recitation | Sep-8/10 | Tools for collaborative software development |   |   | . | Lecture | Sep-9 | Milestones, estimation, planning |   | HW1 due | . | Lecture | Sep-14 | Software Archaeology |   |   | . | Recitation | Sep-15/17 | Software Archaeology |   |   | . | Lecture | Sep-16 | Requirements: Concepts and Challenges |   |   | . | Lecture | Sep-21 | Requirements: Elicitation and Documentation |   |   | . | Recitation | Sep-22/24 | Requirements Interviews |   |   | . | Lecture | Sep-23 | Ethics |   |   | . | Lecture | Sep-28 | SE4ML: part 1 |   |   | . | Recitation | Sep-29/Oct-1 | Requirements/terrible stakeholders |   |   | . | Lecture | Sep-30 | SE4ML: part 2 |   |   | . | Lecture | Oct-5 | Architecture: Intro and Overview |   |   | . | Recitation | Oct-6/8 | Midterm review |   |   | . | Lecture | Oct-7 | Architecture: Documentations, Patterns, Tactics |   |   | . |   | Oct-12 | MIDTERM EXAM |   |   | . | Recitation | Oct-13/15 | No Recitation |   |   | . |   | Oct-14 | NO CLASS |   |   | . | Lecture | Oct-19 | Architecture: Microservices |   |   | . | Recitation | Oct-20/22 | Team Dysfunction |   |   | . | Lecture | Oct-21 | Architecture: Devops |   |   | . | Lecture | Oct-26 | Introduction to QA and Testing |   |   | . | Recitation | Oct-27/29 | Static Analysis/CI |   |   | . | Lecture | Oct-28 | Chaos Engineering |   |   | . | Lecture | Nov-2 | QA: Static Analysis: part 1 |   |   | . | Recitation | Nov-3/5 | No recitation - Holiday |   |   | . | Lecture | Nov-4 | QA: Static Analysis: part 2 |   |   | . | Lecture | Nov-9 | QA: ML explanability |   |   | . | Recitation | Nov-10/12 | ML explanability |   |   | . | Lecture | Nov-11 | QA: ML explanability |   |   | . | Lecture | Nov-16 | Process + Teams |   |   | . | Recitation | Nov-17/19 | TBD |   |   | . | Lecture | Nov-18 | Process + Teams |   |   | . |   | Nov-23 | NO CLASS |   |   | . |   | Nov-25 | THANKSGIVING |   |   | . | Lecture | Nov-30 | Process + Teams |   |   | . | Recitation | Dec-1/3 | TBD |   |   | . | Lecture | Dec-2 | Business models |   |   | . ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"5": {
    "doc": "HW01 Joining the team",
    "title": "17-313: Foundations of Software Engineering",
    "content": " ",
    "url": "/assignments/hw1#17-313-foundations-of-software-engineering",
    "relUrl": "/assignments/hw1#17-313-foundations-of-software-engineering"
  },"6": {
    "doc": "HW01 Joining the team",
    "title": "Homework 1: Joining the team",
    "content": "Learning goals . | Familiarize yourself with an existing software project . | Download, install and run an existing software project. | Run an evaluation tool and collect metrics . | Evaluate the results of these metrics . | . Background . Git and GitHub: . | Git Documentation | Git Flow | GitHub Basics | GitHub’s Flow | GitHub Cross-Referencing | . Docker: . | Overview | Images vs Containers | Mounting Volumes | . Specification . Welcome to the team! To start your journey on this project, your first task is to become familiar with an existing piece of software. Eventually you will be adding new features, but the first step is to simply download, run, evaluate, and explore the current software product. The project we will be building on this semester is an open source document management system, the Mayan EDMS (https://www.mayan-edms.com/) system. We will be using a class-specific fork of Mayan, whose repository is located at: https://github.com/CMU-313/Mayan-EDMS. This fork is based off v4.0.7 (released June 11, 2021), and contains minor tweaks to make it easier to modify and debug. Forking from this repository will also allow you to send pull requests to the instructors, which is the primary way of submitting code deliverables. Your first step should be to read the documentation from Mayan EDMS, and review the contents of the repository. There is documentation both for users, and for developers. Your next task is to simply download and run the system. There are several ways to do this, but we strongly suggest that you build a Docker container. While you may install locally, that is almost always significantly more work then using Docker. The documentation for this is available here: (https://docs.mayan-edms.com/chapters/docker/building.html). Be sure to use the CMU-313 repository on GitHub instead of the official repository on GitLab. Once you build a Docker image, you should run Mayan EDMS in a Docker container. You may first need to set up containers for dependencies such as Postgresql and Redis. Refer to the Docker installation instructions, but make sure to use the Mayan image that you just built instead of pulling it from Docker Hub. We recommend using Docker compose, which automates some of these tasks using a handy compose file. If you ran Mayan EDMS successfully, you should be able to navigate to http://localhost and see a web page with a login screen. You may customize the port number that Mayan will be deployed to (default is 80). Troubleshooting: If you have trouble building things locally, try pulling a pre-built Docker image as shown in the docs or using the upstream repository in order to precisely isolate the issue. Once you have Mayan EDMS up and running locally, proceed to evaluate it using the Google Lighthouse tool: https://developers.google.com/web/tools/lighthouse/). You can run Lighthouse as a stand alone application, or using the audit tab of google developer tools. After you run Lighthouse, it will give you a score for various dimensions: Performance, Accessibility, Best Practices, and SEO. After looking over the metrics, pick one metric to improve. The Lighthouse reports will give you some suggestions as to how to accomplish this. The only requirements are that your change should affect the top level score, and that the change should involve a commit to the repo. HINT: Because of this, you might want to avoid trying to change the performance score. First, open an issue in the parent repository to declare what aspect of Mayan you will be improving. You should look through existing issues, if any, to avoid duplicates. In the issue description, mention the current lighthouse score you observed and the warning that you are targeting. Tag the issue with one or more of the existing labels as appropriate, add it to milestone “HW1”, and assign yourself. In your own fork of Mayan, create a feature branch, implement the change, test it out locally, and commit your changes. Your commit message(s) must clearly describe what’s changing. Once you are satisfied, open a pull request in the parent repository. The PR should link the issue that you previously opened (e.g. using the “resolve(s)” keyword), summarize the changes, and describe how much the Lighthouse score improved by due to your change. After you have completed this task, we will ask you to reflect on the nature of metrics. To do this, you will answer the following questions about metrics, specifically in the context of Mayan EDMS. You should focus your answers for each of these questions on the one top level metric in Lighthouse that you chose to improve. | What properties do we care about, and how do we measure them? . | What is being measured? Does it (to what degree) capture the thing you care about? What are its limitations? . | How should this metric be incorporated into process? Check in gate? Once a month? Etc. | What are potentially negative side effects or incentives? . | . Deliverables and Deadlines . There are three (3) deliverables and one (1) deadline for this homework. Individual Component – 100 points – due Thursday, September 9th, 23:59 . | Create an issue in the parent repository, which must: . | Mention the current Lighthouse scores. | Mention the Lighthouse-reported problem being targeted. | Be assigned to yourself. | Be tagged with at least one appropriate label. | Be associated with the HW1 milestone. | . | Create a pull request in the parent repository, which must: . | Reference the issue created above. | Describe the fix and improvement to the Lighthouse score. | . | Create and submit a single PDF document to Gradescope, containing the following: . | A link to the pull request where you improved one of the lighthouse scores. | A prose description of which metric you chose to improve, why you chose that metrics, and how you went about improving it. | You should then answer the following questions about the metric you chose: . | What properties do we care about, and how do we measure it? . | What is being measured? Does it (to what degree) capture the thing you care about? What are its limitations? . | How should it be incorporated into process? Check in gate? Once a month? Etc. | What are potentially negative side effects or incentives? . | . | . | . Your reflection document should be under two pages (soft limit). Grading . This homework is worth 100 points. Running the project, making the change, and committing it properly constitutes 50 points (50%), and the reflection document constitutes 50 points (50%). To receive full credit for the group component, we expect: . | The correct use of tools and technology, including Docker, Git, GitHub, and Lighthouse. | Answers to the questions that demonstrate understanding of the benefits and limitations of software metrics, specifically in the context of Mayan EDMS. This analysis should go beyond superficial statements, mere descriptions, and truisms, which ties specifically to the context of this assignment. | . ",
    "url": "/assignments/hw1#homework-1-joining-the-team",
    "relUrl": "/assignments/hw1#homework-1-joining-the-team"
  },"7": {
    "doc": "HW01 Joining the team",
    "title": "HW01 Joining the team",
    "content": " ",
    "url": "/assignments/hw1",
    "relUrl": "/assignments/hw1"
  },"8": {
    "doc": "Just the Class",
    "title": "Foundations of Software Engineering",
    "content": " ",
    "url": "/#foundations-of-software-engineering",
    "relUrl": "/#foundations-of-software-engineering"
  },"9": {
    "doc": "Just the Class",
    "title": "Week 1 Announcement",
    "content": "Apr 8 &middot; 0 min read . | Create a new repository based on Just the Class. | Configure a publishing source for GitHub Pages. Your course website is now live! | Update _config.yml with your course information. | Edit and create .md Markdown files to add your content. | . [Announcements](/announcements/){: .btn .btn-outline .fs-3 } --> ",
    "url": "/",
    "relUrl": "/"
  },"10": {
    "doc": "Just the Class",
    "title": "Questions",
    "content": ". | When is a program good enough to ship? Have you built what the customer wanted? | Why (and how) does Netflix deliberately and randomly take down its own servers? | What can we learn from the Boeing 737 disaster? | How did Twitter eradicate the Fail Whale? And what does it have to do with Ruby? | How do you get a patch accepted into an open-source project? | You can write code. Can you build software? | . ",
    "url": "/#questions",
    "relUrl": "/#questions"
  },"11": {
    "doc": "Just the Class",
    "title": "Overview",
    "content": "Successful software projects require more than just technical expertise. Figuring out what the client wants, collaborating in a team, managing complexity, mitigating risks, staying on time and budget, and determining under various constraints when a product is good enough to be shipped are at least equally important topics that often have a significant human component. 17-313 explores these issues broadly covering the fundamentals of modern software engineering. Assuming reasonably solid programming skills (including unit testing and code-level design), we will explore the following topics: . | Process consideration for software development (How do avoid problems early? When and how much to design? When and how much to test? When and how to involve the customers? Agile methods…) . | Requirements elicitation, documentation, and evaluation (How to figure out what the customer really wants? Who else has an interest? How can we measure success objectively? How can we reliably document expectations? …) | Design for quality attributes (How can we design a system to be able to scale to millions of users? How can we design security into a system? …) | Strategies for quality assurance, including measurement, inspection, and static and dynamic analysis(What quality assurance strategy is best for a given system? What can we automate and when should we keep humans in the loop? How much testing and what kind of testing should we do? What qualities are important to assure beyond functional correctness? Can we evaluate usability, scalability, reliability, performance? How can we statically guarantee the absence of certain security issues? …) | Empirical methods in software engineering (How can we measure quality attributes such as performance, security, and reliability? How can we measure how users interact with the system? How can we know whether the difference matters? …) | Time and team management (How to estimate the duration and costs of a project? How to monitor progress and risks to recognize issues early? How to coordinate developers in a team? How to form and develop teams? How to select and motivate team members? How to deal with team dynamics such as social loafing? …) | Economics of software development (business models, outsourcing, open source, …) | . This course has a strong technical focus, and includes assignments with and without programming. Assignments also include written components. Students will get experience with team management and modern software-engineering tools. The course puts students on a fast track toward project management positions. Assignments (mostly done in groups) include: . | An introduction assignment where individual students will learn to engage with an existing code base. | A requirements assignment in which each team will interview stakeholders to elicit and document requirements for a software system. | An architecture assignment in which teams will train and deploy an ML model using microservices. | A project in which each team contributes to an open source project of their choice. This involves identifying an issue in the existing project, understanding the development process of that project and how to contribute, and actually making a contribution such as fixing a bug or adding a feature. Extra credit will be awarded if the contribution is merged into the project. | . ",
    "url": "/#overview",
    "relUrl": "/#overview"
  },"12": {
    "doc": "Just the Class",
    "title": "Just the Class",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"13": {
    "doc": "Schedule",
    "title": "Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "/schedule/#weekly-schedule",
    "relUrl": "/schedule/#weekly-schedule"
  },"14": {
    "doc": "Schedule",
    "title": "Monday",
    "content": "| ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"15": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": ". | Lecture 3:05 PM–4:25 PM POS 153 | . | ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"16": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": ". | Recitation A 12:20 PM–1:10 PM DH 1117 | Recitation B 1:25 PM–2:15 PM HOA 107 | . | ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"17": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": ". | Lecture 3:05 PM–4:25 PM POS 153 | . | ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"18": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Recitation C 12:20 PM–1:10 PM POS 147 | Recitation D 1:25 PM–2:15 PM POS 147 | . | . ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"19": {
    "doc": "Schedule",
    "title": "Schedule",
    "content": " ",
    "url": "/schedule/",
    "relUrl": "/schedule/"
  },"20": {
    "doc": "Staff",
    "title": "Staff",
    "content": " ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"21": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Michael Hilton . mhilton@cmu.edu . Rohan Padhye . rohanpadhye@cmu.edu . ",
    "url": "/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"22": {
    "doc": "Syllabus",
    "title": "Course Syllabus and Policies",
    "content": "The course is currently planned to be entirely in person for lectures, and recitation. There will be some office hours in person, but some might be held over zoom as well. The course uses Canvas (and Gradescope) for homework submission, grading, discussion, questions, announcements, lecture recordings, and supplementary documents; slides will be posted here; GitHub is used to coordinate group work. We will also use Slack for communication and group work. See Canvas for the sign up link. ",
    "url": "/syllabus/#course-syllabus-and-policies",
    "relUrl": "/syllabus/#course-syllabus-and-policies"
  },"23": {
    "doc": "Syllabus",
    "title": "Waitlist",
    "content": "We believe the waitlist is cleared; if you disagree or are having trouble enrolling, please contact us. ",
    "url": "/syllabus/#waitlist",
    "relUrl": "/syllabus/#waitlist"
  },"24": {
    "doc": "Syllabus",
    "title": "Prerequisites",
    "content": "No formal prerequisites, but you will get more out of the course if you have experience with some larger development projects, for example, through larger class projects (e.g., 17-214, 15-410), internships, or open-source contributions. ",
    "url": "/syllabus/#prerequisites",
    "relUrl": "/syllabus/#prerequisites"
  },"25": {
    "doc": "Syllabus",
    "title": "Communication",
    "content": "We make announcements through Canvas, including clarifying homework assignments. We will also be using Slack both for communication with the instructors, and to support your group work communication. The instructors and TAs hold weekly office hours and are reachable by email and Slack. Reach out for additional appointments. ",
    "url": "/syllabus/#communication",
    "relUrl": "/syllabus/#communication"
  },"26": {
    "doc": "Syllabus",
    "title": "Teamwork",
    "content": "Teamwork is an essential part of this course. Most assignments are done in teams of 3-5 students. Teams will be assigned by the instructor and stay together for multiple assignments. Guidance on teamwork, reflection, and conflict resolution will be provided throughout the semester and are an essential component of the class. Most assignments have a component that is graded for the entire group and a component that is graded individually. The team policy posted on Canvas applies and describes roles and teams and how to deal with conflicts and imbalances. ",
    "url": "/syllabus/#teamwork",
    "relUrl": "/syllabus/#teamwork"
  },"27": {
    "doc": "Syllabus",
    "title": "Textbook",
    "content": "Various readings throughout the semester available online or through the library; we do not have a single text book but rather assemble readings from different sources. As optional supplementary reading consider the (Freely available) Software Engineering at Google, Lessons Learned from Programming Over Time. ",
    "url": "/syllabus/#textbook",
    "relUrl": "/syllabus/#textbook"
  },"28": {
    "doc": "Syllabus",
    "title": "Assessment",
    "content": "Evaluation will be based on the following distribution: 60% assignments, 20% midterm, 10% in-class exercises, 10% reading quizzes. ",
    "url": "/syllabus/#assessment",
    "relUrl": "/syllabus/#assessment"
  },"29": {
    "doc": "Syllabus",
    "title": "Time management",
    "content": "This is a 12-unit course, and it is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in class and 8 hours on reading and assignments. Notice that most homework is done in groups, so please account for the overhead and decreased time flexibility that comes with groupwork. Please feel free to give the course staff feedback on how much time the course is taking for you. ",
    "url": "/syllabus/#time-management",
    "relUrl": "/syllabus/#time-management"
  },"30": {
    "doc": "Syllabus",
    "title": "Late work policy",
    "content": "Late work will receive feedback but no credit. Due to heavy reliance on teamwork in this course there are no late days. Exceptions to this policy will be made only in extraordinary circumstances, almost always involving a family or medical emergency—with your academic advisor or the Dean of Student Affairs requesting the exception on your behalf. Accommodations for travel (e.g., for interviews) are possible if requested at least 3 days in advance. Please communicate also with your team about timing issues. ",
    "url": "/syllabus/#late-work-policy",
    "relUrl": "/syllabus/#late-work-policy"
  },"31": {
    "doc": "Syllabus",
    "title": "Writing",
    "content": "Describing tradeoffs among decisions and communication with less technical stakeholders are key aspects of this class. Most homework assignments have a component that require discussing issues in written form or reflecting about experiences. To practice writing skills, the Global Communications Center (GCC) offers one-on-one help for students, along with workshops. The instructors are also happy to provide additional guidance if requested. ",
    "url": "/syllabus/#writing",
    "relUrl": "/syllabus/#writing"
  },"32": {
    "doc": "Syllabus",
    "title": "Professionalism",
    "content": "Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassement in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you’re “just joking!”), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to acheive. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: . | If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. | If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. | . (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.) . ",
    "url": "/syllabus/#professionalism",
    "relUrl": "/syllabus/#professionalism"
  },"33": {
    "doc": "Syllabus",
    "title": "Academic honesty and collaboration",
    "content": "The usual policies apply, especially the University Policy on Academic Integrity. Many of the assignments will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group’s work. This implies not taking credit for others’ work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honestly and collaboration for group work are the same as for individual work, substituting elevated to the level of “group.” . The course includes both individual assignments and individual components of group assignments. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual component of group assignments as equivalent to individual assignments overall, and expect you to complete such components independently of your groupmates. The rest of this academic honesty and collaboration content is taken from the policy used in 17-214, which we reuse almost directly (with minor modifications, and attribution). “You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student’s solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: . Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others’ access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help. If any of your work contains any statement that was not written by you, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. We will be using automated systems to detect software plagiarism. It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors or TAs for clarification.” . Note that the instructors respect honesty in these (and indeed most!) situations. ",
    "url": "/syllabus/#academic-honesty-and-collaboration",
    "relUrl": "/syllabus/#academic-honesty-and-collaboration"
  },"34": {
    "doc": "Syllabus",
    "title": "Accommodations",
    "content": "If you wish to request an accommodation due to a documented disability, please inform the instructor as soon as possible and contact Disability Resources at 412.268.2013 or access@andrew.cmu.edu. ",
    "url": "/syllabus/#accommodations",
    "relUrl": "/syllabus/#accommodations"
  },"35": {
    "doc": "Syllabus",
    "title": "A note on self care.",
    "content": "A note on self care. Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/. Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help. ",
    "url": "/syllabus/#a-note-on-self-care",
    "relUrl": "/syllabus/#a-note-on-self-care"
  },"36": {
    "doc": "Syllabus",
    "title": "Syllabus",
    "content": " ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  }
}
